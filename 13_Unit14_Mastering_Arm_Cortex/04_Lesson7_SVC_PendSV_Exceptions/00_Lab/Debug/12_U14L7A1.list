
12_U14L7A1.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000414  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000544  0800054c  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000544  08000544  0000154c  2**0
                  CONTENTS
  4 .ARM          00000000  08000544  08000544  0000154c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000544  0800054c  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000544  08000544  00001544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000548  08000548  00001548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000154c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  0800054c  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  0800054c  0000205c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b38  00000000  00000000  00001575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f0  00000000  00000000  000020ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000052c  00000000  00000000  0000239d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000100  00000000  00000000  000028d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000d8  00000000  00000000  000029d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002872  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011dd  00000000  00000000  0000531a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cba2  00000000  00000000  000064f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00013099  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002f4  00000000  00000000  000130dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800052c 	.word	0x0800052c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800052c 	.word	0x0800052c

08000170 <EXTI0_IRQHandler>:
}



void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	@ (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	@ (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	@ (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	@ (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	@ (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	@ (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	@ (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	@ (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	@ (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	@ (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	@ (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	@ (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)){ EXTI->PR |= (1<<5); GP_IRQ_Callback[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1<<6)){ EXTI->PR |= (1<<6); GP_IRQ_Callback[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1<<7)){ EXTI->PR |= (1<<7); GP_IRQ_Callback[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1<<8)){ EXTI->PR |= (1<<8); GP_IRQ_Callback[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1<<9)){ EXTI->PR |= (1<<9); GP_IRQ_Callback[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	@ (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	@ (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)){ EXTI->PR |= (1<<10); GP_IRQ_Callback[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1<<11)){ EXTI->PR |= (1<<11); GP_IRQ_Callback[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)){ EXTI->PR |= (1<<12); GP_IRQ_Callback[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<13)){ EXTI->PR |= (1<<13); GP_IRQ_Callback[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<14)){ EXTI->PR |= (1<<14); GP_IRQ_Callback[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & (1<<15)){ EXTI->PR |= (1<<15); GP_IRQ_Callback[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	@ (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <OS_SVC_Services>:
		else{/*Do Nothing*/};
	}
}

void OS_SVC_Services(int *StackFramePointer)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	//OS_SVC_Services -> R0 -> argument 0 = StackFramePointer
	//OS_SVC_Services : R0,R1,R2,R3,R12,LR,PC,XPSR
	unsigned char SVCNumber;
	unsigned char val1,val2;

	SVCNumber = *((unsigned char *)(((unsigned char *)StackFramePointer[6])-2));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3318      	adds	r3, #24
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	3b02      	subs	r3, #2
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	73fb      	strb	r3, [r7, #15]
	val1 = StackFramePointer[0];
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	73bb      	strb	r3, [r7, #14]
	val2 = StackFramePointer[1];
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	3304      	adds	r3, #4
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	737b      	strb	r3, [r7, #13]
	switch(SVCNumber)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d012      	beq.n	80003de <OS_SVC_Services+0x4e>
 80003b8:	2b03      	cmp	r3, #3
 80003ba:	dc17      	bgt.n	80003ec <OS_SVC_Services+0x5c>
 80003bc:	2b01      	cmp	r3, #1
 80003be:	d002      	beq.n	80003c6 <OS_SVC_Services+0x36>
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	d006      	beq.n	80003d2 <OS_SVC_Services+0x42>
		break;
	case 3:	//MUL
		StackFramePointer[0] = val1*val2;
		break;
	}
}
 80003c4:	e012      	b.n	80003ec <OS_SVC_Services+0x5c>
		StackFramePointer[0] = val1+val2;
 80003c6:	7bba      	ldrb	r2, [r7, #14]
 80003c8:	7b7b      	ldrb	r3, [r7, #13]
 80003ca:	441a      	add	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	601a      	str	r2, [r3, #0]
		break;
 80003d0:	e00c      	b.n	80003ec <OS_SVC_Services+0x5c>
		StackFramePointer[0] = val1-val2;
 80003d2:	7bba      	ldrb	r2, [r7, #14]
 80003d4:	7b7b      	ldrb	r3, [r7, #13]
 80003d6:	1ad2      	subs	r2, r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	601a      	str	r2, [r3, #0]
		break;
 80003dc:	e006      	b.n	80003ec <OS_SVC_Services+0x5c>
		StackFramePointer[0] = val1*val2;
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	7b7a      	ldrb	r2, [r7, #13]
 80003e2:	fb03 f202 	mul.w	r2, r3, r2
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	601a      	str	r2, [r3, #0]
		break;
 80003ea:	bf00      	nop
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <SVC_Handler>:

__attribute ((naked)) void SVC_Handler()
{
	__asm("TST LR,#4 \n\t"
 80003f6:	f01e 0f04 	tst.w	lr, #4
 80003fa:	bf0c      	ite	eq
 80003fc:	f3ef 8008 	mrseq	r0, MSP
 8000400:	f3ef 8009 	mrsne	r0, PSP
 8000404:	f7ff bfc4 	b.w	8000390 <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0,MSP \n\t"
			"MRSNE R0,PSP \n\t"
			"B OS_SVC_Services");
}
 8000408:	bf00      	nop

0800040a <OS_SVC_Set>:

int OS_SVC_Set(int a,int b,int SVC_ID)
{
 800040a:	b480      	push	{r7}
 800040c:	b087      	sub	sp, #28
 800040e:	af00      	add	r7, sp, #0
 8000410:	60f8      	str	r0, [r7, #12]
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
	int res;

	switch(SVC_ID)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d00d      	beq.n	8000438 <OS_SVC_Set+0x2e>
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b03      	cmp	r3, #3
 8000420:	dc0c      	bgt.n	800043c <OS_SVC_Set+0x32>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d003      	beq.n	8000430 <OS_SVC_Set+0x26>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d002      	beq.n	8000434 <OS_SVC_Set+0x2a>
 800042e:	e005      	b.n	800043c <OS_SVC_Set+0x32>
	{
	case 1:	//ADD
		__asm("SVC #0x01");
 8000430:	df01      	svc	1
		break;
 8000432:	e003      	b.n	800043c <OS_SVC_Set+0x32>
	case 2:	//SUB
		__asm("SVC #0x02");
 8000434:	df02      	svc	2
		break;
 8000436:	e001      	b.n	800043c <OS_SVC_Set+0x32>
	case 3:	//MUL
		__asm("SVC #0x03");
 8000438:	df03      	svc	3
		break;
 800043a:	bf00      	nop
	}
	__asm ("MOV %[res],r0":[res]"=r"(res));
 800043c:	4603      	mov	r3, r0
 800043e:	617b      	str	r3, [r7, #20]
	return res;
 8000440:	697b      	ldr	r3, [r7, #20]
}
 8000442:	4618      	mov	r0, r3
 8000444:	371c      	adds	r7, #28
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <main>:

int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
//	ExtiP9B.u8IRQStatus = MEXTI_UNMASKED;
//	ExtiP9B.uddtPinData = EXTI9PB9;
//	MEXTI_uddtInit(&ExtiP9B);
//
//	MainOs();
	IRQFlag = OS_SVC_Set(5,5,1);
 8000450:	2201      	movs	r2, #1
 8000452:	2105      	movs	r1, #5
 8000454:	2005      	movs	r0, #5
 8000456:	f7ff ffd8 	bl	800040a <OS_SVC_Set>
 800045a:	4603      	mov	r3, r0
 800045c:	b2da      	uxtb	r2, r3
 800045e:	4b0b      	ldr	r3, [pc, #44]	@ (800048c <main+0x40>)
 8000460:	701a      	strb	r2, [r3, #0]
	IRQFlag = OS_SVC_Set(5,5,2);
 8000462:	2202      	movs	r2, #2
 8000464:	2105      	movs	r1, #5
 8000466:	2005      	movs	r0, #5
 8000468:	f7ff ffcf 	bl	800040a <OS_SVC_Set>
 800046c:	4603      	mov	r3, r0
 800046e:	b2da      	uxtb	r2, r3
 8000470:	4b06      	ldr	r3, [pc, #24]	@ (800048c <main+0x40>)
 8000472:	701a      	strb	r2, [r3, #0]
	IRQFlag = OS_SVC_Set(5,5,3);
 8000474:	2203      	movs	r2, #3
 8000476:	2105      	movs	r1, #5
 8000478:	2005      	movs	r0, #5
 800047a:	f7ff ffc6 	bl	800040a <OS_SVC_Set>
 800047e:	4603      	mov	r3, r0
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b02      	ldr	r3, [pc, #8]	@ (800048c <main+0x40>)
 8000484:	701a      	strb	r2, [r3, #0]

	while(1)
 8000486:	bf00      	nop
 8000488:	e7fd      	b.n	8000486 <main+0x3a>
 800048a:	bf00      	nop
 800048c:	20000058 	.word	0x20000058

08000490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000490:	480d      	ldr	r0, [pc, #52]	@ (80004c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	@ (80004cc <LoopForever+0x6>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	@ (80004d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	@ (80004d4 <LoopForever+0xe>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	@ (80004dc <LoopForever+0x16>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004be:	f000 f811 	bl	80004e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c2:	f7ff ffc3 	bl	800044c <main>

080004c6 <LoopForever>:

LoopForever:
  b LoopForever
 80004c6:	e7fe      	b.n	80004c6 <LoopForever>
  ldr   r0, =_estack
 80004c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004d4:	0800054c 	.word	0x0800054c
  ldr r2, =_sbss
 80004d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004dc:	2000005c 	.word	0x2000005c

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <__libc_init_array>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2600      	movs	r6, #0
 80004e8:	4d0c      	ldr	r5, [pc, #48]	@ (800051c <__libc_init_array+0x38>)
 80004ea:	4c0d      	ldr	r4, [pc, #52]	@ (8000520 <__libc_init_array+0x3c>)
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	10a4      	asrs	r4, r4, #2
 80004f0:	42a6      	cmp	r6, r4
 80004f2:	d109      	bne.n	8000508 <__libc_init_array+0x24>
 80004f4:	f000 f81a 	bl	800052c <_init>
 80004f8:	2600      	movs	r6, #0
 80004fa:	4d0a      	ldr	r5, [pc, #40]	@ (8000524 <__libc_init_array+0x40>)
 80004fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000528 <__libc_init_array+0x44>)
 80004fe:	1b64      	subs	r4, r4, r5
 8000500:	10a4      	asrs	r4, r4, #2
 8000502:	42a6      	cmp	r6, r4
 8000504:	d105      	bne.n	8000512 <__libc_init_array+0x2e>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	f855 3b04 	ldr.w	r3, [r5], #4
 800050c:	4798      	blx	r3
 800050e:	3601      	adds	r6, #1
 8000510:	e7ee      	b.n	80004f0 <__libc_init_array+0xc>
 8000512:	f855 3b04 	ldr.w	r3, [r5], #4
 8000516:	4798      	blx	r3
 8000518:	3601      	adds	r6, #1
 800051a:	e7f2      	b.n	8000502 <__libc_init_array+0x1e>
 800051c:	08000544 	.word	0x08000544
 8000520:	08000544 	.word	0x08000544
 8000524:	08000544 	.word	0x08000544
 8000528:	08000548 	.word	0x08000548

0800052c <_init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr

08000538 <_fini>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr
