
Atmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00007390  00007424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  0080013a  0080013a  000074fe  2**0
                  ALLOC
  3 .stab         00009e70  00000000  00000000  00007500  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007c1b  00000000  00000000  00011370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00018f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000190cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0001923b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001ae84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0001bd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001cb1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001cf09  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001d6d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <__vector_1>
       8:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__vector_2>
       c:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__vector_3>
      10:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__vector_4>
      14:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__vector_5>
      18:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__vector_6>
      1c:	0c 94 0f 0c 	jmp	0x181e	; 0x181e <__vector_7>
      20:	0c 94 42 0c 	jmp	0x1884	; 0x1884 <__vector_8>
      24:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_9>
      28:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_10>
      2c:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f3 e7       	ldi	r31, 0x73	; 115
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 39 	call	0x727e	; 0x727e <main>
      8a:	0c 94 c6 39 	jmp	0x738c	; 0x738c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 56 39 	jmp	0x72ac	; 0x72ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 56 39 	jmp	0x72ac	; 0x72ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4a 39 	jmp	0x7294	; 0x7294 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 66 39 	jmp	0x72cc	; 0x72cc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 56 39 	jmp	0x72ac	; 0x72ac <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 56 39 	jmp	0x72ac	; 0x72ac <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 56 39 	jmp	0x72ac	; 0x72ac <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 72 39 	jmp	0x72e4	; 0x72e4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5a 39 	jmp	0x72b4	; 0x72b4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 76 39 	jmp	0x72ec	; 0x72ec <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MUART_init>:

#include "uart_interface.h"


EN_MUART_systeamState_t  MUART_init(ST_MUART_cfg_t const *ST_ptrUartCfgInstance_t)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <MUART_init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
	EN_MUART_systeamState_t uartRet = MUART_NOK;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrUartCfgInstance_t)
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	9b 81       	ldd	r25, Y+3	; 0x03
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	09 f4       	brne	.+2      	; 0xb64 <MUART_init+0x1e>
     b62:	91 c0       	rjmp	.+290    	; 0xc86 <MUART_init+0x140>
	{
		UCSRC_REG = (  (UCSRC_REG & 0x3F ) | (ST_ptrUartCfgInstance_t->operationMode << URSEL_BIT));
     b64:	a0 e4       	ldi	r26, 0x40	; 64
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e0 e4       	ldi	r30, 0x40	; 64
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	28 2f       	mov	r18, r24
     b70:	2f 73       	andi	r18, 0x3F	; 63
     b72:	ea 81       	ldd	r30, Y+2	; 0x02
     b74:	fb 81       	ldd	r31, Y+3	; 0x03
     b76:	80 81       	ld	r24, Z
     b78:	88 2f       	mov	r24, r24
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	96 95       	lsr	r25
     b7e:	98 2f       	mov	r25, r24
     b80:	88 27       	eor	r24, r24
     b82:	97 95       	ror	r25
     b84:	87 95       	ror	r24
     b86:	82 2b       	or	r24, r18
     b88:	8c 93       	st	X, r24
		UCSRC_REG = (  (UCSRC_REG & 0xCF ) | (ST_ptrUartCfgInstance_t->parityBit << UPM0_BIT));
     b8a:	a0 e4       	ldi	r26, 0x40	; 64
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e0 e4       	ldi	r30, 0x40	; 64
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	28 2f       	mov	r18, r24
     b96:	2f 7c       	andi	r18, 0xCF	; 207
     b98:	ea 81       	ldd	r30, Y+2	; 0x02
     b9a:	fb 81       	ldd	r31, Y+3	; 0x03
     b9c:	81 81       	ldd	r24, Z+1	; 0x01
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	82 95       	swap	r24
     ba4:	92 95       	swap	r25
     ba6:	90 7f       	andi	r25, 0xF0	; 240
     ba8:	98 27       	eor	r25, r24
     baa:	80 7f       	andi	r24, 0xF0	; 240
     bac:	98 27       	eor	r25, r24
     bae:	82 2b       	or	r24, r18
     bb0:	8c 93       	st	X, r24
		UCSRC_REG = (  (UCSRC_REG & 0xF7 ) | (ST_ptrUartCfgInstance_t->stopBit << USBS_BIT));
     bb2:	a0 e4       	ldi	r26, 0x40	; 64
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e0 e4       	ldi	r30, 0x40	; 64
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	28 2f       	mov	r18, r24
     bbe:	27 7f       	andi	r18, 0xF7	; 247
     bc0:	ea 81       	ldd	r30, Y+2	; 0x02
     bc2:	fb 81       	ldd	r31, Y+3	; 0x03
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	82 2b       	or	r24, r18
     bd8:	8c 93       	st	X, r24
		UCSRC_REG = (  (UCSRC_REG & 0xF8 ) | (ST_ptrUartCfgInstance_t->charSize << UCSZ0_BIT));
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	28 2f       	mov	r18, r24
     be6:	28 7f       	andi	r18, 0xF8	; 248
     be8:	ea 81       	ldd	r30, Y+2	; 0x02
     bea:	fb 81       	ldd	r31, Y+3	; 0x03
     bec:	83 81       	ldd	r24, Z+3	; 0x03
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	82 2b       	or	r24, r18
     bf8:	8c 93       	st	X, r24
		//UCSRA_REG = (  (UCSRA_REG & 0xFD ) | (ST_ptrUartCfgInstance_t->transmissionSpeed << U2X_BIT));

		if(ST_ptrUartCfgInstance_t->transmissionSpeed == MUART_SPEED_U1X)
     bfa:	ea 81       	ldd	r30, Y+2	; 0x02
     bfc:	fb 81       	ldd	r31, Y+3	; 0x03
     bfe:	84 81       	ldd	r24, Z+4	; 0x04
     c00:	88 23       	and	r24, r24
     c02:	09 f5       	brne	.+66     	; 0xc46 <MUART_init+0x100>
		{
			  CLR_BIT(UCSRA_REG,U2X_BIT);
     c04:	ab e2       	ldi	r26, 0x2B	; 43
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	eb e2       	ldi	r30, 0x2B	; 43
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8d 7f       	andi	r24, 0xFD	; 253
     c10:	8c 93       	st	X, r24
			  CLR_BIT(UCSRC_REG,URSEL_BIT);
     c12:	a0 e4       	ldi	r26, 0x40	; 64
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e0 e4       	ldi	r30, 0x40	; 64
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 77       	andi	r24, 0x7F	; 127
     c1e:	8c 93       	st	X, r24
			  UBRRL_REG = ST_ptrUartCfgInstance_t->baudRate1x;
     c20:	a9 e2       	ldi	r26, 0x29	; 41
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ea 81       	ldd	r30, Y+2	; 0x02
     c26:	fb 81       	ldd	r31, Y+3	; 0x03
     c28:	85 81       	ldd	r24, Z+5	; 0x05
     c2a:	8c 93       	st	X, r24
			  UBRRH_REG = ((ST_ptrUartCfgInstance_t->baudRate1x)>>8);
     c2c:	a0 e4       	ldi	r26, 0x40	; 64
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	ea 81       	ldd	r30, Y+2	; 0x02
     c32:	fb 81       	ldd	r31, Y+3	; 0x03
     c34:	85 81       	ldd	r24, Z+5	; 0x05
     c36:	88 2f       	mov	r24, r24
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	89 2f       	mov	r24, r25
     c3c:	99 0f       	add	r25, r25
     c3e:	99 0b       	sbc	r25, r25
     c40:	8c 93       	st	X, r24
			  uartRet = MUART_OK;
     c42:	19 82       	std	Y+1, r1	; 0x01
     c44:	22 c0       	rjmp	.+68     	; 0xc8a <MUART_init+0x144>
		}
		else
		{
			  SET_BIT(UCSRA_REG,U2X_BIT);
     c46:	ab e2       	ldi	r26, 0x2B	; 43
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	eb e2       	ldi	r30, 0x2B	; 43
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	82 60       	ori	r24, 0x02	; 2
     c52:	8c 93       	st	X, r24
			  CLR_BIT(UCSRC_REG,URSEL_BIT);
     c54:	a0 e4       	ldi	r26, 0x40	; 64
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e0 e4       	ldi	r30, 0x40	; 64
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	8f 77       	andi	r24, 0x7F	; 127
     c60:	8c 93       	st	X, r24
			  UBRRL_REG = ST_ptrUartCfgInstance_t->baudRate2x;
     c62:	a9 e2       	ldi	r26, 0x29	; 41
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	ea 81       	ldd	r30, Y+2	; 0x02
     c68:	fb 81       	ldd	r31, Y+3	; 0x03
     c6a:	86 81       	ldd	r24, Z+6	; 0x06
     c6c:	97 81       	ldd	r25, Z+7	; 0x07
     c6e:	8c 93       	st	X, r24
			  UBRRH_REG = ((ST_ptrUartCfgInstance_t->baudRate2x)>>8);
     c70:	a0 e4       	ldi	r26, 0x40	; 64
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ea 81       	ldd	r30, Y+2	; 0x02
     c76:	fb 81       	ldd	r31, Y+3	; 0x03
     c78:	86 81       	ldd	r24, Z+6	; 0x06
     c7a:	97 81       	ldd	r25, Z+7	; 0x07
     c7c:	89 2f       	mov	r24, r25
     c7e:	99 27       	eor	r25, r25
     c80:	8c 93       	st	X, r24
			  uartRet = MUART_OK;
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <MUART_init+0x144>
		}

	}
	else
	{
		uartRet = MUART_PTR_NULL;
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	89 83       	std	Y+1, r24	; 0x01
	}

	return uartRet;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <MUART_enable>:

EN_MUART_systeamState_t MUART_enable(void)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	0f 92       	push	r0
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	EN_MUART_systeamState_t uartRet = MUART_NOK;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG,RXEN_BIT);
     ca6:	aa e2       	ldi	r26, 0x2A	; 42
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ea e2       	ldi	r30, 0x2A	; 42
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 61       	ori	r24, 0x10	; 16
     cb2:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,TXEN_BIT);
     cb4:	aa e2       	ldi	r26, 0x2A	; 42
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ea e2       	ldi	r30, 0x2A	; 42
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	88 60       	ori	r24, 0x08	; 8
     cc0:	8c 93       	st	X, r24
	uartRet = MUART_OK;
     cc2:	19 82       	std	Y+1, r1	; 0x01
	return uartRet;
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <MUART_receiveData>:



EN_MUART_systeamState_t MUART_receiveData(uint8_t *retOfRecivedData){
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <MUART_receiveData+0x6>
     cd4:	0f 92       	push	r0
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	9b 83       	std	Y+3, r25	; 0x03
     cdc:	8a 83       	std	Y+2, r24	; 0x02

	EN_MUART_systeamState_t uartRet = MUART_NOK;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG,RXC_BIT) != 1 );
     ce2:	eb e2       	ldi	r30, 0x2B	; 43
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	88 1f       	adc	r24, r24
     cea:	88 27       	eor	r24, r24
     cec:	88 1f       	adc	r24, r24
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	c1 f7       	brne	.-16     	; 0xce2 <MUART_receiveData+0x14>
	*retOfRecivedData = UDR_REG;
     cf2:	ec e2       	ldi	r30, 0x2C	; 44
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	ea 81       	ldd	r30, Y+2	; 0x02
     cfa:	fb 81       	ldd	r31, Y+3	; 0x03
     cfc:	80 83       	st	Z, r24
	CLR_BIT(UCSRA_REG,RXC_BIT);
     cfe:	ab e2       	ldi	r26, 0x2B	; 43
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	eb e2       	ldi	r30, 0x2B	; 43
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8f 77       	andi	r24, 0x7F	; 127
     d0a:	8c 93       	st	X, r24
	uartRet = MUART_OK;
     d0c:	19 82       	std	Y+1, r1	; 0x01
	return uartRet;
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <MUART_sendData>:

EN_MUART_systeamState_t MUART_sendData(uint8_t u8DataToSend){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <MUART_sendData+0x6>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	8a 83       	std	Y+2, r24	; 0x02

	EN_MUART_systeamState_t uartRet = MUART_NOK;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG,UDRE_BIT) != 1 );
     d2c:	eb e2       	ldi	r30, 0x2B	; 43
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	82 95       	swap	r24
     d34:	86 95       	lsr	r24
     d36:	87 70       	andi	r24, 0x07	; 7
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	81 70       	andi	r24, 0x01	; 1
     d3e:	90 70       	andi	r25, 0x00	; 0
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	a1 f3       	breq	.-24     	; 0xd2c <MUART_sendData+0x10>
	UDR_REG = u8DataToSend;
     d44:	ec e2       	ldi	r30, 0x2C	; 44
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	80 83       	st	Z, r24
	uartRet = MUART_OK;
     d4c:	19 82       	std	Y+1, r1	; 0x01
	return uartRet;
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
}
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	cf 91       	pop	r28
     d56:	df 91       	pop	r29
     d58:	08 95       	ret

00000d5a <MTWI_init>:

#define F_CPU	8000000UL
#define SCL_CLOCK	100000L

EN_MTWI_systemState_t MTWI_init(ST_MTWI_cfg_t const * ST_ptrMtwiCfgInstance)
{
     d5a:	df 93       	push	r29
     d5c:	cf 93       	push	r28
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <MTWI_init+0x6>
     d60:	0f 92       	push	r0
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	9b 83       	std	Y+3, r25	; 0x03
     d68:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrMtwiCfgInstance)
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	c1 f0       	breq	.+48     	; 0xda6 <MTWI_init+0x4c>
	{
		TWSR_REG = ((TWSR_REG & 0xFC ) | ST_ptrMtwiCfgInstance->prescalerSelection << TWPS0_BIT);
     d76:	a1 e2       	ldi	r26, 0x21	; 33
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e1 e2       	ldi	r30, 0x21	; 33
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	98 2f       	mov	r25, r24
     d82:	9c 7f       	andi	r25, 0xFC	; 252
     d84:	ea 81       	ldd	r30, Y+2	; 0x02
     d86:	fb 81       	ldd	r31, Y+3	; 0x03
     d88:	80 81       	ld	r24, Z
     d8a:	89 2b       	or	r24, r25
     d8c:	8c 93       	st	X, r24
		TWAR_REG = ST_ptrMtwiCfgInstance->deviceAddress;
     d8e:	a2 e2       	ldi	r26, 0x22	; 34
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea 81       	ldd	r30, Y+2	; 0x02
     d94:	fb 81       	ldd	r31, Y+3	; 0x03
     d96:	81 81       	ldd	r24, Z+1	; 0x01
     d98:	8c 93       	st	X, r24
		TWBR_REG = ((F_CPU/SCL_CLOCK)-16)/2;
     d9a:	e0 e2       	ldi	r30, 0x20	; 32
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 e2       	ldi	r24, 0x20	; 32
     da0:	80 83       	st	Z, r24

		twiRet = MTWI_OK;
     da2:	19 82       	std	Y+1, r1	; 0x01
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <MTWI_init+0x50>
	}
	else
	{
		twiRet = MTWI_PTR_NULL;
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	89 83       	std	Y+1, r24	; 0x01
	}
	return twiRet;
     daa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <MTWI_enable>:


EN_MTWI_systemState_t MTWI_enable(void)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	0f 92       	push	r0
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	89 83       	std	Y+1, r24	; 0x01

	TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_ENABLE << TWEN_BIT);
     dc6:	a6 e5       	ldi	r26, 0x56	; 86
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e6 e5       	ldi	r30, 0x56	; 86
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	84 60       	ori	r24, 0x04	; 4
     dd2:	8c 93       	st	X, r24

	twiRet = MTWI_OK;
     dd4:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd8:	0f 90       	pop	r0
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <MTWI_disable>:
EN_MTWI_systemState_t MTWI_disable(void)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	0f 92       	push	r0
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 83       	std	Y+1, r24	; 0x01

	TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_DISABLE << TWEN_BIT);
     dee:	a6 e5       	ldi	r26, 0x56	; 86
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e6 e5       	ldi	r30, 0x56	; 86
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8b 7f       	andi	r24, 0xFB	; 251
     dfa:	8c 93       	st	X, r24

	twiRet = MTWI_OK;
     dfc:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <MTWI_start>:

EN_MTWI_systemState_t MTWI_start(void)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	0f 92       	push	r0
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TWCR_REG,TWINT_BIT);
     e16:	a6 e5       	ldi	r26, 0x56	; 86
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e6 e5       	ldi	r30, 0x56	; 86
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	80 68       	ori	r24, 0x80	; 128
     e22:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWSTA_BIT);
     e24:	a6 e5       	ldi	r26, 0x56	; 86
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e6 e5       	ldi	r30, 0x56	; 86
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 62       	ori	r24, 0x20	; 32
     e30:	8c 93       	st	X, r24
	TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_ENABLE << TWEN_BIT);
     e32:	a6 e5       	ldi	r26, 0x56	; 86
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	84 60       	ori	r24, 0x04	; 4
     e3e:	8c 93       	st	X, r24
	while(!GET_BIT(TWCR_REG,TWINT_BIT));
     e40:	e6 e5       	ldi	r30, 0x56	; 86
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 23       	and	r24, r24
     e48:	dc f7       	brge	.-10     	; 0xe40 <MTWI_start+0x38>

	twiRet = MTWI_OK;
     e4a:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <MTWI_stop>:
EN_MTWI_systemState_t MTWI_stop(void)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TWCR_REG,TWINT_BIT);
     e64:	a6 e5       	ldi	r26, 0x56	; 86
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e6 e5       	ldi	r30, 0x56	; 86
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	80 68       	ori	r24, 0x80	; 128
     e70:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWSTO_BIT);
     e72:	a6 e5       	ldi	r26, 0x56	; 86
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e5       	ldi	r30, 0x56	; 86
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 61       	ori	r24, 0x10	; 16
     e7e:	8c 93       	st	X, r24
	TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_ENABLE << TWEN_BIT);
     e80:	a6 e5       	ldi	r26, 0x56	; 86
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e6 e5       	ldi	r30, 0x56	; 86
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	84 60       	ori	r24, 0x04	; 4
     e8c:	8c 93       	st	X, r24
	while(!GET_BIT(TWCR_REG,TWINT_BIT));
     e8e:	e6 e5       	ldi	r30, 0x56	; 86
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 23       	and	r24, r24
     e96:	dc f7       	brge	.-10     	; 0xe8e <MTWI_stop+0x38>

	twiRet = MTWI_OK;
     e98:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01

}
     e9c:	0f 90       	pop	r0
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <MTWI_writedata>:
EN_MTWI_systemState_t MTWI_writedata(uint8_t dataToWrite)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <MTWI_writedata+0x6>
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01

	TWDR_REG = dataToWrite;
     eb4:	e3 e2       	ldi	r30, 0x23	; 35
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);
     ebc:	a6 e5       	ldi	r26, 0x56	; 86
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e5       	ldi	r30, 0x56	; 86
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 68       	ori	r24, 0x80	; 128
     ec8:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWEA_BIT);
     eca:	a6 e5       	ldi	r26, 0x56	; 86
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e6 e5       	ldi	r30, 0x56	; 86
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	80 64       	ori	r24, 0x40	; 64
     ed6:	8c 93       	st	X, r24
	TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_ENABLE << TWEN_BIT);
     ed8:	a6 e5       	ldi	r26, 0x56	; 86
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e6 e5       	ldi	r30, 0x56	; 86
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	84 60       	ori	r24, 0x04	; 4
     ee4:	8c 93       	st	X, r24
	while(!GET_BIT(TWCR_REG,TWINT_BIT));
     ee6:	e6 e5       	ldi	r30, 0x56	; 86
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 23       	and	r24, r24
     eee:	dc f7       	brge	.-10     	; 0xee6 <MTWI_writedata+0x42>

	twiRet = MTWI_OK;
     ef0:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <MTWI_readDataWithAck>:
EN_MTWI_systemState_t MTWI_readDataWithAck(uint8_t *retOfData)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <MTWI_readDataWithAck+0x6>
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9b 83       	std	Y+3, r25	; 0x03
     f0c:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(TWCR_REG,TWINT_BIT));
     f12:	e6 e5       	ldi	r30, 0x56	; 86
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	88 23       	and	r24, r24
     f1a:	dc f7       	brge	.-10     	; 0xf12 <MTWI_readDataWithAck+0x14>
	//SET_BIT(TWCR_REG,TWINT_BIT);
	SET_BIT(TWCR_REG,TWEA_BIT);
     f1c:	a6 e5       	ldi	r26, 0x56	; 86
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e6 e5       	ldi	r30, 0x56	; 86
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	80 64       	ori	r24, 0x40	; 64
     f28:	8c 93       	st	X, r24
	TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_ENABLE << TWEN_BIT);
     f2a:	a6 e5       	ldi	r26, 0x56	; 86
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e6 e5       	ldi	r30, 0x56	; 86
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	84 60       	ori	r24, 0x04	; 4
     f36:	8c 93       	st	X, r24
	while(!GET_BIT(TWCR_REG,TWINT_BIT));
     f38:	e6 e5       	ldi	r30, 0x56	; 86
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	dc f7       	brge	.-10     	; 0xf38 <MTWI_readDataWithAck+0x3a>

	//TWDR_REG &= 0xF8;

	*retOfData = TWDR_REG;
     f42:	e3 e2       	ldi	r30, 0x23	; 35
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	ea 81       	ldd	r30, Y+2	; 0x02
     f4a:	fb 81       	ldd	r31, Y+3	; 0x03
     f4c:	80 83       	st	Z, r24

	twiRet = MTWI_OK;
     f4e:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     f50:	89 81       	ldd	r24, Y+1	; 0x01
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <MTWI_readDataWithNotAck>:
EN_MTWI_systemState_t MTWI_readDataWithNotAck(uint8_t *retOfData)
{
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <MTWI_readDataWithNotAck+0x6>
     f64:	0f 92       	push	r0
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	9b 83       	std	Y+3, r25	; 0x03
     f6c:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(TWCR_REG,TWINT_BIT));
     f72:	e6 e5       	ldi	r30, 0x56	; 86
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	88 23       	and	r24, r24
     f7a:	dc f7       	brge	.-10     	; 0xf72 <MTWI_readDataWithNotAck+0x14>
	CLR_BIT(TWCR_REG,TWEA_BIT);
     f7c:	a6 e5       	ldi	r26, 0x56	; 86
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e6 e5       	ldi	r30, 0x56	; 86
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 7b       	andi	r24, 0xBF	; 191
     f88:	8c 93       	st	X, r24

	TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_ENABLE << TWEN_BIT);
     f8a:	a6 e5       	ldi	r26, 0x56	; 86
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e6 e5       	ldi	r30, 0x56	; 86
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	84 60       	ori	r24, 0x04	; 4
     f96:	8c 93       	st	X, r24
	//SET_BIT(TWCR_REG,TWINT_BIT);

	while(!GET_BIT(TWCR_REG,TWINT_BIT));
     f98:	e6 e5       	ldi	r30, 0x56	; 86
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	dc f7       	brge	.-10     	; 0xf98 <MTWI_readDataWithNotAck+0x3a>

	//TWDR_REG &= 0xF8;
	*retOfData = TWDR_REG;
     fa2:	e3 e2       	ldi	r30, 0x23	; 35
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	ea 81       	ldd	r30, Y+2	; 0x02
     faa:	fb 81       	ldd	r31, Y+3	; 0x03
     fac:	80 83       	st	Z, r24

	twiRet = MTWI_OK;
     fae:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <MTWI_getStatus>:
EN_MTWI_systemState_t MTWI_getStatus(uint8_t *retOfStates)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <MTWI_getStatus+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	9b 83       	std	Y+3, r25	; 0x03
     fcc:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTWI_systemState_t twiRet = MTWI_NOK;
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	89 83       	std	Y+1, r24	; 0x01

	//TWCR_REG = ((TWCR_REG & 0xFB ) | MTWI_ENABLE << TWEN_BIT);
	*retOfStates = TWSR_REG;
     fd2:	e1 e2       	ldi	r30, 0x21	; 33
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	ea 81       	ldd	r30, Y+2	; 0x02
     fda:	fb 81       	ldd	r31, Y+3	; 0x03
     fdc:	80 83       	st	Z, r24

	twiRet = MTWI_OK;
     fde:	19 82       	std	Y+1, r1	; 0x01
	return twiRet;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	cf 91       	pop	r28
     fea:	df 91       	pop	r29
     fec:	08 95       	ret

00000fee <MTMR_setAddressOfCallback>:
static void(*ptr_IsrCallingForOcTmr2) (void) = PTR_NULL;



static EN_MTMR_systemState_t MTMR_setAddressOfCallback(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <MTMR_setAddressOfCallback+0x6>
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <MTMR_setAddressOfCallback+0x8>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	9b 81       	ldd	r25, Y+3	; 0x03
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	09 f4       	brne	.+2      	; 0x100e <MTMR_setAddressOfCallback+0x20>
    100c:	61 c0       	rjmp	.+194    	; 0x10d0 <MTMR_setAddressOfCallback+0xe2>
	{
		switch(ST_ptrCfgInstance_t->timerChannel)
    100e:	ea 81       	ldd	r30, Y+2	; 0x02
    1010:	fb 81       	ldd	r31, Y+3	; 0x03
    1012:	80 81       	ld	r24, Z
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	3d 83       	std	Y+5, r19	; 0x05
    101a:	2c 83       	std	Y+4, r18	; 0x04
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	91 05       	cpc	r25, r1
    1024:	01 f1       	breq	.+64     	; 0x1066 <MTMR_setAddressOfCallback+0x78>
    1026:	2c 81       	ldd	r18, Y+4	; 0x04
    1028:	3d 81       	ldd	r19, Y+5	; 0x05
    102a:	22 30       	cpi	r18, 0x02	; 2
    102c:	31 05       	cpc	r19, r1
    102e:	b9 f1       	breq	.+110    	; 0x109e <MTMR_setAddressOfCallback+0xb0>
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	09 f0       	breq	.+2      	; 0x103a <MTMR_setAddressOfCallback+0x4c>
    1038:	48 c0       	rjmp	.+144    	; 0x10ca <MTMR_setAddressOfCallback+0xdc>
		{
		case MTMR_TIMER_0_Channel:
		{

			if(PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOvf)
    103a:	ea 81       	ldd	r30, Y+2	; 0x02
    103c:	fb 81       	ldd	r31, Y+3	; 0x03
    103e:	86 81       	ldd	r24, Z+6	; 0x06
    1040:	97 81       	ldd	r25, Z+7	; 0x07
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	51 f0       	breq	.+20     	; 0x105a <MTMR_setAddressOfCallback+0x6c>
			{ ptr_IsrCallingForOvfTmr0 = ST_ptrCfgInstance_t->MTMR_setCallbackForOvf; tmrRet = MTMR_OK;}
    1046:	ea 81       	ldd	r30, Y+2	; 0x02
    1048:	fb 81       	ldd	r31, Y+3	; 0x03
    104a:	86 81       	ldd	r24, Z+6	; 0x06
    104c:	97 81       	ldd	r25, Z+7	; 0x07
    104e:	90 93 3b 01 	sts	0x013B, r25
    1052:	80 93 3a 01 	sts	0x013A, r24
    1056:	19 82       	std	Y+1, r1	; 0x01
    1058:	02 c0       	rjmp	.+4      	; 0x105e <MTMR_setAddressOfCallback+0x70>
			else tmrRet = MTMR_PTR_NULL;
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA))
    105e:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcTmr0 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	37 c0       	rjmp	.+110    	; 0x10d4 <MTMR_setAddressOfCallback+0xe6>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{

			if(PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOvf)
    1066:	ea 81       	ldd	r30, Y+2	; 0x02
    1068:	fb 81       	ldd	r31, Y+3	; 0x03
    106a:	86 81       	ldd	r24, Z+6	; 0x06
    106c:	97 81       	ldd	r25, Z+7	; 0x07
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	51 f0       	breq	.+20     	; 0x1086 <MTMR_setAddressOfCallback+0x98>
			{ ptr_IsrCallingForOvfTmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForOvf; tmrRet = MTMR_OK;}
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	86 81       	ldd	r24, Z+6	; 0x06
    1078:	97 81       	ldd	r25, Z+7	; 0x07
    107a:	90 93 3f 01 	sts	0x013F, r25
    107e:	80 93 3e 01 	sts	0x013E, r24
    1082:	19 82       	std	Y+1, r1	; 0x01
    1084:	02 c0       	rjmp	.+4      	; 0x108a <MTMR_setAddressOfCallback+0x9c>
			else tmrRet = MTMR_PTR_NULL;
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA))
    108a:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcATmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    108c:	82 e0       	ldi	r24, 0x02	; 2
    108e:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelB))
    1090:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcBTmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelB; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForIcu))
    1096:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForIcuTmr1 = ST_ptrCfgInstance_t->MTMR_setCallbackForIcu; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	89 83       	std	Y+1, r24	; 0x01
    109c:	1b c0       	rjmp	.+54     	; 0x10d4 <MTMR_setAddressOfCallback+0xe6>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{

			if(PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOvf)
    109e:	ea 81       	ldd	r30, Y+2	; 0x02
    10a0:	fb 81       	ldd	r31, Y+3	; 0x03
    10a2:	86 81       	ldd	r24, Z+6	; 0x06
    10a4:	97 81       	ldd	r25, Z+7	; 0x07
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	51 f0       	breq	.+20     	; 0x10be <MTMR_setAddressOfCallback+0xd0>
			{ ptr_IsrCallingForOvfTmr2 = ST_ptrCfgInstance_t->MTMR_setCallbackForOvf; tmrRet = MTMR_OK;}
    10aa:	ea 81       	ldd	r30, Y+2	; 0x02
    10ac:	fb 81       	ldd	r31, Y+3	; 0x03
    10ae:	86 81       	ldd	r24, Z+6	; 0x06
    10b0:	97 81       	ldd	r25, Z+7	; 0x07
    10b2:	90 93 47 01 	sts	0x0147, r25
    10b6:	80 93 46 01 	sts	0x0146, r24
    10ba:	19 82       	std	Y+1, r1	; 0x01
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <MTMR_setAddressOfCallback+0xd4>
			else tmrRet = MTMR_PTR_NULL;
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	89 83       	std	Y+1, r24	; 0x01

			if((tmrRet = MTMR_OK) && (PTR_NULL != ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA))
    10c2:	19 82       	std	Y+1, r1	; 0x01
			{ ptr_IsrCallingForOcTmr2 = ST_ptrCfgInstance_t->MTMR_setCallbackForOcChannelA; tmrRet = MTMR_OK; }
			else tmrRet = MTMR_PTR_NULL;
    10c4:	82 e0       	ldi	r24, 0x02	; 2
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <MTMR_setAddressOfCallback+0xe6>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <MTMR_setAddressOfCallback+0xe6>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <MTMR_init>:



EN_MTMR_systemState_t   MTMR_init(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <MTMR_init+0x6>
    10ec:	00 d0       	rcall	.+0      	; 0x10ee <MTMR_init+0x8>
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9b 83       	std	Y+3, r25	; 0x03
    10f6:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	09 f4       	brne	.+2      	; 0x1106 <MTMR_init+0x20>
    1104:	2f c1       	rjmp	.+606    	; 0x1364 <MTMR_init+0x27e>
	{
		switch(ST_ptrCfgInstance_t->timerChannel)
    1106:	ea 81       	ldd	r30, Y+2	; 0x02
    1108:	fb 81       	ldd	r31, Y+3	; 0x03
    110a:	80 81       	ld	r24, Z
    110c:	28 2f       	mov	r18, r24
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	3d 83       	std	Y+5, r19	; 0x05
    1112:	2c 83       	std	Y+4, r18	; 0x04
    1114:	8c 81       	ldd	r24, Y+4	; 0x04
    1116:	9d 81       	ldd	r25, Y+5	; 0x05
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	91 05       	cpc	r25, r1
    111c:	09 f4       	brne	.+2      	; 0x1120 <MTMR_init+0x3a>
    111e:	5d c0       	rjmp	.+186    	; 0x11da <MTMR_init+0xf4>
    1120:	2c 81       	ldd	r18, Y+4	; 0x04
    1122:	3d 81       	ldd	r19, Y+5	; 0x05
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	09 f4       	brne	.+2      	; 0x112c <MTMR_init+0x46>
    112a:	bc c0       	rjmp	.+376    	; 0x12a4 <MTMR_init+0x1be>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	09 f0       	breq	.+2      	; 0x1136 <MTMR_init+0x50>
    1134:	14 c1       	rjmp	.+552    	; 0x135e <MTMR_init+0x278>
		{
		case MTMR_TIMER_0_Channel:
		{

			TCCR0_REG = ((TCCR0_REG & 0xBF)   | (ST_ptrCfgInstance_t->timerMode << WGM00_BIT ));
    1136:	a3 e5       	ldi	r26, 0x53	; 83
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e3 e5       	ldi	r30, 0x53	; 83
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	28 2f       	mov	r18, r24
    1142:	2f 7b       	andi	r18, 0xBF	; 191
    1144:	ea 81       	ldd	r30, Y+2	; 0x02
    1146:	fb 81       	ldd	r31, Y+3	; 0x03
    1148:	81 81       	ldd	r24, Z+1	; 0x01
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	00 24       	eor	r0, r0
    1150:	96 95       	lsr	r25
    1152:	87 95       	ror	r24
    1154:	07 94       	ror	r0
    1156:	96 95       	lsr	r25
    1158:	87 95       	ror	r24
    115a:	07 94       	ror	r0
    115c:	98 2f       	mov	r25, r24
    115e:	80 2d       	mov	r24, r0
    1160:	82 2b       	or	r24, r18
    1162:	8c 93       	st	X, r24
			TCCR0_REG = ((TCCR0_REG & 0xF7)   | ((ST_ptrCfgInstance_t->timerMode >> 1) << WGM01_BIT ));
    1164:	a3 e5       	ldi	r26, 0x53	; 83
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e3 e5       	ldi	r30, 0x53	; 83
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	28 2f       	mov	r18, r24
    1170:	27 7f       	andi	r18, 0xF7	; 247
    1172:	ea 81       	ldd	r30, Y+2	; 0x02
    1174:	fb 81       	ldd	r31, Y+3	; 0x03
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	86 95       	lsr	r24
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	82 2b       	or	r24, r18
    118c:	8c 93       	st	X, r24
			TCCR0_REG = ((TCCR0_REG & 0xCF)   | (ST_ptrCfgInstance_t->timerOcAAction << COM00_BIT ));
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	2f 7c       	andi	r18, 0xCF	; 207
    119c:	ea 81       	ldd	r30, Y+2	; 0x02
    119e:	fb 81       	ldd	r31, Y+3	; 0x03
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	82 95       	swap	r24
    11a8:	92 95       	swap	r25
    11aa:	90 7f       	andi	r25, 0xF0	; 240
    11ac:	98 27       	eor	r25, r24
    11ae:	80 7f       	andi	r24, 0xF0	; 240
    11b0:	98 27       	eor	r25, r24
    11b2:	82 2b       	or	r24, r18
    11b4:	8c 93       	st	X, r24
			TIMSK_REG = ((TIMSK_REG & 0xFC)   | (ST_ptrCfgInstance_t->timerInterruptStates << TOIE0_BIT ));
    11b6:	a9 e5       	ldi	r26, 0x59	; 89
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e9 e5       	ldi	r30, 0x59	; 89
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	98 2f       	mov	r25, r24
    11c2:	9c 7f       	andi	r25, 0xFC	; 252
    11c4:	ea 81       	ldd	r30, Y+2	; 0x02
    11c6:	fb 81       	ldd	r31, Y+3	; 0x03
    11c8:	85 81       	ldd	r24, Z+5	; 0x05
    11ca:	89 2b       	or	r24, r25
    11cc:	8c 93       	st	X, r24

			tmrRet = MTMR_setAddressOfCallback(ST_ptrCfgInstance_t);
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	0e 94 f7 07 	call	0xfee	; 0xfee <MTMR_setAddressOfCallback>
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	c7 c0       	rjmp	.+398    	; 0x1368 <MTMR_init+0x282>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{

			TCCR1A_REG = ((TCCR1A_REG & 0xFC)   | (ST_ptrCfgInstance_t->timerMode << WGM10_BIT ));
    11da:	af e4       	ldi	r26, 0x4F	; 79
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	ef e4       	ldi	r30, 0x4F	; 79
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	98 2f       	mov	r25, r24
    11e6:	9c 7f       	andi	r25, 0xFC	; 252
    11e8:	ea 81       	ldd	r30, Y+2	; 0x02
    11ea:	fb 81       	ldd	r31, Y+3	; 0x03
    11ec:	81 81       	ldd	r24, Z+1	; 0x01
    11ee:	89 2b       	or	r24, r25
    11f0:	8c 93       	st	X, r24
			TCCR1B_REG = ((TCCR1B_REG & 0xE7)   | ((ST_ptrCfgInstance_t->timerMode >> 2) << WGM12_BIT ));
    11f2:	ae e4       	ldi	r26, 0x4E	; 78
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ee e4       	ldi	r30, 0x4E	; 78
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	27 7e       	andi	r18, 0xE7	; 231
    1200:	ea 81       	ldd	r30, Y+2	; 0x02
    1202:	fb 81       	ldd	r31, Y+3	; 0x03
    1204:	81 81       	ldd	r24, Z+1	; 0x01
    1206:	86 95       	lsr	r24
    1208:	86 95       	lsr	r24
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	82 2b       	or	r24, r18
    121c:	8c 93       	st	X, r24

			TCCR1A_REG = ((TCCR1A_REG & 0x3F)   | (ST_ptrCfgInstance_t->timerOcAAction << COM1A0_BIT ));
    121e:	af e4       	ldi	r26, 0x4F	; 79
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ef e4       	ldi	r30, 0x4F	; 79
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	28 2f       	mov	r18, r24
    122a:	2f 73       	andi	r18, 0x3F	; 63
    122c:	ea 81       	ldd	r30, Y+2	; 0x02
    122e:	fb 81       	ldd	r31, Y+3	; 0x03
    1230:	82 81       	ldd	r24, Z+2	; 0x02
    1232:	88 2f       	mov	r24, r24
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	00 24       	eor	r0, r0
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	07 94       	ror	r0
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	07 94       	ror	r0
    1244:	98 2f       	mov	r25, r24
    1246:	80 2d       	mov	r24, r0
    1248:	82 2b       	or	r24, r18
    124a:	8c 93       	st	X, r24
			TCCR1A_REG = ((TCCR1A_REG & 0xCF)   | (ST_ptrCfgInstance_t->timerOcBAction << COM1B0_BIT ));
    124c:	af e4       	ldi	r26, 0x4F	; 79
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ef e4       	ldi	r30, 0x4F	; 79
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	28 2f       	mov	r18, r24
    1258:	2f 7c       	andi	r18, 0xCF	; 207
    125a:	ea 81       	ldd	r30, Y+2	; 0x02
    125c:	fb 81       	ldd	r31, Y+3	; 0x03
    125e:	83 81       	ldd	r24, Z+3	; 0x03
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	82 95       	swap	r24
    1266:	92 95       	swap	r25
    1268:	90 7f       	andi	r25, 0xF0	; 240
    126a:	98 27       	eor	r25, r24
    126c:	80 7f       	andi	r24, 0xF0	; 240
    126e:	98 27       	eor	r25, r24
    1270:	82 2b       	or	r24, r18
    1272:	8c 93       	st	X, r24

			TIMSK_REG  = ((TIMSK_REG & 0xC3)   	| (ST_ptrCfgInstance_t->timerInterruptStates << TOIE1_BIT ));
    1274:	a9 e5       	ldi	r26, 0x59	; 89
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e9 e5       	ldi	r30, 0x59	; 89
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	28 2f       	mov	r18, r24
    1280:	23 7c       	andi	r18, 0xC3	; 195
    1282:	ea 81       	ldd	r30, Y+2	; 0x02
    1284:	fb 81       	ldd	r31, Y+3	; 0x03
    1286:	85 81       	ldd	r24, Z+5	; 0x05
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	82 2b       	or	r24, r18
    1296:	8c 93       	st	X, r24


			tmrRet = MTMR_setAddressOfCallback(ST_ptrCfgInstance_t);
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	9b 81       	ldd	r25, Y+3	; 0x03
    129c:	0e 94 f7 07 	call	0xfee	; 0xfee <MTMR_setAddressOfCallback>
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	62 c0       	rjmp	.+196    	; 0x1368 <MTMR_init+0x282>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{

			TCCR2_REG = ((TCCR2_REG & 0xBF)   | (ST_ptrCfgInstance_t->timerMode << WGM20_BIT ));
    12a4:	a5 e4       	ldi	r26, 0x45	; 69
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e4       	ldi	r30, 0x45	; 69
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	2f 7b       	andi	r18, 0xBF	; 191
    12b2:	ea 81       	ldd	r30, Y+2	; 0x02
    12b4:	fb 81       	ldd	r31, Y+3	; 0x03
    12b6:	81 81       	ldd	r24, Z+1	; 0x01
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	00 24       	eor	r0, r0
    12be:	96 95       	lsr	r25
    12c0:	87 95       	ror	r24
    12c2:	07 94       	ror	r0
    12c4:	96 95       	lsr	r25
    12c6:	87 95       	ror	r24
    12c8:	07 94       	ror	r0
    12ca:	98 2f       	mov	r25, r24
    12cc:	80 2d       	mov	r24, r0
    12ce:	82 2b       	or	r24, r18
    12d0:	8c 93       	st	X, r24
			TCCR2_REG = ((TCCR2_REG & 0xF7)   | ((ST_ptrCfgInstance_t->timerMode >> 1) << WGM21_BIT ));
    12d2:	a5 e4       	ldi	r26, 0x45	; 69
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e4       	ldi	r30, 0x45	; 69
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	27 7f       	andi	r18, 0xF7	; 247
    12e0:	ea 81       	ldd	r30, Y+2	; 0x02
    12e2:	fb 81       	ldd	r31, Y+3	; 0x03
    12e4:	81 81       	ldd	r24, Z+1	; 0x01
    12e6:	86 95       	lsr	r24
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	82 2b       	or	r24, r18
    12fa:	8c 93       	st	X, r24
			TCCR2_REG = ((TCCR2_REG & 0xCF)   | (ST_ptrCfgInstance_t->timerOcAAction << COM20_BIT ));
    12fc:	a5 e4       	ldi	r26, 0x45	; 69
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e5 e4       	ldi	r30, 0x45	; 69
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	28 2f       	mov	r18, r24
    1308:	2f 7c       	andi	r18, 0xCF	; 207
    130a:	ea 81       	ldd	r30, Y+2	; 0x02
    130c:	fb 81       	ldd	r31, Y+3	; 0x03
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	88 2f       	mov	r24, r24
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	82 95       	swap	r24
    1316:	92 95       	swap	r25
    1318:	90 7f       	andi	r25, 0xF0	; 240
    131a:	98 27       	eor	r25, r24
    131c:	80 7f       	andi	r24, 0xF0	; 240
    131e:	98 27       	eor	r25, r24
    1320:	82 2b       	or	r24, r18
    1322:	8c 93       	st	X, r24
			TIMSK_REG = ((TIMSK_REG & 0xFC)   | (ST_ptrCfgInstance_t->timerInterruptStates << TOIE2_BIT ));
    1324:	a9 e5       	ldi	r26, 0x59	; 89
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e9 e5       	ldi	r30, 0x59	; 89
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	2c 7f       	andi	r18, 0xFC	; 252
    1332:	ea 81       	ldd	r30, Y+2	; 0x02
    1334:	fb 81       	ldd	r31, Y+3	; 0x03
    1336:	85 81       	ldd	r24, Z+5	; 0x05
    1338:	88 2f       	mov	r24, r24
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	00 24       	eor	r0, r0
    133e:	96 95       	lsr	r25
    1340:	87 95       	ror	r24
    1342:	07 94       	ror	r0
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	07 94       	ror	r0
    134a:	98 2f       	mov	r25, r24
    134c:	80 2d       	mov	r24, r0
    134e:	82 2b       	or	r24, r18
    1350:	8c 93       	st	X, r24

			tmrRet = MTMR_setAddressOfCallback(ST_ptrCfgInstance_t);
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	9b 81       	ldd	r25, Y+3	; 0x03
    1356:	0e 94 f7 07 	call	0xfee	; 0xfee <MTMR_setAddressOfCallback>
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	05 c0       	rjmp	.+10     	; 0x1368 <MTMR_init+0x282>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    135e:	83 e0       	ldi	r24, 0x03	; 3
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <MTMR_init+0x282>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	89 83       	std	Y+1, r24	; 0x01
	}
	return tmrRet;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <MTMR_start>:


EN_MTMR_systemState_t   MTMR_start(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <MTMR_start+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <MTMR_start+0x8>
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	9b 83       	std	Y+3, r25	; 0x03
    138a:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	09 f4       	brne	.+2      	; 0x139a <MTMR_start+0x20>
    1398:	42 c0       	rjmp	.+132    	; 0x141e <MTMR_start+0xa4>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    139a:	ea 81       	ldd	r30, Y+2	; 0x02
    139c:	fb 81       	ldd	r31, Y+3	; 0x03
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3d 83       	std	Y+5, r19	; 0x05
    13a6:	2c 83       	std	Y+4, r18	; 0x04
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	91 05       	cpc	r25, r1
    13b0:	b9 f0       	breq	.+46     	; 0x13e0 <MTMR_start+0x66>
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	01 f1       	breq	.+64     	; 0x13fc <MTMR_start+0x82>
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	51 f5       	brne	.+84     	; 0x1418 <MTMR_start+0x9e>
		{
		case MTMR_TIMER_0_Channel:
		{
			TCCR0_REG = ((TCCR0_REG & 0xF8)   | (ST_ptrCfgInstance_t->timerClk  << CS00_BIT ));
    13c4:	a3 e5       	ldi	r26, 0x53	; 83
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e3 e5       	ldi	r30, 0x53	; 83
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	98 2f       	mov	r25, r24
    13d0:	98 7f       	andi	r25, 0xF8	; 248
    13d2:	ea 81       	ldd	r30, Y+2	; 0x02
    13d4:	fb 81       	ldd	r31, Y+3	; 0x03
    13d6:	84 81       	ldd	r24, Z+4	; 0x04
    13d8:	89 2b       	or	r24, r25
    13da:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    13dc:	19 82       	std	Y+1, r1	; 0x01
    13de:	21 c0       	rjmp	.+66     	; 0x1422 <MTMR_start+0xa8>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{

			TCCR1B_REG = ((TCCR1B_REG & 0xF8)   | (ST_ptrCfgInstance_t->timerClk << CS10_BIT ));
    13e0:	ae e4       	ldi	r26, 0x4E	; 78
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ee e4       	ldi	r30, 0x4E	; 78
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	98 2f       	mov	r25, r24
    13ec:	98 7f       	andi	r25, 0xF8	; 248
    13ee:	ea 81       	ldd	r30, Y+2	; 0x02
    13f0:	fb 81       	ldd	r31, Y+3	; 0x03
    13f2:	84 81       	ldd	r24, Z+4	; 0x04
    13f4:	89 2b       	or	r24, r25
    13f6:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    13f8:	19 82       	std	Y+1, r1	; 0x01
    13fa:	13 c0       	rjmp	.+38     	; 0x1422 <MTMR_start+0xa8>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			TCCR2_REG = ((TCCR2_REG & 0xF8)   | (ST_ptrCfgInstance_t->timerClk  << CS20_BIT ));
    13fc:	a5 e4       	ldi	r26, 0x45	; 69
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e5 e4       	ldi	r30, 0x45	; 69
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	98 2f       	mov	r25, r24
    1408:	98 7f       	andi	r25, 0xF8	; 248
    140a:	ea 81       	ldd	r30, Y+2	; 0x02
    140c:	fb 81       	ldd	r31, Y+3	; 0x03
    140e:	84 81       	ldd	r24, Z+4	; 0x04
    1410:	89 2b       	or	r24, r25
    1412:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    1414:	19 82       	std	Y+1, r1	; 0x01
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <MTMR_start+0xa8>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <MTMR_start+0xa8>


	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    1422:	89 81       	ldd	r24, Y+1	; 0x01
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <MTMR_stop>:


EN_MTMR_systemState_t   MTMR_stop(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	00 d0       	rcall	.+0      	; 0x143a <MTMR_stop+0x6>
    143a:	00 d0       	rcall	.+0      	; 0x143c <MTMR_stop+0x8>
    143c:	0f 92       	push	r0
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	9b 83       	std	Y+3, r25	; 0x03
    1444:	8a 83       	std	Y+2, r24	; 0x02
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	9b 81       	ldd	r25, Y+3	; 0x03
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	99 f1       	breq	.+102    	; 0x14b8 <MTMR_stop+0x84>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    1452:	ea 81       	ldd	r30, Y+2	; 0x02
    1454:	fb 81       	ldd	r31, Y+3	; 0x03
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3d 83       	std	Y+5, r19	; 0x05
    145e:	2c 83       	std	Y+4, r18	; 0x04
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	91 f0       	breq	.+36     	; 0x148e <MTMR_stop+0x5a>
    146a:	2c 81       	ldd	r18, Y+4	; 0x04
    146c:	3d 81       	ldd	r19, Y+5	; 0x05
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	b1 f0       	breq	.+44     	; 0x14a0 <MTMR_stop+0x6c>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	d9 f4       	brne	.+54     	; 0x14b2 <MTMR_stop+0x7e>
		{
		case MTMR_TIMER_0_Channel:
		{

			TCCR0_REG = ((TCCR0_REG & 0xF8)   | (MTMR_NO_CLK_PRESCALER  << CS00_BIT ));
    147c:	a3 e5       	ldi	r26, 0x53	; 83
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e3 e5       	ldi	r30, 0x53	; 83
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	88 7f       	andi	r24, 0xF8	; 248
    1488:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    148a:	19 82       	std	Y+1, r1	; 0x01
    148c:	17 c0       	rjmp	.+46     	; 0x14bc <MTMR_stop+0x88>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			TCCR1B_REG = ((TCCR1B_REG & 0xF8)   | (MTMR_NO_CLK_PRESCALER << CS10_BIT ));
    148e:	ae e4       	ldi	r26, 0x4E	; 78
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 7f       	andi	r24, 0xF8	; 248
    149a:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    149c:	19 82       	std	Y+1, r1	; 0x01
    149e:	0e c0       	rjmp	.+28     	; 0x14bc <MTMR_stop+0x88>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			TCCR2_REG = ((TCCR2_REG & 0xF8)   | (MTMR_NO_CLK_PRESCALER  << CS20_BIT ));
    14a0:	a5 e4       	ldi	r26, 0x45	; 69
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e4       	ldi	r30, 0x45	; 69
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	88 7f       	andi	r24, 0xF8	; 248
    14ac:	8c 93       	st	X, r24
			tmrRet = MTMR_OK;
    14ae:	19 82       	std	Y+1, r1	; 0x01
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <MTMR_stop+0x88>
			break;
		}
		default :
		{
			tmrRet = MTMR_INVALID_PARAMTER;
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <MTMR_stop+0x88>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    14b8:	82 e0       	ldi	r24, 0x02	; 2
    14ba:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <MTMR_readTcnt>:

EN_MTMR_systemState_t   MTMR_readTcnt(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t , Uint16_t *retOfTcntValue)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	27 97       	sbiw	r28, 0x07	; 7
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	9b 83       	std	Y+3, r25	; 0x03
    14e4:	8a 83       	std	Y+2, r24	; 0x02
    14e6:	7d 83       	std	Y+5, r23	; 0x05
    14e8:	6c 83       	std	Y+4, r22	; 0x04
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	c1 f1       	breq	.+112    	; 0x1566 <MTMR_readTcnt+0x98>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    14f6:	ea 81       	ldd	r30, Y+2	; 0x02
    14f8:	fb 81       	ldd	r31, Y+3	; 0x03
    14fa:	80 81       	ld	r24, Z
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3f 83       	std	Y+7, r19	; 0x07
    1502:	2e 83       	std	Y+6, r18	; 0x06
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	a1 f0       	breq	.+40     	; 0x1536 <MTMR_readTcnt+0x68>
    150e:	2e 81       	ldd	r18, Y+6	; 0x06
    1510:	3f 81       	ldd	r19, Y+7	; 0x07
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	c9 f0       	breq	.+50     	; 0x154a <MTMR_readTcnt+0x7c>
    1518:	8e 81       	ldd	r24, Y+6	; 0x06
    151a:	9f 81       	ldd	r25, Y+7	; 0x07
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	01 f5       	brne	.+64     	; 0x1560 <MTMR_readTcnt+0x92>
		{
		case MTMR_TIMER_0_Channel:
		{

			*retOfTcntValue = TCNT0_REG;
    1520:	e2 e5       	ldi	r30, 0x52	; 82
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	ec 81       	ldd	r30, Y+4	; 0x04
    152c:	fd 81       	ldd	r31, Y+5	; 0x05
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1532:	19 82       	std	Y+1, r1	; 0x01
    1534:	1a c0       	rjmp	.+52     	; 0x156a <MTMR_readTcnt+0x9c>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			*retOfTcntValue = TCNT1_REG;
    1536:	ec e4       	ldi	r30, 0x4C	; 76
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	ec 81       	ldd	r30, Y+4	; 0x04
    1540:	fd 81       	ldd	r31, Y+5	; 0x05
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    1546:	19 82       	std	Y+1, r1	; 0x01
    1548:	10 c0       	rjmp	.+32     	; 0x156a <MTMR_readTcnt+0x9c>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			*retOfTcntValue = TCNT2_REG;
    154a:	e4 e4       	ldi	r30, 0x44	; 68
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	ec 81       	ldd	r30, Y+4	; 0x04
    1556:	fd 81       	ldd	r31, Y+5	; 0x05
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    155c:	19 82       	std	Y+1, r1	; 0x01
    155e:	05 c0       	rjmp	.+10     	; 0x156a <MTMR_readTcnt+0x9c>
			break;
		}
		default :
		{
			tmrRet = MTMR_INVALID_PARAMTER;
    1560:	83 e0       	ldi	r24, 0x03	; 3
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	02 c0       	rjmp	.+4      	; 0x156a <MTMR_readTcnt+0x9c>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	27 96       	adiw	r28, 0x07	; 7
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <MTMR_writeTcntPreload>:

EN_MTMR_systemState_t   MTMR_writeTcntPreload(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t , Uint16_t tcntPreloadValue)
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	27 97       	sbiw	r28, 0x07	; 7
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	9b 83       	std	Y+3, r25	; 0x03
    1594:	8a 83       	std	Y+2, r24	; 0x02
    1596:	7d 83       	std	Y+5, r23	; 0x05
    1598:	6c 83       	std	Y+4, r22	; 0x04
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	9b 81       	ldd	r25, Y+3	; 0x03
    15a2:	00 97       	sbiw	r24, 0x00	; 0
    15a4:	61 f1       	breq	.+88     	; 0x15fe <MTMR_writeTcntPreload+0x80>
	{
		switch(ST_ptrCfgInstance_t->timerChannel)
    15a6:	ea 81       	ldd	r30, Y+2	; 0x02
    15a8:	fb 81       	ldd	r31, Y+3	; 0x03
    15aa:	80 81       	ld	r24, Z
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3f 83       	std	Y+7, r19	; 0x07
    15b2:	2e 83       	std	Y+6, r18	; 0x06
    15b4:	8e 81       	ldd	r24, Y+6	; 0x06
    15b6:	9f 81       	ldd	r25, Y+7	; 0x07
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	91 05       	cpc	r25, r1
    15bc:	79 f0       	breq	.+30     	; 0x15dc <MTMR_writeTcntPreload+0x5e>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	91 f0       	breq	.+36     	; 0x15ec <MTMR_writeTcntPreload+0x6e>
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <MTMR_writeTcntPreload+0x7a>
		{
		case MTMR_TIMER_0_Channel:
		{

			TCNT0_REG = (uint8_t)tcntPreloadValue;
    15d0:	e2 e5       	ldi	r30, 0x52	; 82
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    15d8:	19 82       	std	Y+1, r1	; 0x01
    15da:	13 c0       	rjmp	.+38     	; 0x1602 <MTMR_writeTcntPreload+0x84>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			TCNT1_REG = tcntPreloadValue;
    15dc:	ec e4       	ldi	r30, 0x4C	; 76
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    15e8:	19 82       	std	Y+1, r1	; 0x01
    15ea:	0b c0       	rjmp	.+22     	; 0x1602 <MTMR_writeTcntPreload+0x84>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			TCNT2_REG = (uint8_t)tcntPreloadValue;
    15ec:	e4 e4       	ldi	r30, 0x44	; 68
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	05 c0       	rjmp	.+10     	; 0x1602 <MTMR_writeTcntPreload+0x84>
			break;
		}
		default :
		{
			tmrRet = MTMR_INVALID_PARAMTER;
    15f8:	83 e0       	ldi	r24, 0x03	; 3
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <MTMR_writeTcntPreload+0x84>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    1602:	89 81       	ldd	r24, Y+1	; 0x01
}
    1604:	27 96       	adiw	r28, 0x07	; 7
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <MTMR_readOcr>:


EN_MTMR_systemState_t   MTMR_readOcr(ST_MTMR_cfg_t const *ST_ptrCfgInstance_t , Uint16_t *retOfOcrAValue , Uint16_t *retOfOcrBValue)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	29 97       	sbiw	r28, 0x09	; 9
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	9b 83       	std	Y+3, r25	; 0x03
    162c:	8a 83       	std	Y+2, r24	; 0x02
    162e:	7d 83       	std	Y+5, r23	; 0x05
    1630:	6c 83       	std	Y+4, r22	; 0x04
    1632:	5f 83       	std	Y+7, r21	; 0x07
    1634:	4e 83       	std	Y+6, r20	; 0x06
	EN_MTMR_systemState_t tmrRet = MTMR_NOK;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrCfgInstance_t)
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	9b 81       	ldd	r25, Y+3	; 0x03
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	09 f4       	brne	.+2      	; 0x1644 <MTMR_readOcr+0x2e>
    1642:	48 c0       	rjmp	.+144    	; 0x16d4 <MTMR_readOcr+0xbe>
	{

		switch(ST_ptrCfgInstance_t->timerChannel)
    1644:	ea 81       	ldd	r30, Y+2	; 0x02
    1646:	fb 81       	ldd	r31, Y+3	; 0x03
    1648:	80 81       	ld	r24, Z
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	39 87       	std	Y+9, r19	; 0x09
    1650:	28 87       	std	Y+8, r18	; 0x08
    1652:	88 85       	ldd	r24, Y+8	; 0x08
    1654:	99 85       	ldd	r25, Y+9	; 0x09
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	c1 f0       	breq	.+48     	; 0x168c <MTMR_readOcr+0x76>
    165c:	28 85       	ldd	r18, Y+8	; 0x08
    165e:	39 85       	ldd	r19, Y+9	; 0x09
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	29 f1       	breq	.+74     	; 0x16b0 <MTMR_readOcr+0x9a>
    1666:	88 85       	ldd	r24, Y+8	; 0x08
    1668:	99 85       	ldd	r25, Y+9	; 0x09
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	81 f5       	brne	.+96     	; 0x16ce <MTMR_readOcr+0xb8>
		{
		case MTMR_TIMER_0_Channel:
		{

			*retOfOcrAValue = OCR0_REG;
    166e:	ec e5       	ldi	r30, 0x5C	; 92
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	ec 81       	ldd	r30, Y+4	; 0x04
    167a:	fd 81       	ldd	r31, Y+5	; 0x05
    167c:	91 83       	std	Z+1, r25	; 0x01
    167e:	80 83       	st	Z, r24
			*retOfOcrBValue = PTR_NULL;
    1680:	ee 81       	ldd	r30, Y+6	; 0x06
    1682:	ff 81       	ldd	r31, Y+7	; 0x07
    1684:	11 82       	std	Z+1, r1	; 0x01
    1686:	10 82       	st	Z, r1
			tmrRet = MTMR_OK;
    1688:	19 82       	std	Y+1, r1	; 0x01
    168a:	26 c0       	rjmp	.+76     	; 0x16d8 <MTMR_readOcr+0xc2>
			break;
		}
		case MTMR_TIMER_1_Channel:
		{
			*retOfOcrAValue = OCR1A_REG;
    168c:	ea e4       	ldi	r30, 0x4A	; 74
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	ec 81       	ldd	r30, Y+4	; 0x04
    1696:	fd 81       	ldd	r31, Y+5	; 0x05
    1698:	91 83       	std	Z+1, r25	; 0x01
    169a:	80 83       	st	Z, r24
			*retOfOcrBValue = OCR1B_REG;
    169c:	e8 e4       	ldi	r30, 0x48	; 72
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	ee 81       	ldd	r30, Y+6	; 0x06
    16a6:	ff 81       	ldd	r31, Y+7	; 0x07
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24
			tmrRet = MTMR_OK;
    16ac:	19 82       	std	Y+1, r1	; 0x01
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <MTMR_readOcr+0xc2>
			break;
		}
		case MTMR_TIMER_2_Channel:
		{
			*retOfOcrAValue = OCR2_REG;
    16b0:	e3 e4       	ldi	r30, 0x43	; 67
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	ec 81       	ldd	r30, Y+4	; 0x04
    16bc:	fd 81       	ldd	r31, Y+5	; 0x05
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	80 83       	st	Z, r24
			*retOfOcrBValue = PTR_NULL;
    16c2:	ee 81       	ldd	r30, Y+6	; 0x06
    16c4:	ff 81       	ldd	r31, Y+7	; 0x07
    16c6:	11 82       	std	Z+1, r1	; 0x01
    16c8:	10 82       	st	Z, r1
			tmrRet = MTMR_OK;
    16ca:	19 82       	std	Y+1, r1	; 0x01
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <MTMR_readOcr+0xc2>
			break;
		}
		default :
		{

			tmrRet = MTMR_INVALID_PARAMTER;
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <MTMR_readOcr+0xc2>
		}
		}
	}
	else
	{
		tmrRet = MTMR_PTR_NULL;
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	89 83       	std	Y+1, r24	; 0x01
	}

	return tmrRet;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16da:	29 96       	adiw	r28, 0x09	; 9
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <__vector_11>:


ISR(TIM0_OVF_INT)
{
    16ec:	1f 92       	push	r1
    16ee:	0f 92       	push	r0
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	0f 92       	push	r0
    16f4:	11 24       	eor	r1, r1
    16f6:	2f 93       	push	r18
    16f8:	3f 93       	push	r19
    16fa:	4f 93       	push	r20
    16fc:	5f 93       	push	r21
    16fe:	6f 93       	push	r22
    1700:	7f 93       	push	r23
    1702:	8f 93       	push	r24
    1704:	9f 93       	push	r25
    1706:	af 93       	push	r26
    1708:	bf 93       	push	r27
    170a:	ef 93       	push	r30
    170c:	ff 93       	push	r31
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOvfTmr0)
    1716:	80 91 3a 01 	lds	r24, 0x013A
    171a:	90 91 3b 01 	lds	r25, 0x013B
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	29 f0       	breq	.+10     	; 0x172c <__vector_11+0x40>
		ptr_IsrCallingForOvfTmr0();
    1722:	e0 91 3a 01 	lds	r30, 0x013A
    1726:	f0 91 3b 01 	lds	r31, 0x013B
    172a:	09 95       	icall
	else
		/* Do Nothing */;
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_10>:

ISR(TIM0_COMP_INT)
{
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcTmr0)
    177c:	80 91 3c 01 	lds	r24, 0x013C
    1780:	90 91 3d 01 	lds	r25, 0x013D
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	29 f0       	breq	.+10     	; 0x1792 <__vector_10+0x40>
		ptr_IsrCallingForOcTmr0();
    1788:	e0 91 3c 01 	lds	r30, 0x013C
    178c:	f0 91 3d 01 	lds	r31, 0x013D
    1790:	09 95       	icall
	else
		/* Do Nothing */;
}
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	ff 91       	pop	r31
    1798:	ef 91       	pop	r30
    179a:	bf 91       	pop	r27
    179c:	af 91       	pop	r26
    179e:	9f 91       	pop	r25
    17a0:	8f 91       	pop	r24
    17a2:	7f 91       	pop	r23
    17a4:	6f 91       	pop	r22
    17a6:	5f 91       	pop	r21
    17a8:	4f 91       	pop	r20
    17aa:	3f 91       	pop	r19
    17ac:	2f 91       	pop	r18
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <__vector_9>:

ISR(TIM1_OVF_INT)
{
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	2f 93       	push	r18
    17c4:	3f 93       	push	r19
    17c6:	4f 93       	push	r20
    17c8:	5f 93       	push	r21
    17ca:	6f 93       	push	r22
    17cc:	7f 93       	push	r23
    17ce:	8f 93       	push	r24
    17d0:	9f 93       	push	r25
    17d2:	af 93       	push	r26
    17d4:	bf 93       	push	r27
    17d6:	ef 93       	push	r30
    17d8:	ff 93       	push	r31
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOvfTmr1)
    17e2:	80 91 3e 01 	lds	r24, 0x013E
    17e6:	90 91 3f 01 	lds	r25, 0x013F
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	29 f0       	breq	.+10     	; 0x17f8 <__vector_9+0x40>
		ptr_IsrCallingForOvfTmr1();
    17ee:	e0 91 3e 01 	lds	r30, 0x013E
    17f2:	f0 91 3f 01 	lds	r31, 0x013F
    17f6:	09 95       	icall
	else
		/* Do Nothing */;
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	ff 91       	pop	r31
    17fe:	ef 91       	pop	r30
    1800:	bf 91       	pop	r27
    1802:	af 91       	pop	r26
    1804:	9f 91       	pop	r25
    1806:	8f 91       	pop	r24
    1808:	7f 91       	pop	r23
    180a:	6f 91       	pop	r22
    180c:	5f 91       	pop	r21
    180e:	4f 91       	pop	r20
    1810:	3f 91       	pop	r19
    1812:	2f 91       	pop	r18
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <__vector_7>:

ISR(TIM1_COMPA_INT)
{
    181e:	1f 92       	push	r1
    1820:	0f 92       	push	r0
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	0f 92       	push	r0
    1826:	11 24       	eor	r1, r1
    1828:	2f 93       	push	r18
    182a:	3f 93       	push	r19
    182c:	4f 93       	push	r20
    182e:	5f 93       	push	r21
    1830:	6f 93       	push	r22
    1832:	7f 93       	push	r23
    1834:	8f 93       	push	r24
    1836:	9f 93       	push	r25
    1838:	af 93       	push	r26
    183a:	bf 93       	push	r27
    183c:	ef 93       	push	r30
    183e:	ff 93       	push	r31
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	cd b7       	in	r28, 0x3d	; 61
    1846:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcATmr1)
    1848:	80 91 42 01 	lds	r24, 0x0142
    184c:	90 91 43 01 	lds	r25, 0x0143
    1850:	00 97       	sbiw	r24, 0x00	; 0
    1852:	29 f0       	breq	.+10     	; 0x185e <__vector_7+0x40>
		ptr_IsrCallingForOcATmr1();
    1854:	e0 91 42 01 	lds	r30, 0x0142
    1858:	f0 91 43 01 	lds	r31, 0x0143
    185c:	09 95       	icall
	else
		/* Do Nothing */;
}
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	0f 90       	pop	r0
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	0f 90       	pop	r0
    1880:	1f 90       	pop	r1
    1882:	18 95       	reti

00001884 <__vector_8>:

ISR(TIM1_COMPB_INT)
{
    1884:	1f 92       	push	r1
    1886:	0f 92       	push	r0
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	0f 92       	push	r0
    188c:	11 24       	eor	r1, r1
    188e:	2f 93       	push	r18
    1890:	3f 93       	push	r19
    1892:	4f 93       	push	r20
    1894:	5f 93       	push	r21
    1896:	6f 93       	push	r22
    1898:	7f 93       	push	r23
    189a:	8f 93       	push	r24
    189c:	9f 93       	push	r25
    189e:	af 93       	push	r26
    18a0:	bf 93       	push	r27
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcBTmr1)
    18ae:	80 91 40 01 	lds	r24, 0x0140
    18b2:	90 91 41 01 	lds	r25, 0x0141
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	29 f0       	breq	.+10     	; 0x18c4 <__vector_8+0x40>
		ptr_IsrCallingForOcBTmr1();
    18ba:	e0 91 40 01 	lds	r30, 0x0140
    18be:	f0 91 41 01 	lds	r31, 0x0141
    18c2:	09 95       	icall
	else
		/* Do Nothing */;
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	ff 91       	pop	r31
    18ca:	ef 91       	pop	r30
    18cc:	bf 91       	pop	r27
    18ce:	af 91       	pop	r26
    18d0:	9f 91       	pop	r25
    18d2:	8f 91       	pop	r24
    18d4:	7f 91       	pop	r23
    18d6:	6f 91       	pop	r22
    18d8:	5f 91       	pop	r21
    18da:	4f 91       	pop	r20
    18dc:	3f 91       	pop	r19
    18de:	2f 91       	pop	r18
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	0f 90       	pop	r0
    18e6:	1f 90       	pop	r1
    18e8:	18 95       	reti

000018ea <__vector_6>:

ISR(TIM1_CAPT_INT)
{
    18ea:	1f 92       	push	r1
    18ec:	0f 92       	push	r0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	0f 92       	push	r0
    18f2:	11 24       	eor	r1, r1
    18f4:	2f 93       	push	r18
    18f6:	3f 93       	push	r19
    18f8:	4f 93       	push	r20
    18fa:	5f 93       	push	r21
    18fc:	6f 93       	push	r22
    18fe:	7f 93       	push	r23
    1900:	8f 93       	push	r24
    1902:	9f 93       	push	r25
    1904:	af 93       	push	r26
    1906:	bf 93       	push	r27
    1908:	ef 93       	push	r30
    190a:	ff 93       	push	r31
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForIcuTmr1)
    1914:	80 91 44 01 	lds	r24, 0x0144
    1918:	90 91 45 01 	lds	r25, 0x0145
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	29 f0       	breq	.+10     	; 0x192a <__vector_6+0x40>
		ptr_IsrCallingForIcuTmr1();
    1920:	e0 91 44 01 	lds	r30, 0x0144
    1924:	f0 91 45 01 	lds	r31, 0x0145
    1928:	09 95       	icall
	else
		/* Do Nothing */;
}
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <__vector_5>:

ISR(TIM2_OVF_INT)
{
    1950:	1f 92       	push	r1
    1952:	0f 92       	push	r0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	0f 92       	push	r0
    1958:	11 24       	eor	r1, r1
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOvfTmr2)
    197a:	80 91 46 01 	lds	r24, 0x0146
    197e:	90 91 47 01 	lds	r25, 0x0147
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	29 f0       	breq	.+10     	; 0x1990 <__vector_5+0x40>
		ptr_IsrCallingForOvfTmr2();
    1986:	e0 91 46 01 	lds	r30, 0x0146
    198a:	f0 91 47 01 	lds	r31, 0x0147
    198e:	09 95       	icall
	else
		/* Do Nothing */;
}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	ff 91       	pop	r31
    1996:	ef 91       	pop	r30
    1998:	bf 91       	pop	r27
    199a:	af 91       	pop	r26
    199c:	9f 91       	pop	r25
    199e:	8f 91       	pop	r24
    19a0:	7f 91       	pop	r23
    19a2:	6f 91       	pop	r22
    19a4:	5f 91       	pop	r21
    19a6:	4f 91       	pop	r20
    19a8:	3f 91       	pop	r19
    19aa:	2f 91       	pop	r18
    19ac:	0f 90       	pop	r0
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	0f 90       	pop	r0
    19b2:	1f 90       	pop	r1
    19b4:	18 95       	reti

000019b6 <__vector_4>:

ISR(TIM2_COMP_INT)
{
    19b6:	1f 92       	push	r1
    19b8:	0f 92       	push	r0
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	0f 92       	push	r0
    19be:	11 24       	eor	r1, r1
    19c0:	2f 93       	push	r18
    19c2:	3f 93       	push	r19
    19c4:	4f 93       	push	r20
    19c6:	5f 93       	push	r21
    19c8:	6f 93       	push	r22
    19ca:	7f 93       	push	r23
    19cc:	8f 93       	push	r24
    19ce:	9f 93       	push	r25
    19d0:	af 93       	push	r26
    19d2:	bf 93       	push	r27
    19d4:	ef 93       	push	r30
    19d6:	ff 93       	push	r31
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptr_IsrCallingForOcTmr2)
    19e0:	80 91 48 01 	lds	r24, 0x0148
    19e4:	90 91 49 01 	lds	r25, 0x0149
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	29 f0       	breq	.+10     	; 0x19f6 <__vector_4+0x40>
		ptr_IsrCallingForOcTmr2();
    19ec:	e0 91 48 01 	lds	r30, 0x0148
    19f0:	f0 91 49 01 	lds	r31, 0x0149
    19f4:	09 95       	icall
	else
		/* Do Nothing */;
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	ff 91       	pop	r31
    19fc:	ef 91       	pop	r30
    19fe:	bf 91       	pop	r27
    1a00:	af 91       	pop	r26
    1a02:	9f 91       	pop	r25
    1a04:	8f 91       	pop	r24
    1a06:	7f 91       	pop	r23
    1a08:	6f 91       	pop	r22
    1a0a:	5f 91       	pop	r21
    1a0c:	4f 91       	pop	r20
    1a0e:	3f 91       	pop	r19
    1a10:	2f 91       	pop	r18
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <MSPI_init>:

#include "spi_interface.h"


EN_MSPI_systemState_t MSPI_init(ST_MSPI_cfg_t const *ST_ptrSpiCfgInstance)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	2c 97       	sbiw	r28, 0x0c	; 12
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	9c 87       	std	Y+12, r25	; 0x0c
    1a32:	8b 87       	std	Y+11, r24	; 0x0b
	EN_MSPI_systemState_t spiRet = MSPI_NOK;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrSpiCfgInstance)
    1a3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <MSPI_init+0x2a>
    1a44:	f2 c0       	rjmp	.+484    	; 0x1c2a <MSPI_init+0x20e>
	{

		if(ST_ptrSpiCfgInstance->spiDeviceType == MSPI_MASTER)
    1a46:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a48:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a4a:	80 81       	ld	r24, Z
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	a9 f5       	brne	.+106    	; 0x1aba <MSPI_init+0x9e>
			{
					.portName = GPIO_PORTB,
					.pinNumber = GPIO_PIN4,
					.pinDirection = GPIO_OUTPUT,
					.logicOnPin = GPIO_LOW
			};
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	8b 83       	std	Y+3, r24	; 0x03
    1a54:	84 e0       	ldi	r24, 0x04	; 4
    1a56:	8c 83       	std	Y+4, r24	; 0x04
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
    1a5c:	1e 82       	std	Y+6, r1	; 0x06

			gpioRet = GPIO_initPin(&pinCfg);
    1a5e:	ce 01       	movw	r24, r28
    1a60:	03 96       	adiw	r24, 0x03	; 3
    1a62:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1a66:	89 83       	std	Y+1, r24	; 0x01

			if(gpioRet == GPIO_OK)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	88 23       	and	r24, r24
    1a6c:	41 f4       	brne	.+16     	; 0x1a7e <MSPI_init+0x62>
			{
				pinCfg.pinNumber = GPIO_PIN5;
    1a6e:	85 e0       	ldi	r24, 0x05	; 5
    1a70:	8c 83       	std	Y+4, r24	; 0x04
				gpioRet = GPIO_initPin(&pinCfg);
    1a72:	ce 01       	movw	r24, r28
    1a74:	03 96       	adiw	r24, 0x03	; 3
    1a76:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <MSPI_init+0x66>
			}
			else spiRet = MSPI_NOK;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	88 23       	and	r24, r24
    1a86:	41 f4       	brne	.+16     	; 0x1a98 <MSPI_init+0x7c>
			{
				pinCfg.pinNumber = GPIO_PIN7;
    1a88:	87 e0       	ldi	r24, 0x07	; 7
    1a8a:	8c 83       	std	Y+4, r24	; 0x04
				gpioRet = GPIO_initPin(&pinCfg);
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	03 96       	adiw	r24, 0x03	; 3
    1a90:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <MSPI_init+0x80>
			}
			else spiRet = MSPI_NOK;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	88 23       	and	r24, r24
    1aa0:	49 f4       	brne	.+18     	; 0x1ab4 <MSPI_init+0x98>
			{
				pinCfg.pinNumber = GPIO_PIN6;
    1aa2:	86 e0       	ldi	r24, 0x06	; 6
    1aa4:	8c 83       	std	Y+4, r24	; 0x04
				pinCfg.pinDirection = GPIO_INPUT;
    1aa6:	1d 82       	std	Y+5, r1	; 0x05
				gpioRet = GPIO_initPin(&pinCfg);
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	03 96       	adiw	r24, 0x03	; 3
    1aac:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	3c c0       	rjmp	.+120    	; 0x1b2c <MSPI_init+0x110>
			}
			else spiRet = MSPI_NOK;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    1ab8:	39 c0       	rjmp	.+114    	; 0x1b2c <MSPI_init+0x110>
		}
		else if(ST_ptrSpiCfgInstance->spiDeviceType == MSPI_SLAVE)
    1aba:	eb 85       	ldd	r30, Y+11	; 0x0b
    1abc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 23       	and	r24, r24
    1ac2:	a1 f5       	brne	.+104    	; 0x1b2c <MSPI_init+0x110>
			{
					.portName = GPIO_PORTB,
					.pinNumber = GPIO_PIN4,
					.pinDirection = GPIO_INPUT,
					.logicOnPin = GPIO_LOW
			};
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	8f 83       	std	Y+7, r24	; 0x07
    1ac8:	84 e0       	ldi	r24, 0x04	; 4
    1aca:	88 87       	std	Y+8, r24	; 0x08
    1acc:	19 86       	std	Y+9, r1	; 0x09
    1ace:	1a 86       	std	Y+10, r1	; 0x0a

			gpioRet = GPIO_initPin(&pinCfg);
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	07 96       	adiw	r24, 0x07	; 7
    1ad4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1ad8:	89 83       	std	Y+1, r24	; 0x01

			if(gpioRet == GPIO_OK)
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	88 23       	and	r24, r24
    1ade:	41 f4       	brne	.+16     	; 0x1af0 <MSPI_init+0xd4>
			{
				pinCfg.pinNumber = GPIO_PIN5;
    1ae0:	85 e0       	ldi	r24, 0x05	; 5
    1ae2:	88 87       	std	Y+8, r24	; 0x08
				gpioRet = GPIO_initPin(&pinCfg);
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	07 96       	adiw	r24, 0x07	; 7
    1ae8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <MSPI_init+0xd8>
			}
			else spiRet = MSPI_NOK;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	88 23       	and	r24, r24
    1af8:	41 f4       	brne	.+16     	; 0x1b0a <MSPI_init+0xee>
			{
				pinCfg.pinNumber = GPIO_PIN7;
    1afa:	87 e0       	ldi	r24, 0x07	; 7
    1afc:	88 87       	std	Y+8, r24	; 0x08
				gpioRet = GPIO_initPin(&pinCfg);
    1afe:	ce 01       	movw	r24, r28
    1b00:	07 96       	adiw	r24, 0x07	; 7
    1b02:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1b06:	89 83       	std	Y+1, r24	; 0x01
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <MSPI_init+0xf2>
			}
			else spiRet = MSPI_NOK;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	8a 83       	std	Y+2, r24	; 0x02

			if(gpioRet == GPIO_OK)
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	88 23       	and	r24, r24
    1b12:	51 f4       	brne	.+20     	; 0x1b28 <MSPI_init+0x10c>
			{
				pinCfg.pinNumber = GPIO_PIN6;
    1b14:	86 e0       	ldi	r24, 0x06	; 6
    1b16:	88 87       	std	Y+8, r24	; 0x08
				pinCfg.pinDirection = GPIO_OUTPUT;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	89 87       	std	Y+9, r24	; 0x09
				gpioRet = GPIO_initPin(&pinCfg);
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	07 96       	adiw	r24, 0x07	; 7
    1b20:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <MSPI_init+0x110>
			}
			else spiRet = MSPI_NOK;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
		else
		{
			/* Do Nothing */
		}

		  SPCR_REG = ((SPCR_REG & 0x7F) | (ST_ptrSpiCfgInstance->spiInterruptStates << SPIE_BIT));
    1b2c:	ad e2       	ldi	r26, 0x2D	; 45
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ed e2       	ldi	r30, 0x2D	; 45
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	28 2f       	mov	r18, r24
    1b38:	2f 77       	andi	r18, 0x7F	; 127
    1b3a:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b3c:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b3e:	81 81       	ldd	r24, Z+1	; 0x01
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	96 95       	lsr	r25
    1b46:	98 2f       	mov	r25, r24
    1b48:	88 27       	eor	r24, r24
    1b4a:	97 95       	ror	r25
    1b4c:	87 95       	ror	r24
    1b4e:	82 2b       	or	r24, r18
    1b50:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xDF) | (ST_ptrSpiCfgInstance->spiDataOrder << DORD_BIT));
    1b52:	ad e2       	ldi	r26, 0x2D	; 45
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	ed e2       	ldi	r30, 0x2D	; 45
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	2f 7d       	andi	r18, 0xDF	; 223
    1b60:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b62:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	82 95       	swap	r24
    1b70:	92 95       	swap	r25
    1b72:	90 7f       	andi	r25, 0xF0	; 240
    1b74:	98 27       	eor	r25, r24
    1b76:	80 7f       	andi	r24, 0xF0	; 240
    1b78:	98 27       	eor	r25, r24
    1b7a:	82 2b       	or	r24, r18
    1b7c:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xEF) | (ST_ptrSpiCfgInstance->spiDeviceType << MSTR_BIT));
    1b7e:	ad e2       	ldi	r26, 0x2D	; 45
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	ed e2       	ldi	r30, 0x2D	; 45
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	2f 7e       	andi	r18, 0xEF	; 239
    1b8c:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b8e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b90:	80 81       	ld	r24, Z
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	82 95       	swap	r24
    1b98:	92 95       	swap	r25
    1b9a:	90 7f       	andi	r25, 0xF0	; 240
    1b9c:	98 27       	eor	r25, r24
    1b9e:	80 7f       	andi	r24, 0xF0	; 240
    1ba0:	98 27       	eor	r25, r24
    1ba2:	82 2b       	or	r24, r18
    1ba4:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xF7) | (ST_ptrSpiCfgInstance->spiClkPolarity << CPOL_BIT));
    1ba6:	ad e2       	ldi	r26, 0x2D	; 45
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ed e2       	ldi	r30, 0x2D	; 45
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	27 7f       	andi	r18, 0xF7	; 247
    1bb4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bb6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bb8:	83 81       	ldd	r24, Z+3	; 0x03
    1bba:	88 2f       	mov	r24, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	82 2b       	or	r24, r18
    1bcc:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xFC) | (ST_ptrSpiCfgInstance->spiClkRate << SPR0_BIT));
    1bce:	ad e2       	ldi	r26, 0x2D	; 45
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ed e2       	ldi	r30, 0x2D	; 45
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	98 2f       	mov	r25, r24
    1bda:	9c 7f       	andi	r25, 0xFC	; 252
    1bdc:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bde:	fc 85       	ldd	r31, Y+12	; 0x0c
    1be0:	85 81       	ldd	r24, Z+5	; 0x05
    1be2:	89 2b       	or	r24, r25
    1be4:	8c 93       	st	X, r24
		  SPCR_REG = ((SPCR_REG & 0xFB) | (ST_ptrSpiCfgInstance->spiCphaFunctionality << CPHA_BIT));
    1be6:	ad e2       	ldi	r26, 0x2D	; 45
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ed e2       	ldi	r30, 0x2D	; 45
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	2b 7f       	andi	r18, 0xFB	; 251
    1bf4:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bf6:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bf8:	84 81       	ldd	r24, Z+4	; 0x04
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	82 2b       	or	r24, r18
    1c08:	8c 93       	st	X, r24

		  SPSR_REG = ((SPSR_REG & 0xFE) | ((ST_ptrSpiCfgInstance->spiClkRate >> 2) << SPI2X_BIT));
    1c0a:	ae e2       	ldi	r26, 0x2E	; 46
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	ee e2       	ldi	r30, 0x2E	; 46
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	98 2f       	mov	r25, r24
    1c16:	9e 7f       	andi	r25, 0xFE	; 254
    1c18:	eb 85       	ldd	r30, Y+11	; 0x0b
    1c1a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1c1c:	85 81       	ldd	r24, Z+5	; 0x05
    1c1e:	86 95       	lsr	r24
    1c20:	86 95       	lsr	r24
    1c22:	89 2b       	or	r24, r25
    1c24:	8c 93       	st	X, r24

		spiRet = MSPI_OK;
    1c26:	1a 82       	std	Y+2, r1	; 0x02
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <MSPI_init+0x212>
	}
	else
	{
		spiRet = MSPI_PTR_NULL;
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	8a 83       	std	Y+2, r24	; 0x02
	}

	return spiRet;
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c30:	2c 96       	adiw	r28, 0x0c	; 12
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <MSPI_enable>:

EN_MSPI_systemState_t MSPI_enable(void)
{
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	0f 92       	push	r0
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
	EN_MSPI_systemState_t spiRet = MSPI_NOK;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	89 83       	std	Y+1, r24	; 0x01

	SPCR_REG = ((SPCR_REG & 0xBF) | (MSPI_ENABLE  << SPE_BIT));
    1c50:	ad e2       	ldi	r26, 0x2D	; 45
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	ed e2       	ldi	r30, 0x2D	; 45
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 64       	ori	r24, 0x40	; 64
    1c5c:	8c 93       	st	X, r24
	spiRet = MSPI_OK;
    1c5e:	19 82       	std	Y+1, r1	; 0x01
	return spiRet;
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c62:	0f 90       	pop	r0
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	08 95       	ret

00001c6a <MSPI_disable>:
EN_MSPI_systemState_t MSPI_disable(void)
{
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	0f 92       	push	r0
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
	EN_MSPI_systemState_t spiRet = MSPI_NOK;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	89 83       	std	Y+1, r24	; 0x01

	SPCR_REG = ((SPCR_REG & 0xBF) | (MSPI_DISABLE  << SPE_BIT));
    1c78:	ad e2       	ldi	r26, 0x2D	; 45
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	ed e2       	ldi	r30, 0x2D	; 45
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	8f 7b       	andi	r24, 0xBF	; 191
    1c84:	8c 93       	st	X, r24
	spiRet = MSPI_OK;
    1c86:	19 82       	std	Y+1, r1	; 0x01
	return spiRet;
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <MSPI_recive>:


EN_MSPI_systemState_t MSPI_recive(uint8_t *retOfData)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	00 d0       	rcall	.+0      	; 0x1c98 <MSPI_recive+0x6>
    1c98:	0f 92       	push	r0
    1c9a:	cd b7       	in	r28, 0x3d	; 61
    1c9c:	de b7       	in	r29, 0x3e	; 62
    1c9e:	9b 83       	std	Y+3, r25	; 0x03
    1ca0:	8a 83       	std	Y+2, r24	; 0x02
	  EN_MSPI_systemState_t spiRet = MSPI_NOK;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	89 83       	std	Y+1, r24	; 0x01

	  while(GET_BIT(SPSR_REG,SPIF_BIT) != 1);
    1ca6:	ee e2       	ldi	r30, 0x2E	; 46
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	88 1f       	adc	r24, r24
    1cae:	88 27       	eor	r24, r24
    1cb0:	88 1f       	adc	r24, r24
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	c1 f7       	brne	.-16     	; 0x1ca6 <MSPI_recive+0x14>
	  *retOfData = SPDR_REG;
    1cb6:	ef e2       	ldi	r30, 0x2F	; 47
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	ea 81       	ldd	r30, Y+2	; 0x02
    1cbe:	fb 81       	ldd	r31, Y+3	; 0x03
    1cc0:	80 83       	st	Z, r24
	  spiRet = MSPI_OK;
    1cc2:	19 82       	std	Y+1, r1	; 0x01
	  return spiRet;
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <MSPI_send>:


EN_MSPI_systemState_t MSPI_send(uint8_t DataToSend)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <MSPI_send+0x6>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	8a 83       	std	Y+2, r24	; 0x02
  EN_MSPI_systemState_t spiRet = MSPI_NOK;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	89 83       	std	Y+1, r24	; 0x01
  SPDR_REG = DataToSend;
    1ce2:	ef e2       	ldi	r30, 0x2F	; 47
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	80 83       	st	Z, r24
  while(GET_BIT(SPSR_REG,SPIF_BIT) != 1);
    1cea:	ee e2       	ldi	r30, 0x2E	; 46
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 1f       	adc	r24, r24
    1cf2:	88 27       	eor	r24, r24
    1cf4:	88 1f       	adc	r24, r24
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	c1 f7       	brne	.-16     	; 0x1cea <MSPI_send+0x18>
  spiRet = MSPI_OK;
    1cfa:	19 82       	std	Y+1, r1	; 0x01
  return spiRet;
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <GPIO_initPin>:
static volatile uint8_t *port_registers[] = {&PORTA_REG, &PORTB_REG, &PORTC_REG,
		&PORTD_REG};
static volatile uint8_t *pin_registers[] = {&PINA_REG, &PINB_REG, &PINC_REG,
		&PIND_REG};

EN_GPIO_systemState_t GPIO_initPin(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <GPIO_initPin+0x6>
    1d0e:	0f 92       	push	r0
    1d10:	cd b7       	in	r28, 0x3d	; 61
    1d12:	de b7       	in	r29, 0x3e	; 62
    1d14:	9b 83       	std	Y+3, r25	; 0x03
    1d16:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	b1 f0       	breq	.+44     	; 0x1d50 <GPIO_initPin+0x48>
		ret = GPIO_changePinDir(ST_ptrPinInstance, ST_ptrPinInstance->pinDirection);
    1d24:	ea 81       	ldd	r30, Y+2	; 0x02
    1d26:	fb 81       	ldd	r31, Y+3	; 0x03
    1d28:	22 81       	ldd	r18, Z+2	; 0x02
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d2e:	62 2f       	mov	r22, r18
    1d30:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <GPIO_changePinDir>
    1d34:	89 83       	std	Y+1, r24	; 0x01
		if (GPIO_OK == ret) {
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	88 23       	and	r24, r24
    1d3a:	61 f4       	brne	.+24     	; 0x1d54 <GPIO_initPin+0x4c>
			ret =
    1d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1d40:	23 81       	ldd	r18, Z+3	; 0x03
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	9b 81       	ldd	r25, Y+3	; 0x03
    1d46:	62 2f       	mov	r22, r18
    1d48:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <GPIO_initPin+0x4c>
					GPIO_writePinLogic(ST_ptrPinInstance, ST_ptrPinInstance->logicOnPin);
		} else {
			/*Do Nothin*/
		}
	} else {
		ret = GPIO_NULL_PTR;
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <GPIO_changePinDir>:

EN_GPIO_systemState_t GPIO_changePinDir(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinDir_t copyNewPinDir) {
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <GPIO_changePinDir+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <GPIO_changePinDir+0x8>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <GPIO_changePinDir+0xa>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9b 83       	std	Y+3, r25	; 0x03
    1d72:	8a 83       	std	Y+2, r24	; 0x02
    1d74:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <GPIO_changePinDir+0x22>
    1d82:	68 c0       	rjmp	.+208    	; 0x1e54 <GPIO_changePinDir+0xf2>
		switch (copyNewPinDir) {
    1d84:	8c 81       	ldd	r24, Y+4	; 0x04
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	3e 83       	std	Y+6, r19	; 0x06
    1d8c:	2d 83       	std	Y+5, r18	; 0x05
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	31 f0       	breq	.+12     	; 0x1da2 <GPIO_changePinDir+0x40>
    1d96:	2d 81       	ldd	r18, Y+5	; 0x05
    1d98:	3e 81       	ldd	r19, Y+6	; 0x06
    1d9a:	21 30       	cpi	r18, 0x01	; 1
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	71 f1       	breq	.+92     	; 0x1dfc <GPIO_changePinDir+0x9a>
    1da0:	5b c0       	rjmp	.+182    	; 0x1e58 <GPIO_changePinDir+0xf6>
		case GPIO_INPUT: {
			CLR_BIT(*ddr_registers[ST_ptrPinInstance->portName],
    1da2:	ea 81       	ldd	r30, Y+2	; 0x02
    1da4:	fb 81       	ldd	r31, Y+3	; 0x03
    1da6:	80 81       	ld	r24, Z
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	88 0f       	add	r24, r24
    1dae:	99 1f       	adc	r25, r25
    1db0:	fc 01       	movw	r30, r24
    1db2:	e8 59       	subi	r30, 0x98	; 152
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	a0 81       	ld	r26, Z
    1db8:	b1 81       	ldd	r27, Z+1	; 0x01
    1dba:	ea 81       	ldd	r30, Y+2	; 0x02
    1dbc:	fb 81       	ldd	r31, Y+3	; 0x03
    1dbe:	80 81       	ld	r24, Z
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	fc 01       	movw	r30, r24
    1dca:	e8 59       	subi	r30, 0x98	; 152
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	01 90       	ld	r0, Z+
    1dd0:	f0 81       	ld	r31, Z
    1dd2:	e0 2d       	mov	r30, r0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	48 2f       	mov	r20, r24
    1dd8:	ea 81       	ldd	r30, Y+2	; 0x02
    1dda:	fb 81       	ldd	r31, Y+3	; 0x03
    1ddc:	81 81       	ldd	r24, Z+1	; 0x01
    1dde:	28 2f       	mov	r18, r24
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	02 2e       	mov	r0, r18
    1de8:	02 c0       	rjmp	.+4      	; 0x1dee <GPIO_changePinDir+0x8c>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	0a 94       	dec	r0
    1df0:	e2 f7       	brpl	.-8      	; 0x1dea <GPIO_changePinDir+0x88>
    1df2:	80 95       	com	r24
    1df4:	84 23       	and	r24, r20
    1df6:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    1df8:	19 82       	std	Y+1, r1	; 0x01
    1dfa:	2e c0       	rjmp	.+92     	; 0x1e58 <GPIO_changePinDir+0xf6>
			break;
		}
		case GPIO_OUTPUT: {
			SET_BIT(*ddr_registers[ST_ptrPinInstance->portName],
    1dfc:	ea 81       	ldd	r30, Y+2	; 0x02
    1dfe:	fb 81       	ldd	r31, Y+3	; 0x03
    1e00:	80 81       	ld	r24, Z
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	e8 59       	subi	r30, 0x98	; 152
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	a0 81       	ld	r26, Z
    1e12:	b1 81       	ldd	r27, Z+1	; 0x01
    1e14:	ea 81       	ldd	r30, Y+2	; 0x02
    1e16:	fb 81       	ldd	r31, Y+3	; 0x03
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 2f       	mov	r24, r24
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	fc 01       	movw	r30, r24
    1e24:	e8 59       	subi	r30, 0x98	; 152
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	01 90       	ld	r0, Z+
    1e2a:	f0 81       	ld	r31, Z
    1e2c:	e0 2d       	mov	r30, r0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	ea 81       	ldd	r30, Y+2	; 0x02
    1e34:	fb 81       	ldd	r31, Y+3	; 0x03
    1e36:	81 81       	ldd	r24, Z+1	; 0x01
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <GPIO_changePinDir+0xe6>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <GPIO_changePinDir+0xe2>
    1e4c:	84 2b       	or	r24, r20
    1e4e:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    1e50:	19 82       	std	Y+1, r1	; 0x01
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <GPIO_changePinDir+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1e58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5a:	26 96       	adiw	r28, 0x06	; 6
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	de bf       	out	0x3e, r29	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	cd bf       	out	0x3d, r28	; 61
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <GPIO_writePinLogic>:

EN_GPIO_systemState_t GPIO_writePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t copyNewPinLogic) {
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <GPIO_writePinLogic+0x6>
    1e72:	00 d0       	rcall	.+0      	; 0x1e74 <GPIO_writePinLogic+0x8>
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <GPIO_writePinLogic+0xa>
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
    1e7a:	9b 83       	std	Y+3, r25	; 0x03
    1e7c:	8a 83       	std	Y+2, r24	; 0x02
    1e7e:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <GPIO_writePinLogic+0x22>
    1e8c:	68 c0       	rjmp	.+208    	; 0x1f5e <GPIO_writePinLogic+0xf2>
		switch (copyNewPinLogic) {
    1e8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3e 83       	std	Y+6, r19	; 0x06
    1e96:	2d 83       	std	Y+5, r18	; 0x05
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	31 f0       	breq	.+12     	; 0x1eac <GPIO_writePinLogic+0x40>
    1ea0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ea2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ea4:	21 30       	cpi	r18, 0x01	; 1
    1ea6:	31 05       	cpc	r19, r1
    1ea8:	71 f1       	breq	.+92     	; 0x1f06 <GPIO_writePinLogic+0x9a>
    1eaa:	5b c0       	rjmp	.+182    	; 0x1f62 <GPIO_writePinLogic+0xf6>
		case GPIO_LOW: {
			CLR_BIT(*port_registers[ST_ptrPinInstance->portName],
    1eac:	ea 81       	ldd	r30, Y+2	; 0x02
    1eae:	fb 81       	ldd	r31, Y+3	; 0x03
    1eb0:	80 81       	ld	r24, Z
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e0 59       	subi	r30, 0x90	; 144
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	a0 81       	ld	r26, Z
    1ec2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ec4:	ea 81       	ldd	r30, Y+2	; 0x02
    1ec6:	fb 81       	ldd	r31, Y+3	; 0x03
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	e0 59       	subi	r30, 0x90	; 144
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	01 90       	ld	r0, Z+
    1eda:	f0 81       	ld	r31, Z
    1edc:	e0 2d       	mov	r30, r0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee6:	81 81       	ldd	r24, Z+1	; 0x01
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <GPIO_writePinLogic+0x8c>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <GPIO_writePinLogic+0x88>
    1efc:	80 95       	com	r24
    1efe:	84 23       	and	r24, r20
    1f00:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    1f02:	19 82       	std	Y+1, r1	; 0x01
    1f04:	2e c0       	rjmp	.+92     	; 0x1f62 <GPIO_writePinLogic+0xf6>
			break;
		}
		case GPIO_HIGH: {
			SET_BIT(*port_registers[ST_ptrPinInstance->portName],
    1f06:	ea 81       	ldd	r30, Y+2	; 0x02
    1f08:	fb 81       	ldd	r31, Y+3	; 0x03
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	fc 01       	movw	r30, r24
    1f16:	e0 59       	subi	r30, 0x90	; 144
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	a0 81       	ld	r26, Z
    1f1c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f1e:	ea 81       	ldd	r30, Y+2	; 0x02
    1f20:	fb 81       	ldd	r31, Y+3	; 0x03
    1f22:	80 81       	ld	r24, Z
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	e0 59       	subi	r30, 0x90	; 144
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	01 90       	ld	r0, Z+
    1f34:	f0 81       	ld	r31, Z
    1f36:	e0 2d       	mov	r30, r0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f40:	81 81       	ldd	r24, Z+1	; 0x01
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <GPIO_writePinLogic+0xe6>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <GPIO_writePinLogic+0xe2>
    1f56:	84 2b       	or	r24, r20
    1f58:	8c 93       	st	X, r24
					ST_ptrPinInstance->pinNumber);
			ret = GPIO_OK;
    1f5a:	19 82       	std	Y+1, r1	; 0x01
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <GPIO_writePinLogic+0xf6>
			break;
		}
		}
	} else {
		ret = GPIO_NULL_PTR;
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f64:	26 96       	adiw	r28, 0x06	; 6
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <GPIO_readPinLogic>:

EN_GPIO_systemState_t
GPIO_readPinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance,
		EN_GPIO_pinLogic_t *retCurrentPinLogic) {
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <GPIO_readPinLogic+0x6>
    1f7c:	00 d0       	rcall	.+0      	; 0x1f7e <GPIO_readPinLogic+0x8>
    1f7e:	0f 92       	push	r0
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	9b 83       	std	Y+3, r25	; 0x03
    1f86:	8a 83       	std	Y+2, r24	; 0x02
    1f88:	7d 83       	std	Y+5, r23	; 0x05
    1f8a:	6c 83       	std	Y+4, r22	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	9b 81       	ldd	r25, Y+3	; 0x03
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	11 f1       	breq	.+68     	; 0x1fdc <GPIO_readPinLogic+0x66>
		*retCurrentPinLogic = GET_BIT(*pin_registers[ST_ptrPinInstance->portName],
    1f98:	ea 81       	ldd	r30, Y+2	; 0x02
    1f9a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	e8 58       	subi	r30, 0x88	; 136
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	01 90       	ld	r0, Z+
    1fae:	f0 81       	ld	r31, Z
    1fb0:	e0 2d       	mov	r30, r0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	ea 81       	ldd	r30, Y+2	; 0x02
    1fba:	fb 81       	ldd	r31, Y+3	; 0x03
    1fbc:	81 81       	ldd	r24, Z+1	; 0x01
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <GPIO_readPinLogic+0x54>
    1fc6:	55 95       	asr	r21
    1fc8:	47 95       	ror	r20
    1fca:	8a 95       	dec	r24
    1fcc:	e2 f7       	brpl	.-8      	; 0x1fc6 <GPIO_readPinLogic+0x50>
    1fce:	ca 01       	movw	r24, r20
    1fd0:	81 70       	andi	r24, 0x01	; 1
    1fd2:	ec 81       	ldd	r30, Y+4	; 0x04
    1fd4:	fd 81       	ldd	r31, Y+5	; 0x05
    1fd6:	80 83       	st	Z, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    1fd8:	19 82       	std	Y+1, r1	; 0x01
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <GPIO_readPinLogic+0x6a>
	} else {
		ret = GPIO_NULL_PTR;
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <GPIO_togglePinLogic>:

EN_GPIO_systemState_t
GPIO_togglePinLogic(ST_GPIO_cfg_t const *ST_ptrPinInstance) {
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <GPIO_togglePinLogic+0x6>
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	9b 83       	std	Y+3, r25	; 0x03
    2000:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01
	if (PTR_NULL != ST_ptrPinInstance) {
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	61 f1       	breq	.+88     	; 0x2066 <GPIO_togglePinLogic+0x74>
		TOG_BIT(*port_registers[ST_ptrPinInstance->portName],
    200e:	ea 81       	ldd	r30, Y+2	; 0x02
    2010:	fb 81       	ldd	r31, Y+3	; 0x03
    2012:	80 81       	ld	r24, Z
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	fc 01       	movw	r30, r24
    201e:	e0 59       	subi	r30, 0x90	; 144
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	a0 81       	ld	r26, Z
    2024:	b1 81       	ldd	r27, Z+1	; 0x01
    2026:	ea 81       	ldd	r30, Y+2	; 0x02
    2028:	fb 81       	ldd	r31, Y+3	; 0x03
    202a:	80 81       	ld	r24, Z
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	fc 01       	movw	r30, r24
    2036:	e0 59       	subi	r30, 0x90	; 144
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	01 90       	ld	r0, Z+
    203c:	f0 81       	ld	r31, Z
    203e:	e0 2d       	mov	r30, r0
    2040:	80 81       	ld	r24, Z
    2042:	48 2f       	mov	r20, r24
    2044:	ea 81       	ldd	r30, Y+2	; 0x02
    2046:	fb 81       	ldd	r31, Y+3	; 0x03
    2048:	81 81       	ldd	r24, Z+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	02 2e       	mov	r0, r18
    2054:	02 c0       	rjmp	.+4      	; 0x205a <GPIO_togglePinLogic+0x68>
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	0a 94       	dec	r0
    205c:	e2 f7       	brpl	.-8      	; 0x2056 <GPIO_togglePinLogic+0x64>
    205e:	84 27       	eor	r24, r20
    2060:	8c 93       	st	X, r24
				ST_ptrPinInstance->pinNumber);
		ret = GPIO_OK;
    2062:	19 82       	std	Y+1, r1	; 0x01
    2064:	02 c0       	rjmp	.+4      	; 0x206a <GPIO_togglePinLogic+0x78>
	} else {
		ret = GPIO_NULL_PTR;
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    206a:	89 81       	ldd	r24, Y+1	; 0x01
}
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <GPIO_initPort>:

EN_GPIO_systemState_t GPIO_initPort(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyPortDir,
		EN_GPIO_pinLogic_t copyPortLogic) {
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
    2080:	28 97       	sbiw	r28, 0x08	; 8
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	8a 83       	std	Y+2, r24	; 0x02
    208e:	6b 83       	std	Y+3, r22	; 0x03
    2090:	4c 83       	std	Y+4, r20	; 0x04
	EN_GPIO_systemState_t ret = GPIO_NOK;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	89 83       	std	Y+1, r24	; 0x01

	switch (copyPortDir) {
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	38 87       	std	Y+8, r19	; 0x08
    209e:	2f 83       	std	Y+7, r18	; 0x07
    20a0:	8f 81       	ldd	r24, Y+7	; 0x07
    20a2:	98 85       	ldd	r25, Y+8	; 0x08
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	31 f0       	breq	.+12     	; 0x20b4 <GPIO_initPort+0x3c>
    20a8:	2f 81       	ldd	r18, Y+7	; 0x07
    20aa:	38 85       	ldd	r19, Y+8	; 0x08
    20ac:	21 30       	cpi	r18, 0x01	; 1
    20ae:	31 05       	cpc	r19, r1
    20b0:	79 f0       	breq	.+30     	; 0x20d0 <GPIO_initPort+0x58>
    20b2:	1c c0       	rjmp	.+56     	; 0x20ec <GPIO_initPort+0x74>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	fc 01       	movw	r30, r24
    20c0:	e8 59       	subi	r30, 0x98	; 152
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	01 90       	ld	r0, Z+
    20c6:	f0 81       	ld	r31, Z
    20c8:	e0 2d       	mov	r30, r0
    20ca:	10 82       	st	Z, r1
		ret = GPIO_OK;
    20cc:	19 82       	std	Y+1, r1	; 0x01
    20ce:	0e c0       	rjmp	.+28     	; 0x20ec <GPIO_initPort+0x74>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	fc 01       	movw	r30, r24
    20dc:	e8 59       	subi	r30, 0x98	; 152
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	01 90       	ld	r0, Z+
    20e2:	f0 81       	ld	r31, Z
    20e4:	e0 2d       	mov	r30, r0
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	80 83       	st	Z, r24
		ret = GPIO_OK;
    20ea:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	switch (copyPortLogic) {
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	3e 83       	std	Y+6, r19	; 0x06
    20f4:	2d 83       	std	Y+5, r18	; 0x05
    20f6:	8d 81       	ldd	r24, Y+5	; 0x05
    20f8:	9e 81       	ldd	r25, Y+6	; 0x06
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	31 f0       	breq	.+12     	; 0x210a <GPIO_initPort+0x92>
    20fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2100:	3e 81       	ldd	r19, Y+6	; 0x06
    2102:	21 30       	cpi	r18, 0x01	; 1
    2104:	31 05       	cpc	r19, r1
    2106:	79 f0       	breq	.+30     	; 0x2126 <GPIO_initPort+0xae>
    2108:	1c c0       	rjmp	.+56     	; 0x2142 <GPIO_initPort+0xca>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	fc 01       	movw	r30, r24
    2116:	e0 59       	subi	r30, 0x90	; 144
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	01 90       	ld	r0, Z+
    211c:	f0 81       	ld	r31, Z
    211e:	e0 2d       	mov	r30, r0
    2120:	10 82       	st	Z, r1
		ret = GPIO_OK;
    2122:	19 82       	std	Y+1, r1	; 0x01
    2124:	0e c0       	rjmp	.+28     	; 0x2142 <GPIO_initPort+0xca>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	fc 01       	movw	r30, r24
    2132:	e0 59       	subi	r30, 0x90	; 144
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	01 90       	ld	r0, Z+
    2138:	f0 81       	ld	r31, Z
    213a:	e0 2d       	mov	r30, r0
    213c:	8f ef       	ldi	r24, 0xFF	; 255
    213e:	80 83       	st	Z, r24
		ret = GPIO_OK;
    2140:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    2142:	89 81       	ldd	r24, Y+1	; 0x01
}
    2144:	28 96       	adiw	r28, 0x08	; 8
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <GPIO_changePortDir>:

EN_GPIO_systemState_t GPIO_changePortDir(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinDir_t copyNewPortDir) {
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	00 d0       	rcall	.+0      	; 0x215c <GPIO_changePortDir+0x6>
    215c:	00 d0       	rcall	.+0      	; 0x215e <GPIO_changePortDir+0x8>
    215e:	0f 92       	push	r0
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	89 83       	std	Y+1, r24	; 0x01

	switch (copyNewPortDir) {
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	3d 83       	std	Y+5, r19	; 0x05
    2174:	2c 83       	std	Y+4, r18	; 0x04
    2176:	8c 81       	ldd	r24, Y+4	; 0x04
    2178:	9d 81       	ldd	r25, Y+5	; 0x05
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	31 f0       	breq	.+12     	; 0x218a <GPIO_changePortDir+0x34>
    217e:	2c 81       	ldd	r18, Y+4	; 0x04
    2180:	3d 81       	ldd	r19, Y+5	; 0x05
    2182:	21 30       	cpi	r18, 0x01	; 1
    2184:	31 05       	cpc	r19, r1
    2186:	79 f0       	breq	.+30     	; 0x21a6 <GPIO_changePortDir+0x50>
    2188:	1c c0       	rjmp	.+56     	; 0x21c2 <GPIO_changePortDir+0x6c>
	case GPIO_INPUT: {
		*ddr_registers[copyPortName] = 0x00;
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	fc 01       	movw	r30, r24
    2196:	e8 59       	subi	r30, 0x98	; 152
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	01 90       	ld	r0, Z+
    219c:	f0 81       	ld	r31, Z
    219e:	e0 2d       	mov	r30, r0
    21a0:	10 82       	st	Z, r1
		ret = GPIO_OK;
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	0e c0       	rjmp	.+28     	; 0x21c2 <GPIO_changePortDir+0x6c>
		break;
	}
	case GPIO_OUTPUT: {
		*ddr_registers[copyPortName] = 0xFF;
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	fc 01       	movw	r30, r24
    21b2:	e8 59       	subi	r30, 0x98	; 152
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	01 90       	ld	r0, Z+
    21b8:	f0 81       	ld	r31, Z
    21ba:	e0 2d       	mov	r30, r0
    21bc:	8f ef       	ldi	r24, 0xFF	; 255
    21be:	80 83       	st	Z, r24
		ret = GPIO_OK;
    21c0:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <GPIO_writePortLogic>:

EN_GPIO_systemState_t GPIO_writePortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t copyNewPortLogic) {
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	00 d0       	rcall	.+0      	; 0x21da <GPIO_writePortLogic+0x6>
    21da:	00 d0       	rcall	.+0      	; 0x21dc <GPIO_writePortLogic+0x8>
    21dc:	0f 92       	push	r0
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
    21e2:	8a 83       	std	Y+2, r24	; 0x02
    21e4:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	89 83       	std	Y+1, r24	; 0x01
	switch (copyNewPortLogic) {
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	3d 83       	std	Y+5, r19	; 0x05
    21f2:	2c 83       	std	Y+4, r18	; 0x04
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	9d 81       	ldd	r25, Y+5	; 0x05
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	31 f0       	breq	.+12     	; 0x2208 <GPIO_writePortLogic+0x34>
    21fc:	2c 81       	ldd	r18, Y+4	; 0x04
    21fe:	3d 81       	ldd	r19, Y+5	; 0x05
    2200:	21 30       	cpi	r18, 0x01	; 1
    2202:	31 05       	cpc	r19, r1
    2204:	79 f0       	breq	.+30     	; 0x2224 <GPIO_writePortLogic+0x50>
    2206:	1c c0       	rjmp	.+56     	; 0x2240 <GPIO_writePortLogic+0x6c>
	case GPIO_LOW: {
		*port_registers[copyPortName] = 0x00;
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	fc 01       	movw	r30, r24
    2214:	e0 59       	subi	r30, 0x90	; 144
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	01 90       	ld	r0, Z+
    221a:	f0 81       	ld	r31, Z
    221c:	e0 2d       	mov	r30, r0
    221e:	10 82       	st	Z, r1
		ret = GPIO_OK;
    2220:	19 82       	std	Y+1, r1	; 0x01
    2222:	0e c0       	rjmp	.+28     	; 0x2240 <GPIO_writePortLogic+0x6c>
		break;
	}
	case GPIO_HIGH: {
		*port_registers[copyPortName] = 0xFF;
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	88 2f       	mov	r24, r24
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	fc 01       	movw	r30, r24
    2230:	e0 59       	subi	r30, 0x90	; 144
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	01 90       	ld	r0, Z+
    2236:	f0 81       	ld	r31, Z
    2238:	e0 2d       	mov	r30, r0
    223a:	8f ef       	ldi	r24, 0xFF	; 255
    223c:	80 83       	st	Z, r24
		ret = GPIO_OK;
    223e:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
	return ret;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <GPIO_readPortLogic>:

EN_GPIO_systemState_t
GPIO_readPortLogic(EN_GPIO_mcuPorts_t copyPortName,
		EN_GPIO_pinLogic_t *retCurrentPortLogic) {
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <GPIO_readPortLogic+0x6>
    2258:	00 d0       	rcall	.+0      	; 0x225a <GPIO_readPortLogic+0x8>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	8a 83       	std	Y+2, r24	; 0x02
    2260:	7c 83       	std	Y+4, r23	; 0x04
    2262:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t ret = GPIO_NOK;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	89 83       	std	Y+1, r24	; 0x01

	*retCurrentPortLogic = *pin_registers[copyPortName];
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	88 2f       	mov	r24, r24
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	88 0f       	add	r24, r24
    2270:	99 1f       	adc	r25, r25
    2272:	fc 01       	movw	r30, r24
    2274:	e8 58       	subi	r30, 0x88	; 136
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	01 90       	ld	r0, Z+
    227a:	f0 81       	ld	r31, Z
    227c:	e0 2d       	mov	r30, r0
    227e:	80 81       	ld	r24, Z
    2280:	eb 81       	ldd	r30, Y+3	; 0x03
    2282:	fc 81       	ldd	r31, Y+4	; 0x04
    2284:	80 83       	st	Z, r24
	ret = GPIO_OK;
    2286:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    2288:	89 81       	ldd	r24, Y+1	; 0x01
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <GPIO_togglePortLogic>:

EN_GPIO_systemState_t GPIO_togglePortLogic(EN_GPIO_mcuPorts_t copyPortName) {
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	00 d0       	rcall	.+0      	; 0x229e <GPIO_togglePortLogic+0x6>
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	8a 83       	std	Y+2, r24	; 0x02
	EN_GPIO_systemState_t ret = GPIO_NOK;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	89 83       	std	Y+1, r24	; 0x01
	*ddr_registers[copyPortName] ^= *ddr_registers[copyPortName];
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	88 0f       	add	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	fc 01       	movw	r30, r24
    22b4:	e8 59       	subi	r30, 0x98	; 152
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	a0 81       	ld	r26, Z
    22ba:	b1 81       	ldd	r27, Z+1	; 0x01
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	fc 01       	movw	r30, r24
    22c8:	e8 59       	subi	r30, 0x98	; 152
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	01 90       	ld	r0, Z+
    22ce:	f0 81       	ld	r31, Z
    22d0:	e0 2d       	mov	r30, r0
    22d2:	20 81       	ld	r18, Z
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	88 2f       	mov	r24, r24
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	fc 01       	movw	r30, r24
    22e0:	e8 59       	subi	r30, 0x98	; 152
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	01 90       	ld	r0, Z+
    22e6:	f0 81       	ld	r31, Z
    22e8:	e0 2d       	mov	r30, r0
    22ea:	80 81       	ld	r24, Z
    22ec:	82 27       	eor	r24, r18
    22ee:	8c 93       	st	X, r24
	ret = GPIO_OK;
    22f0:	19 82       	std	Y+1, r1	; 0x01
	return ret;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <GPIO_set4msbValue>:


EN_GPIO_systemState_t GPIO_set4msbValue(EN_GPIO_mcuPorts_t copyPortName,uint8_t value)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <GPIO_set4msbValue+0x6>
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	8a 83       	std	Y+2, r24	; 0x02
    230c:	6b 83       	std	Y+3, r22	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0x0F;
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	fc 01       	movw	r30, r24
    231e:	e0 59       	subi	r30, 0x90	; 144
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	a0 81       	ld	r26, Z
    2324:	b1 81       	ldd	r27, Z+1	; 0x01
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	fc 01       	movw	r30, r24
    2332:	e0 59       	subi	r30, 0x90	; 144
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	01 90       	ld	r0, Z+
    2338:	f0 81       	ld	r31, Z
    233a:	e0 2d       	mov	r30, r0
    233c:	80 81       	ld	r24, Z
    233e:	8f 70       	andi	r24, 0x0F	; 15
    2340:	8c 93       	st	X, r24
	*port_registers[copyPortName] |= value<<4;
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	88 2f       	mov	r24, r24
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	fc 01       	movw	r30, r24
    234e:	e0 59       	subi	r30, 0x90	; 144
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	a0 81       	ld	r26, Z
    2354:	b1 81       	ldd	r27, Z+1	; 0x01
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	88 2f       	mov	r24, r24
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	fc 01       	movw	r30, r24
    2362:	e0 59       	subi	r30, 0x90	; 144
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	01 90       	ld	r0, Z+
    2368:	f0 81       	ld	r31, Z
    236a:	e0 2d       	mov	r30, r0
    236c:	80 81       	ld	r24, Z
    236e:	28 2f       	mov	r18, r24
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	88 2f       	mov	r24, r24
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	82 95       	swap	r24
    2378:	92 95       	swap	r25
    237a:	90 7f       	andi	r25, 0xF0	; 240
    237c:	98 27       	eor	r25, r24
    237e:	80 7f       	andi	r24, 0xF0	; 240
    2380:	98 27       	eor	r25, r24
    2382:	82 2b       	or	r24, r18
    2384:	8c 93       	st	X, r24

	gpioRet = GPIO_OK;
    2386:	19 82       	std	Y+1, r1	; 0x01

	return gpioRet;
    2388:	89 81       	ldd	r24, Y+1	; 0x01
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <GPIO_SetPortValue>:

EN_GPIO_systemState_t GPIO_SetPortValue(EN_GPIO_mcuPorts_t copyPortName , uint32_t value)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	27 97       	sbiw	r28, 0x07	; 7
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	8a 83       	std	Y+2, r24	; 0x02
    23ac:	4b 83       	std	Y+3, r20	; 0x03
    23ae:	5c 83       	std	Y+4, r21	; 0x04
    23b0:	6d 83       	std	Y+5, r22	; 0x05
    23b2:	7e 83       	std	Y+6, r23	; 0x06
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	89 83       	std	Y+1, r24	; 0x01

	*port_registers[copyPortName] &= 0;
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	88 2f       	mov	r24, r24
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	fc 01       	movw	r30, r24
    23c4:	e0 59       	subi	r30, 0x90	; 144
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	01 90       	ld	r0, Z+
    23ca:	f0 81       	ld	r31, Z
    23cc:	e0 2d       	mov	r30, r0
    23ce:	80 81       	ld	r24, Z
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	88 2f       	mov	r24, r24
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	fc 01       	movw	r30, r24
    23dc:	e0 59       	subi	r30, 0x90	; 144
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	01 90       	ld	r0, Z+
    23e2:	f0 81       	ld	r31, Z
    23e4:	e0 2d       	mov	r30, r0
    23e6:	10 82       	st	Z, r1
	*port_registers[copyPortName] |= value;
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	88 2f       	mov	r24, r24
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	88 0f       	add	r24, r24
    23f0:	99 1f       	adc	r25, r25
    23f2:	fc 01       	movw	r30, r24
    23f4:	e0 59       	subi	r30, 0x90	; 144
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	a0 81       	ld	r26, Z
    23fa:	b1 81       	ldd	r27, Z+1	; 0x01
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	fc 01       	movw	r30, r24
    2408:	e0 59       	subi	r30, 0x90	; 144
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	01 90       	ld	r0, Z+
    240e:	f0 81       	ld	r31, Z
    2410:	e0 2d       	mov	r30, r0
    2412:	90 81       	ld	r25, Z
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	89 2b       	or	r24, r25
    2418:	8c 93       	st	X, r24
	gpioRet = GPIO_OK;
    241a:	19 82       	std	Y+1, r1	; 0x01
	return gpioRet;
    241c:	89 81       	ldd	r24, Y+1	; 0x01
}
    241e:	27 96       	adiw	r28, 0x07	; 7
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	de bf       	out	0x3e, r29	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	cd bf       	out	0x3d, r28	; 61
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <MGI_vGIE>:
/*************************************************************************/

#include "gi_interface.h"

void MGI_vGIE(void)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I_BIT);
    2438:	af e5       	ldi	r26, 0x5F	; 95
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	ef e5       	ldi	r30, 0x5F	; 95
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	80 68       	ori	r24, 0x80	; 128
    2444:	8c 93       	st	X, r24
}
    2446:	cf 91       	pop	r28
    2448:	df 91       	pop	r29
    244a:	08 95       	ret

0000244c <MGI_vGID>:

void MGI_vGID(void)
{
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,I_BIT);
    2454:	af e5       	ldi	r26, 0x5F	; 95
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	ef e5       	ldi	r30, 0x5F	; 95
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	8f 77       	andi	r24, 0x7F	; 127
    2460:	8c 93       	st	X, r24
}
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <exti0SetHandlerToAction>:
static void(*ptr_exti0IsrAction)(void) = PTR_NULL;
static void(*ptr_exti1IsrAction)(void) = PTR_NULL;
static void(*ptr_exti2IsrAction)(void) = PTR_NULL;

static EN_MEXTI_systemState_t exti0SetHandlerToAction(void(*ptr_Handler)(void))
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <exti0SetHandlerToAction+0x6>
    246e:	0f 92       	push	r0
    2470:	cd b7       	in	r28, 0x3d	; 61
    2472:	de b7       	in	r29, 0x3e	; 62
    2474:	9b 83       	std	Y+3, r25	; 0x03
    2476:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ptr_Handler)
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	9b 81       	ldd	r25, Y+3	; 0x03
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	41 f0       	breq	.+16     	; 0x2494 <exti0SetHandlerToAction+0x2c>
	{
		ptr_exti0IsrAction = ptr_Handler;
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	90 93 4b 01 	sts	0x014B, r25
    248c:	80 93 4a 01 	sts	0x014A, r24
		extiRet = MEXTI_OK;
    2490:	19 82       	std	Y+1, r1	; 0x01
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <exti0SetHandlerToAction+0x30>
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    2494:	82 e0       	ldi	r24, 0x02	; 2
    2496:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    2498:	89 81       	ldd	r24, Y+1	; 0x01
}
    249a:	0f 90       	pop	r0
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	08 95       	ret

000024a6 <exti1SetHandlerToAction>:

static EN_MEXTI_systemState_t exti1SetHandlerToAction(void(*ptr_Handler)(void))
{
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <exti1SetHandlerToAction+0x6>
    24ac:	0f 92       	push	r0
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	9b 83       	std	Y+3, r25	; 0x03
    24b4:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ptr_Handler)
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	41 f0       	breq	.+16     	; 0x24d2 <exti1SetHandlerToAction+0x2c>
	{
		ptr_exti1IsrAction = ptr_Handler;
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	90 93 4d 01 	sts	0x014D, r25
    24ca:	80 93 4c 01 	sts	0x014C, r24
		extiRet = MEXTI_OK;
    24ce:	19 82       	std	Y+1, r1	; 0x01
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <exti1SetHandlerToAction+0x30>
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <exti2SetHandlerToAction>:

static EN_MEXTI_systemState_t exti2SetHandlerToAction(void(*ptr_Handler)(void))
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <exti2SetHandlerToAction+0x6>
    24ea:	0f 92       	push	r0
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	9b 83       	std	Y+3, r25	; 0x03
    24f2:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ptr_Handler)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	41 f0       	breq	.+16     	; 0x2510 <exti2SetHandlerToAction+0x2c>
	{
		ptr_exti2IsrAction = ptr_Handler;
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	9b 81       	ldd	r25, Y+3	; 0x03
    2504:	90 93 4f 01 	sts	0x014F, r25
    2508:	80 93 4e 01 	sts	0x014E, r24
		extiRet = MEXTI_OK;
    250c:	19 82       	std	Y+1, r1	; 0x01
    250e:	02 c0       	rjmp	.+4      	; 0x2514 <exti2SetHandlerToAction+0x30>
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    2510:	82 e0       	ldi	r24, 0x02	; 2
    2512:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    2514:	89 81       	ldd	r24, Y+1	; 0x01
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <MEXTI_initExti>:



EN_MEXTI_systemState_t MEXTI_initExti(ST_MEXTI_cfg_t const *ST_ptrExtiCfgInstance)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	00 d0       	rcall	.+0      	; 0x2528 <MEXTI_initExti+0x6>
    2528:	00 d0       	rcall	.+0      	; 0x252a <MEXTI_initExti+0x8>
    252a:	0f 92       	push	r0
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	9b 83       	std	Y+3, r25	; 0x03
    2532:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrExtiCfgInstance)
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	9b 81       	ldd	r25, Y+3	; 0x03
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	09 f4       	brne	.+2      	; 0x2542 <MEXTI_initExti+0x20>
    2540:	2b c1       	rjmp	.+598    	; 0x2798 <MEXTI_initExti+0x276>
	{
		switch(ST_ptrExtiCfgInstance->numberOfExti)
    2542:	ea 81       	ldd	r30, Y+2	; 0x02
    2544:	fb 81       	ldd	r31, Y+3	; 0x03
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	3d 83       	std	Y+5, r19	; 0x05
    254e:	2c 83       	std	Y+4, r18	; 0x04
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	9d 81       	ldd	r25, Y+5	; 0x05
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	91 05       	cpc	r25, r1
    2558:	09 f4       	brne	.+2      	; 0x255c <MEXTI_initExti+0x3a>
    255a:	7e c0       	rjmp	.+252    	; 0x2658 <MEXTI_initExti+0x136>
    255c:	2c 81       	ldd	r18, Y+4	; 0x04
    255e:	3d 81       	ldd	r19, Y+5	; 0x05
    2560:	22 30       	cpi	r18, 0x02	; 2
    2562:	31 05       	cpc	r19, r1
    2564:	09 f4       	brne	.+2      	; 0x2568 <MEXTI_initExti+0x46>
    2566:	eb c0       	rjmp	.+470    	; 0x273e <MEXTI_initExti+0x21c>
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	00 97       	sbiw	r24, 0x00	; 0
    256e:	09 f0       	breq	.+2      	; 0x2572 <MEXTI_initExti+0x50>
    2570:	15 c1       	rjmp	.+554    	; 0x279c <MEXTI_initExti+0x27a>
		{
		case MEXTI_EXTI0_INTERRUPT:
		{

			if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_LOW_LEVEL_SENSE_CONTROL)
    2572:	ea 81       	ldd	r30, Y+2	; 0x02
    2574:	fb 81       	ldd	r31, Y+3	; 0x03
    2576:	83 81       	ldd	r24, Z+3	; 0x03
    2578:	88 23       	and	r24, r24
    257a:	b9 f4       	brne	.+46     	; 0x25aa <MEXTI_initExti+0x88>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    257c:	ab e5       	ldi	r26, 0x5B	; 91
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	eb e5       	ldi	r30, 0x5B	; 91
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8f 7b       	andi	r24, 0xBF	; 191
    2588:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC01_BIT);
    258a:	a5 e5       	ldi	r26, 0x55	; 85
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e5 e5       	ldi	r30, 0x55	; 85
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	8d 7f       	andi	r24, 0xFD	; 253
    2596:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC00_BIT);
    2598:	a5 e5       	ldi	r26, 0x55	; 85
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e5       	ldi	r30, 0x55	; 85
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	8e 7f       	andi	r24, 0xFE	; 254
    25a4:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    25a6:	19 82       	std	Y+1, r1	; 0x01
    25a8:	f9 c0       	rjmp	.+498    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_ANY_LOGICAL_SENSE_CONTROL)
    25aa:	ea 81       	ldd	r30, Y+2	; 0x02
    25ac:	fb 81       	ldd	r31, Y+3	; 0x03
    25ae:	83 81       	ldd	r24, Z+3	; 0x03
    25b0:	81 30       	cpi	r24, 0x01	; 1
    25b2:	b9 f4       	brne	.+46     	; 0x25e2 <MEXTI_initExti+0xc0>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    25b4:	ab e5       	ldi	r26, 0x5B	; 91
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	eb e5       	ldi	r30, 0x5B	; 91
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8f 7b       	andi	r24, 0xBF	; 191
    25c0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC01_BIT);
    25c2:	a5 e5       	ldi	r26, 0x55	; 85
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	e5 e5       	ldi	r30, 0x55	; 85
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8d 7f       	andi	r24, 0xFD	; 253
    25ce:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC00_BIT);
    25d0:	a5 e5       	ldi	r26, 0x55	; 85
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e5 e5       	ldi	r30, 0x55	; 85
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	81 60       	ori	r24, 0x01	; 1
    25dc:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    25de:	19 82       	std	Y+1, r1	; 0x01
    25e0:	dd c0       	rjmp	.+442    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_FALLING_EDGE_SENSE_CONTROL)
    25e2:	ea 81       	ldd	r30, Y+2	; 0x02
    25e4:	fb 81       	ldd	r31, Y+3	; 0x03
    25e6:	83 81       	ldd	r24, Z+3	; 0x03
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	b9 f4       	brne	.+46     	; 0x261a <MEXTI_initExti+0xf8>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    25ec:	ab e5       	ldi	r26, 0x5B	; 91
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	eb e5       	ldi	r30, 0x5B	; 91
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	8f 7b       	andi	r24, 0xBF	; 191
    25f8:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC01_BIT);
    25fa:	a5 e5       	ldi	r26, 0x55	; 85
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e5 e5       	ldi	r30, 0x55	; 85
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	82 60       	ori	r24, 0x02	; 2
    2606:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC00_BIT);
    2608:	a5 e5       	ldi	r26, 0x55	; 85
    260a:	b0 e0       	ldi	r27, 0x00	; 0
    260c:	e5 e5       	ldi	r30, 0x55	; 85
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	80 81       	ld	r24, Z
    2612:	8e 7f       	andi	r24, 0xFE	; 254
    2614:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    2616:	19 82       	std	Y+1, r1	; 0x01
    2618:	c1 c0       	rjmp	.+386    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_RISING_EDGE_SENSE_CONTROL)
    261a:	ea 81       	ldd	r30, Y+2	; 0x02
    261c:	fb 81       	ldd	r31, Y+3	; 0x03
    261e:	83 81       	ldd	r24, Z+3	; 0x03
    2620:	83 30       	cpi	r24, 0x03	; 3
    2622:	b9 f4       	brne	.+46     	; 0x2652 <MEXTI_initExti+0x130>
			{
				CLR_BIT(GICR_REG,INT0_BIT);
    2624:	ab e5       	ldi	r26, 0x5B	; 91
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	eb e5       	ldi	r30, 0x5B	; 91
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	8f 7b       	andi	r24, 0xBF	; 191
    2630:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC01_BIT);
    2632:	a5 e5       	ldi	r26, 0x55	; 85
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e5 e5       	ldi	r30, 0x55	; 85
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	82 60       	ori	r24, 0x02	; 2
    263e:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC00_BIT);
    2640:	a5 e5       	ldi	r26, 0x55	; 85
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e5 e5       	ldi	r30, 0x55	; 85
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	81 60       	ori	r24, 0x01	; 1
    264c:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    264e:	19 82       	std	Y+1, r1	; 0x01
    2650:	a5 c0       	rjmp	.+330    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else
			{
				extiRet = MEXTI_INVALID_PARAMTER;
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	a2 c0       	rjmp	.+324    	; 0x279c <MEXTI_initExti+0x27a>
			break;
		}
		case MEXTI_EXTI1_INTERRUPT:
		{

			if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_LOW_LEVEL_SENSE_CONTROL)
    2658:	ea 81       	ldd	r30, Y+2	; 0x02
    265a:	fb 81       	ldd	r31, Y+3	; 0x03
    265c:	83 81       	ldd	r24, Z+3	; 0x03
    265e:	88 23       	and	r24, r24
    2660:	b9 f4       	brne	.+46     	; 0x2690 <MEXTI_initExti+0x16e>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    2662:	ab e5       	ldi	r26, 0x5B	; 91
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	eb e5       	ldi	r30, 0x5B	; 91
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8f 77       	andi	r24, 0x7F	; 127
    266e:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC11_BIT);
    2670:	a5 e5       	ldi	r26, 0x55	; 85
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e5 e5       	ldi	r30, 0x55	; 85
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	87 7f       	andi	r24, 0xF7	; 247
    267c:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC10_BIT);
    267e:	a5 e5       	ldi	r26, 0x55	; 85
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e5 e5       	ldi	r30, 0x55	; 85
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	8b 7f       	andi	r24, 0xFB	; 251
    268a:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    268c:	19 82       	std	Y+1, r1	; 0x01
    268e:	86 c0       	rjmp	.+268    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_ANY_LOGICAL_SENSE_CONTROL)
    2690:	ea 81       	ldd	r30, Y+2	; 0x02
    2692:	fb 81       	ldd	r31, Y+3	; 0x03
    2694:	83 81       	ldd	r24, Z+3	; 0x03
    2696:	81 30       	cpi	r24, 0x01	; 1
    2698:	b9 f4       	brne	.+46     	; 0x26c8 <MEXTI_initExti+0x1a6>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    269a:	ab e5       	ldi	r26, 0x5B	; 91
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	eb e5       	ldi	r30, 0x5B	; 91
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	8f 77       	andi	r24, 0x7F	; 127
    26a6:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC11_BIT);
    26a8:	a5 e5       	ldi	r26, 0x55	; 85
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e5 e5       	ldi	r30, 0x55	; 85
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	87 7f       	andi	r24, 0xF7	; 247
    26b4:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC10_BIT);
    26b6:	a5 e5       	ldi	r26, 0x55	; 85
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e5 e5       	ldi	r30, 0x55	; 85
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	84 60       	ori	r24, 0x04	; 4
    26c2:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    26c4:	19 82       	std	Y+1, r1	; 0x01
    26c6:	6a c0       	rjmp	.+212    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_FALLING_EDGE_SENSE_CONTROL)
    26c8:	ea 81       	ldd	r30, Y+2	; 0x02
    26ca:	fb 81       	ldd	r31, Y+3	; 0x03
    26cc:	83 81       	ldd	r24, Z+3	; 0x03
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	b9 f4       	brne	.+46     	; 0x2700 <MEXTI_initExti+0x1de>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    26d2:	ab e5       	ldi	r26, 0x5B	; 91
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	eb e5       	ldi	r30, 0x5B	; 91
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	8f 77       	andi	r24, 0x7F	; 127
    26de:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC11_BIT);
    26e0:	a5 e5       	ldi	r26, 0x55	; 85
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e5 e5       	ldi	r30, 0x55	; 85
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	88 60       	ori	r24, 0x08	; 8
    26ec:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG,ISC10_BIT);
    26ee:	a5 e5       	ldi	r26, 0x55	; 85
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e5 e5       	ldi	r30, 0x55	; 85
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	8b 7f       	andi	r24, 0xFB	; 251
    26fa:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    26fc:	19 82       	std	Y+1, r1	; 0x01
    26fe:	4e c0       	rjmp	.+156    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_RISING_EDGE_SENSE_CONTROL)
    2700:	ea 81       	ldd	r30, Y+2	; 0x02
    2702:	fb 81       	ldd	r31, Y+3	; 0x03
    2704:	83 81       	ldd	r24, Z+3	; 0x03
    2706:	83 30       	cpi	r24, 0x03	; 3
    2708:	b9 f4       	brne	.+46     	; 0x2738 <MEXTI_initExti+0x216>
			{
				CLR_BIT(GICR_REG,INT1_BIT);
    270a:	ab e5       	ldi	r26, 0x5B	; 91
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	eb e5       	ldi	r30, 0x5B	; 91
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	8f 77       	andi	r24, 0x7F	; 127
    2716:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC11_BIT);
    2718:	a5 e5       	ldi	r26, 0x55	; 85
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	e5 e5       	ldi	r30, 0x55	; 85
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 81       	ld	r24, Z
    2722:	88 60       	ori	r24, 0x08	; 8
    2724:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG,ISC10_BIT);
    2726:	a5 e5       	ldi	r26, 0x55	; 85
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e5 e5       	ldi	r30, 0x55	; 85
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	84 60       	ori	r24, 0x04	; 4
    2732:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    2734:	19 82       	std	Y+1, r1	; 0x01
    2736:	32 c0       	rjmp	.+100    	; 0x279c <MEXTI_initExti+0x27a>
			}
			else
			{
				extiRet = MEXTI_INVALID_PARAMTER;
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	2f c0       	rjmp	.+94     	; 0x279c <MEXTI_initExti+0x27a>
		}

		case MEXTI_EXTI2_INTERRUPT:
		{

			if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_FALLING_EDGE_SENSE_CONTROL)
    273e:	ea 81       	ldd	r30, Y+2	; 0x02
    2740:	fb 81       	ldd	r31, Y+3	; 0x03
    2742:	83 81       	ldd	r24, Z+3	; 0x03
    2744:	82 30       	cpi	r24, 0x02	; 2
    2746:	81 f4       	brne	.+32     	; 0x2768 <MEXTI_initExti+0x246>
			{
				CLR_BIT(GICR_REG,INT2_BIT);
    2748:	ab e5       	ldi	r26, 0x5B	; 91
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	eb e5       	ldi	r30, 0x5B	; 91
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	8f 7d       	andi	r24, 0xDF	; 223
    2754:	8c 93       	st	X, r24
				CLR_BIT(MCUCSR_REG,ISC2_BIT);
    2756:	a4 e5       	ldi	r26, 0x54	; 84
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e4 e5       	ldi	r30, 0x54	; 84
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	80 81       	ld	r24, Z
    2760:	8f 7b       	andi	r24, 0xBF	; 191
    2762:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    2764:	19 82       	std	Y+1, r1	; 0x01
    2766:	1a c0       	rjmp	.+52     	; 0x279c <MEXTI_initExti+0x27a>
			}
			else if(ST_ptrExtiCfgInstance->extiTriggerSence == MEXTI_RISING_EDGE_SENSE_CONTROL)
    2768:	ea 81       	ldd	r30, Y+2	; 0x02
    276a:	fb 81       	ldd	r31, Y+3	; 0x03
    276c:	83 81       	ldd	r24, Z+3	; 0x03
    276e:	83 30       	cpi	r24, 0x03	; 3
    2770:	81 f4       	brne	.+32     	; 0x2792 <MEXTI_initExti+0x270>
			{
				SET_BIT(GICR_REG,INT2_BIT);
    2772:	ab e5       	ldi	r26, 0x5B	; 91
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	eb e5       	ldi	r30, 0x5B	; 91
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	80 62       	ori	r24, 0x20	; 32
    277e:	8c 93       	st	X, r24
				SET_BIT(MCUCSR_REG,ISC2_BIT);
    2780:	a4 e5       	ldi	r26, 0x54	; 84
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e4 e5       	ldi	r30, 0x54	; 84
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	80 64       	ori	r24, 0x40	; 64
    278c:	8c 93       	st	X, r24
				extiRet = MEXTI_OK;
    278e:	19 82       	std	Y+1, r1	; 0x01
    2790:	05 c0       	rjmp	.+10     	; 0x279c <MEXTI_initExti+0x27a>
			}
			else
			{
				extiRet = MEXTI_INVALID_PARAMTER;
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	02 c0       	rjmp	.+4      	; 0x279c <MEXTI_initExti+0x27a>
		}
		}
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    2798:	82 e0       	ldi	r24, 0x02	; 2
    279a:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <MEXTI_enableExti>:

EN_MEXTI_systemState_t MEXTI_enableExti(ST_MEXTI_cfg_t const *ST_ptrExtiCfgInstance)
{
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	00 d0       	rcall	.+0      	; 0x27b4 <MEXTI_enableExti+0x6>
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <MEXTI_enableExti+0x8>
    27b6:	0f 92       	push	r0
    27b8:	cd b7       	in	r28, 0x3d	; 61
    27ba:	de b7       	in	r29, 0x3e	; 62
    27bc:	9b 83       	std	Y+3, r25	; 0x03
    27be:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrExtiCfgInstance)
    27c4:	8a 81       	ldd	r24, Y+2	; 0x02
    27c6:	9b 81       	ldd	r25, Y+3	; 0x03
    27c8:	00 97       	sbiw	r24, 0x00	; 0
    27ca:	09 f4       	brne	.+2      	; 0x27ce <MEXTI_enableExti+0x20>
    27cc:	42 c0       	rjmp	.+132    	; 0x2852 <MEXTI_enableExti+0xa4>
	{
		switch(ST_ptrExtiCfgInstance->numberOfExti)
    27ce:	ea 81       	ldd	r30, Y+2	; 0x02
    27d0:	fb 81       	ldd	r31, Y+3	; 0x03
    27d2:	82 81       	ldd	r24, Z+2	; 0x02
    27d4:	28 2f       	mov	r18, r24
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	3d 83       	std	Y+5, r19	; 0x05
    27da:	2c 83       	std	Y+4, r18	; 0x04
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	9d 81       	ldd	r25, Y+5	; 0x05
    27e0:	81 30       	cpi	r24, 0x01	; 1
    27e2:	91 05       	cpc	r25, r1
    27e4:	c1 f0       	breq	.+48     	; 0x2816 <MEXTI_enableExti+0x68>
    27e6:	2c 81       	ldd	r18, Y+4	; 0x04
    27e8:	3d 81       	ldd	r19, Y+5	; 0x05
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	11 f1       	breq	.+68     	; 0x2834 <MEXTI_enableExti+0x86>
    27f0:	8c 81       	ldd	r24, Y+4	; 0x04
    27f2:	9d 81       	ldd	r25, Y+5	; 0x05
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	79 f5       	brne	.+94     	; 0x2856 <MEXTI_enableExti+0xa8>
		{
		case MEXTI_EXTI0_INTERRUPT:
		{
			SET_BIT(GICR_REG,INT0_BIT);
    27f8:	ab e5       	ldi	r26, 0x5B	; 91
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	eb e5       	ldi	r30, 0x5B	; 91
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	80 64       	ori	r24, 0x40	; 64
    2804:	8c 93       	st	X, r24
			extiRet = exti0SetHandlerToAction(ST_ptrExtiCfgInstance->MEXTI_ptrCallbackHandler);
    2806:	ea 81       	ldd	r30, Y+2	; 0x02
    2808:	fb 81       	ldd	r31, Y+3	; 0x03
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	0e 94 34 12 	call	0x2468	; 0x2468 <exti0SetHandlerToAction>
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	20 c0       	rjmp	.+64     	; 0x2856 <MEXTI_enableExti+0xa8>
			break;
		}
		case MEXTI_EXTI1_INTERRUPT:
		{
			SET_BIT(GICR_REG,INT1_BIT);
    2816:	ab e5       	ldi	r26, 0x5B	; 91
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	eb e5       	ldi	r30, 0x5B	; 91
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 68       	ori	r24, 0x80	; 128
    2822:	8c 93       	st	X, r24
			extiRet = exti1SetHandlerToAction(ST_ptrExtiCfgInstance->MEXTI_ptrCallbackHandler);
    2824:	ea 81       	ldd	r30, Y+2	; 0x02
    2826:	fb 81       	ldd	r31, Y+3	; 0x03
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <exti1SetHandlerToAction>
    2830:	89 83       	std	Y+1, r24	; 0x01
    2832:	11 c0       	rjmp	.+34     	; 0x2856 <MEXTI_enableExti+0xa8>
			break;
		}
		case MEXTI_EXTI2_INTERRUPT:
		{
			SET_BIT(GICR_REG,INT2_BIT);
    2834:	ab e5       	ldi	r26, 0x5B	; 91
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	eb e5       	ldi	r30, 0x5B	; 91
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	80 62       	ori	r24, 0x20	; 32
    2840:	8c 93       	st	X, r24
			extiRet = exti2SetHandlerToAction(ST_ptrExtiCfgInstance->MEXTI_ptrCallbackHandler);
    2842:	ea 81       	ldd	r30, Y+2	; 0x02
    2844:	fb 81       	ldd	r31, Y+3	; 0x03
    2846:	80 81       	ld	r24, Z
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <exti2SetHandlerToAction>
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <MEXTI_enableExti+0xa8>
		}
		}
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	89 83       	std	Y+1, r24	; 0x01
	}
	return extiRet;
    2856:	89 81       	ldd	r24, Y+1	; 0x01
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <MEXTI_disableExti>:

EN_MEXTI_systemState_t MEXTI_disableExti(ST_MEXTI_cfg_t const *ST_ptrExtiCfgInstance)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	00 d0       	rcall	.+0      	; 0x286e <MEXTI_disableExti+0x6>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <MEXTI_disableExti+0x8>
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9b 83       	std	Y+3, r25	; 0x03
    2878:	8a 83       	std	Y+2, r24	; 0x02
	EN_MEXTI_systemState_t extiRet = MEXTI_NOK;
    287a:	81 e0       	ldi	r24, 0x01	; 1
    287c:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrExtiCfgInstance)
    287e:	8a 81       	ldd	r24, Y+2	; 0x02
    2880:	9b 81       	ldd	r25, Y+3	; 0x03
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	81 f1       	breq	.+96     	; 0x28e6 <MEXTI_disableExti+0x7e>
	{
		switch(ST_ptrExtiCfgInstance->numberOfExti)
    2886:	ea 81       	ldd	r30, Y+2	; 0x02
    2888:	fb 81       	ldd	r31, Y+3	; 0x03
    288a:	82 81       	ldd	r24, Z+2	; 0x02
    288c:	28 2f       	mov	r18, r24
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	3d 83       	std	Y+5, r19	; 0x05
    2892:	2c 83       	std	Y+4, r18	; 0x04
    2894:	8c 81       	ldd	r24, Y+4	; 0x04
    2896:	9d 81       	ldd	r25, Y+5	; 0x05
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	91 05       	cpc	r25, r1
    289c:	91 f0       	breq	.+36     	; 0x28c2 <MEXTI_disableExti+0x5a>
    289e:	2c 81       	ldd	r18, Y+4	; 0x04
    28a0:	3d 81       	ldd	r19, Y+5	; 0x05
    28a2:	22 30       	cpi	r18, 0x02	; 2
    28a4:	31 05       	cpc	r19, r1
    28a6:	b1 f0       	breq	.+44     	; 0x28d4 <MEXTI_disableExti+0x6c>
    28a8:	8c 81       	ldd	r24, Y+4	; 0x04
    28aa:	9d 81       	ldd	r25, Y+5	; 0x05
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	e9 f4       	brne	.+58     	; 0x28ea <MEXTI_disableExti+0x82>
		{
		case MEXTI_EXTI0_INTERRUPT:
		{
			CLR_BIT(GICR_REG,INT0_BIT);
    28b0:	ab e5       	ldi	r26, 0x5B	; 91
    28b2:	b0 e0       	ldi	r27, 0x00	; 0
    28b4:	eb e5       	ldi	r30, 0x5B	; 91
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	8f 7b       	andi	r24, 0xBF	; 191
    28bc:	8c 93       	st	X, r24
			extiRet = MEXTI_OK;
    28be:	19 82       	std	Y+1, r1	; 0x01
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <MEXTI_disableExti+0x82>
			break;
		}
		case MEXTI_EXTI1_INTERRUPT:
		{
			CLR_BIT(GICR_REG,INT1_BIT);
    28c2:	ab e5       	ldi	r26, 0x5B	; 91
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	eb e5       	ldi	r30, 0x5B	; 91
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	8f 77       	andi	r24, 0x7F	; 127
    28ce:	8c 93       	st	X, r24
			extiRet = MEXTI_OK;
    28d0:	19 82       	std	Y+1, r1	; 0x01
    28d2:	0b c0       	rjmp	.+22     	; 0x28ea <MEXTI_disableExti+0x82>
			break;
		}
		case MEXTI_EXTI2_INTERRUPT:
		{
			CLR_BIT(GICR_REG,INT2_BIT);
    28d4:	ab e5       	ldi	r26, 0x5B	; 91
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	eb e5       	ldi	r30, 0x5B	; 91
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	8f 7d       	andi	r24, 0xDF	; 223
    28e0:	8c 93       	st	X, r24
			extiRet = MEXTI_OK;
    28e2:	19 82       	std	Y+1, r1	; 0x01
    28e4:	02 c0       	rjmp	.+4      	; 0x28ea <MEXTI_disableExti+0x82>
		}
		}
	}
	else
	{
		extiRet = MEXTI_PTR_NULL;
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	89 83       	std	Y+1, r24	; 0x01
	}

	return extiRet;
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	0f 90       	pop	r0
    28f6:	cf 91       	pop	r28
    28f8:	df 91       	pop	r29
    28fa:	08 95       	ret

000028fc <__vector_1>:


ISR(EXT_INT_0)
{
    28fc:	1f 92       	push	r1
    28fe:	0f 92       	push	r0
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	0f 92       	push	r0
    2904:	11 24       	eor	r1, r1
    2906:	2f 93       	push	r18
    2908:	3f 93       	push	r19
    290a:	4f 93       	push	r20
    290c:	5f 93       	push	r21
    290e:	6f 93       	push	r22
    2910:	7f 93       	push	r23
    2912:	8f 93       	push	r24
    2914:	9f 93       	push	r25
    2916:	af 93       	push	r26
    2918:	bf 93       	push	r27
    291a:	ef 93       	push	r30
    291c:	ff 93       	push	r31
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	cd b7       	in	r28, 0x3d	; 61
    2924:	de b7       	in	r29, 0x3e	; 62
	ptr_exti0IsrAction();
    2926:	e0 91 4a 01 	lds	r30, 0x014A
    292a:	f0 91 4b 01 	lds	r31, 0x014B
    292e:	09 95       	icall
}
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	ff 91       	pop	r31
    2936:	ef 91       	pop	r30
    2938:	bf 91       	pop	r27
    293a:	af 91       	pop	r26
    293c:	9f 91       	pop	r25
    293e:	8f 91       	pop	r24
    2940:	7f 91       	pop	r23
    2942:	6f 91       	pop	r22
    2944:	5f 91       	pop	r21
    2946:	4f 91       	pop	r20
    2948:	3f 91       	pop	r19
    294a:	2f 91       	pop	r18
    294c:	0f 90       	pop	r0
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	0f 90       	pop	r0
    2952:	1f 90       	pop	r1
    2954:	18 95       	reti

00002956 <__vector_2>:

ISR(EXT_INT_1)
{
    2956:	1f 92       	push	r1
    2958:	0f 92       	push	r0
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	0f 92       	push	r0
    295e:	11 24       	eor	r1, r1
    2960:	2f 93       	push	r18
    2962:	3f 93       	push	r19
    2964:	4f 93       	push	r20
    2966:	5f 93       	push	r21
    2968:	6f 93       	push	r22
    296a:	7f 93       	push	r23
    296c:	8f 93       	push	r24
    296e:	9f 93       	push	r25
    2970:	af 93       	push	r26
    2972:	bf 93       	push	r27
    2974:	ef 93       	push	r30
    2976:	ff 93       	push	r31
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
	ptr_exti1IsrAction();
    2980:	e0 91 4c 01 	lds	r30, 0x014C
    2984:	f0 91 4d 01 	lds	r31, 0x014D
    2988:	09 95       	icall
}
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	ff 91       	pop	r31
    2990:	ef 91       	pop	r30
    2992:	bf 91       	pop	r27
    2994:	af 91       	pop	r26
    2996:	9f 91       	pop	r25
    2998:	8f 91       	pop	r24
    299a:	7f 91       	pop	r23
    299c:	6f 91       	pop	r22
    299e:	5f 91       	pop	r21
    29a0:	4f 91       	pop	r20
    29a2:	3f 91       	pop	r19
    29a4:	2f 91       	pop	r18
    29a6:	0f 90       	pop	r0
    29a8:	0f be       	out	0x3f, r0	; 63
    29aa:	0f 90       	pop	r0
    29ac:	1f 90       	pop	r1
    29ae:	18 95       	reti

000029b0 <__vector_3>:

ISR(EXT_INT_2)
{
    29b0:	1f 92       	push	r1
    29b2:	0f 92       	push	r0
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	0f 92       	push	r0
    29b8:	11 24       	eor	r1, r1
    29ba:	2f 93       	push	r18
    29bc:	3f 93       	push	r19
    29be:	4f 93       	push	r20
    29c0:	5f 93       	push	r21
    29c2:	6f 93       	push	r22
    29c4:	7f 93       	push	r23
    29c6:	8f 93       	push	r24
    29c8:	9f 93       	push	r25
    29ca:	af 93       	push	r26
    29cc:	bf 93       	push	r27
    29ce:	ef 93       	push	r30
    29d0:	ff 93       	push	r31
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
	ptr_exti2IsrAction();
    29da:	e0 91 4e 01 	lds	r30, 0x014E
    29de:	f0 91 4f 01 	lds	r31, 0x014F
    29e2:	09 95       	icall
}
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	ff 91       	pop	r31
    29ea:	ef 91       	pop	r30
    29ec:	bf 91       	pop	r27
    29ee:	af 91       	pop	r26
    29f0:	9f 91       	pop	r25
    29f2:	8f 91       	pop	r24
    29f4:	7f 91       	pop	r23
    29f6:	6f 91       	pop	r22
    29f8:	5f 91       	pop	r21
    29fa:	4f 91       	pop	r20
    29fc:	3f 91       	pop	r19
    29fe:	2f 91       	pop	r18
    2a00:	0f 90       	pop	r0
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	0f 90       	pop	r0
    2a06:	1f 90       	pop	r1
    2a08:	18 95       	reti

00002a0a <MADC_init>:


static void(*ptrCallbackHandler)(void) = PTR_NULL;

EN_MADC_systeamState_t MADC_init(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    2a0a:	df 93       	push	r29
    2a0c:	cf 93       	push	r28
    2a0e:	00 d0       	rcall	.+0      	; 0x2a10 <MADC_init+0x6>
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <MADC_init+0x8>
    2a12:	0f 92       	push	r0
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	9d 83       	std	Y+5, r25	; 0x05
    2a1a:	8c 83       	std	Y+4, r24	; 0x04
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	8b 83       	std	Y+3, r24	; 0x03

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    2a20:	8c 81       	ldd	r24, Y+4	; 0x04
    2a22:	9d 81       	ldd	r25, Y+5	; 0x05
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <MADC_init+0x20>
    2a28:	67 c0       	rjmp	.+206    	; 0x2af8 <MADC_init+0xee>
	{
		uint8_t ADMUX_REG_TEMP = 0;
    2a2a:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t ADCSRA_REG_TEMP = 0;
    2a2c:	19 82       	std	Y+1, r1	; 0x01

		// disable adc
		MADC_disable();
    2a2e:	a6 e2       	ldi	r26, 0x26	; 38
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e6 e2       	ldi	r30, 0x26	; 38
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 77       	andi	r24, 0x7F	; 127
    2a3a:	8c 93       	st	X, r24

		// select vref
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0x3F)   | (ST_ptrAdcCfgInstance_t->referenceSource << REFS0_BIT ));
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	28 2f       	mov	r18, r24
    2a40:	2f 73       	andi	r18, 0x3F	; 63
    2a42:	ec 81       	ldd	r30, Y+4	; 0x04
    2a44:	fd 81       	ldd	r31, Y+5	; 0x05
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	88 2f       	mov	r24, r24
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	00 24       	eor	r0, r0
    2a4e:	96 95       	lsr	r25
    2a50:	87 95       	ror	r24
    2a52:	07 94       	ror	r0
    2a54:	96 95       	lsr	r25
    2a56:	87 95       	ror	r24
    2a58:	07 94       	ror	r0
    2a5a:	98 2f       	mov	r25, r24
    2a5c:	80 2d       	mov	r24, r0
    2a5e:	82 2b       	or	r24, r18
    2a60:	8a 83       	std	Y+2, r24	; 0x02
		// select adjust result
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0xDF)   | (ST_ptrAdcCfgInstance_t->resultAdjust << ADLAR_BIT));
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	28 2f       	mov	r18, r24
    2a66:	2f 7d       	andi	r18, 0xDF	; 223
    2a68:	ec 81       	ldd	r30, Y+4	; 0x04
    2a6a:	fd 81       	ldd	r31, Y+5	; 0x05
    2a6c:	83 81       	ldd	r24, Z+3	; 0x03
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	82 95       	swap	r24
    2a78:	92 95       	swap	r25
    2a7a:	90 7f       	andi	r25, 0xF0	; 240
    2a7c:	98 27       	eor	r25, r24
    2a7e:	80 7f       	andi	r24, 0xF0	; 240
    2a80:	98 27       	eor	r25, r24
    2a82:	82 2b       	or	r24, r18
    2a84:	8a 83       	std	Y+2, r24	; 0x02
		// select adc channel
		ADMUX_REG_TEMP = ((ADMUX_REG_TEMP & 0xE0)   | (ST_ptrAdcCfgInstance_t->channelSelection));
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	98 2f       	mov	r25, r24
    2a8a:	90 7e       	andi	r25, 0xE0	; 224
    2a8c:	ec 81       	ldd	r30, Y+4	; 0x04
    2a8e:	fd 81       	ldd	r31, Y+5	; 0x05
    2a90:	84 81       	ldd	r24, Z+4	; 0x04
    2a92:	89 2b       	or	r24, r25
    2a94:	8a 83       	std	Y+2, r24	; 0x02
		// select prescaler
		ADCSRA_REG_TEMP = ((ADCSRA_REG_TEMP & 0xF8) | (ST_ptrAdcCfgInstance_t->prescalerDivision));
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	98 2f       	mov	r25, r24
    2a9a:	98 7f       	andi	r25, 0xF8	; 248
    2a9c:	ec 81       	ldd	r30, Y+4	; 0x04
    2a9e:	fd 81       	ldd	r31, Y+5	; 0x05
    2aa0:	85 81       	ldd	r24, Z+5	; 0x05
    2aa2:	89 2b       	or	r24, r25
    2aa4:	89 83       	std	Y+1, r24	; 0x01
		// enable or disable interrupt
		ADCSRA_REG_TEMP = ((ADCSRA_REG_TEMP & 0xF7) | (ST_ptrAdcCfgInstance_t->triggerSource << ADIE_BIT));
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	27 7f       	andi	r18, 0xF7	; 247
    2aac:	ec 81       	ldd	r30, Y+4	; 0x04
    2aae:	fd 81       	ldd	r31, Y+5	; 0x05
    2ab0:	86 81       	ldd	r24, Z+6	; 0x06
    2ab2:	88 2f       	mov	r24, r24
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	88 0f       	add	r24, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	82 2b       	or	r24, r18
    2ac4:	89 83       	std	Y+1, r24	; 0x01

		// assign the values in registers
		ADMUX_REG	 = ADMUX_REG_TEMP;
    2ac6:	e7 e2       	ldi	r30, 0x27	; 39
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	80 83       	st	Z, r24
		ADCSRA_REG 	 = ADCSRA_REG_TEMP;
    2ace:	e6 e2       	ldi	r30, 0x26	; 38
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	80 83       	st	Z, r24

		// set pointer of isr callback

		ptrCallbackHandler = ST_ptrAdcCfgInstance_t->MADC_setCallback;
    2ad6:	ec 81       	ldd	r30, Y+4	; 0x04
    2ad8:	fd 81       	ldd	r31, Y+5	; 0x05
    2ada:	80 81       	ld	r24, Z
    2adc:	91 81       	ldd	r25, Z+1	; 0x01
    2ade:	90 93 51 01 	sts	0x0151, r25
    2ae2:	80 93 50 01 	sts	0x0150, r24

		// enable adc
		MADC_enable();
    2ae6:	a6 e2       	ldi	r26, 0x26	; 38
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e6 e2       	ldi	r30, 0x26	; 38
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	80 68       	ori	r24, 0x80	; 128
    2af2:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    2af4:	1b 82       	std	Y+3, r1	; 0x03
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <MADC_init+0xf2>

	}
	else
	{
		adcRet = MADC_PTR_NULL;
    2af8:	82 e0       	ldi	r24, 0x02	; 2
    2afa:	8b 83       	std	Y+3, r24	; 0x03
	}
	return adcRet;
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	0f 90       	pop	r0
    2b04:	0f 90       	pop	r0
    2b06:	0f 90       	pop	r0
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <MADC_deinit>:
EN_MADC_systeamState_t MADC_deinit(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <MADC_deinit+0x6>
    2b14:	0f 92       	push	r0
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	9b 83       	std	Y+3, r25	; 0x03
    2b1c:	8a 83       	std	Y+2, r24	; 0x02
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	81 f0       	breq	.+32     	; 0x2b4a <MADC_deinit+0x3c>
	{
		// disable adc interrupt
		MADC_interruptDisable();
    2b2a:	a6 e2       	ldi	r26, 0x26	; 38
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e6 e2       	ldi	r30, 0x26	; 38
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	87 7f       	andi	r24, 0xF7	; 247
    2b36:	8c 93       	st	X, r24
		// disable adc
		MADC_disable();
    2b38:	a6 e2       	ldi	r26, 0x26	; 38
    2b3a:	b0 e0       	ldi	r27, 0x00	; 0
    2b3c:	e6 e2       	ldi	r30, 0x26	; 38
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	8f 77       	andi	r24, 0x7F	; 127
    2b44:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    2b46:	19 82       	std	Y+1, r1	; 0x01
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <MADC_deinit+0x40>
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    2b4a:	82 e0       	ldi	r24, 0x02	; 2
    2b4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <MADC_startConversion>:

EN_MADC_systeamState_t MADC_startConversion(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <MADC_startConversion+0x6>
    2b62:	0f 92       	push	r0
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	9b 83       	std	Y+3, r25	; 0x03
    2b6a:	8a 83       	std	Y+2, r24	; 0x02
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrAdcCfgInstance_t)
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	00 97       	sbiw	r24, 0x00	; 0
    2b76:	49 f0       	breq	.+18     	; 0x2b8a <MADC_startConversion+0x2e>
	{
		// start conversion
		SET_BIT(ADCSRA_REG,ADSC_BIT);
    2b78:	a6 e2       	ldi	r26, 0x26	; 38
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e6 e2       	ldi	r30, 0x26	; 38
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	80 64       	ori	r24, 0x40	; 64
    2b84:	8c 93       	st	X, r24
		adcRet = MADC_OK;
    2b86:	19 82       	std	Y+1, r1	; 0x01
    2b88:	02 c0       	rjmp	.+4      	; 0x2b8e <MADC_startConversion+0x32>
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	0f 90       	pop	r0
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	08 95       	ret

00002b9c <MADC_getConversionResult>:

EN_MADC_systeamState_t MADC_getConversionResult(ST_MADC_CFG_t const * ST_ptrAdcCfgInstance_t, Uint16_t *_ConversionResult)
{
    2b9c:	df 93       	push	r29
    2b9e:	cf 93       	push	r28
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	27 97       	sbiw	r28, 0x07	; 7
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	9b 83       	std	Y+3, r25	; 0x03
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	7d 83       	std	Y+5, r23	; 0x05
    2bb6:	6c 83       	std	Y+4, r22	; 0x04
	EN_MADC_systeamState_t adcRet = MADC_NOK;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	89 83       	std	Y+1, r24	; 0x01

	if( (PTR_NULL != ST_ptrAdcCfgInstance_t) && (PTR_NULL != _ConversionResult) )
    2bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc0:	00 97       	sbiw	r24, 0x00	; 0
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <MADC_getConversionResult+0x2a>
    2bc4:	5b c0       	rjmp	.+182    	; 0x2c7c <MADC_getConversionResult+0xe0>
    2bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <MADC_getConversionResult+0x34>
    2bce:	56 c0       	rjmp	.+172    	; 0x2c7c <MADC_getConversionResult+0xe0>
	{
		// polling on adc flag
		while(GET_BIT(ADCSRA_REG,ADIF_BIT) != 1);
    2bd0:	e6 e2       	ldi	r30, 0x26	; 38
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	82 95       	swap	r24
    2bd8:	8f 70       	andi	r24, 0x0F	; 15
    2bda:	88 2f       	mov	r24, r24
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	81 70       	andi	r24, 0x01	; 1
    2be0:	90 70       	andi	r25, 0x00	; 0
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	a9 f3       	breq	.-22     	; 0x2bd0 <MADC_getConversionResult+0x34>
		// clear adc flag
		SET_BIT(ADCSRA_REG,ADIF_BIT);
    2be6:	a6 e2       	ldi	r26, 0x26	; 38
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e6 e2       	ldi	r30, 0x26	; 38
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	80 61       	ori	r24, 0x10	; 16
    2bf2:	8c 93       	st	X, r24

		switch(ST_ptrAdcCfgInstance_t->resultAdjust)
    2bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    2bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf8:	83 81       	ldd	r24, Z+3	; 0x03
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	3f 83       	std	Y+7, r19	; 0x07
    2c00:	2e 83       	std	Y+6, r18	; 0x06
    2c02:	8e 81       	ldd	r24, Y+6	; 0x06
    2c04:	9f 81       	ldd	r25, Y+7	; 0x07
    2c06:	00 97       	sbiw	r24, 0x00	; 0
    2c08:	31 f0       	breq	.+12     	; 0x2c16 <MADC_getConversionResult+0x7a>
    2c0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c0e:	21 30       	cpi	r18, 0x01	; 1
    2c10:	31 05       	cpc	r19, r1
    2c12:	a9 f0       	breq	.+42     	; 0x2c3e <MADC_getConversionResult+0xa2>
    2c14:	30 c0       	rjmp	.+96     	; 0x2c76 <MADC_getConversionResult+0xda>
		{
		case MADC_RIGHT_ADJUST  : *_ConversionResult = (Uint16_t)(ADCL_REG + (ADCH_REG << 8)); adcRet = MADC_OK;  break;
    2c16:	e4 e2       	ldi	r30, 0x24	; 36
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	80 81       	ld	r24, Z
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	e5 e2       	ldi	r30, 0x25	; 37
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	98 2f       	mov	r25, r24
    2c2c:	88 27       	eor	r24, r24
    2c2e:	82 0f       	add	r24, r18
    2c30:	93 1f       	adc	r25, r19
    2c32:	ec 81       	ldd	r30, Y+4	; 0x04
    2c34:	fd 81       	ldd	r31, Y+5	; 0x05
    2c36:	91 83       	std	Z+1, r25	; 0x01
    2c38:	80 83       	st	Z, r24
    2c3a:	19 82       	std	Y+1, r1	; 0x01
    2c3c:	21 c0       	rjmp	.+66     	; 0x2c80 <MADC_getConversionResult+0xe4>
		case MADC_LEFT_ADJUST	:  *_ConversionResult = (Uint16_t)((ADCL_REG + (ADCH_REG << 8))>>6); adcRet = MADC_OK; break;
    2c3e:	e4 e2       	ldi	r30, 0x24	; 36
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	e5 e2       	ldi	r30, 0x25	; 37
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	88 2f       	mov	r24, r24
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	98 2f       	mov	r25, r24
    2c54:	88 27       	eor	r24, r24
    2c56:	82 0f       	add	r24, r18
    2c58:	93 1f       	adc	r25, r19
    2c5a:	08 2e       	mov	r0, r24
    2c5c:	89 2f       	mov	r24, r25
    2c5e:	00 0c       	add	r0, r0
    2c60:	88 1f       	adc	r24, r24
    2c62:	99 0b       	sbc	r25, r25
    2c64:	00 0c       	add	r0, r0
    2c66:	88 1f       	adc	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	ec 81       	ldd	r30, Y+4	; 0x04
    2c6c:	fd 81       	ldd	r31, Y+5	; 0x05
    2c6e:	91 83       	std	Z+1, r25	; 0x01
    2c70:	80 83       	st	Z, r24
    2c72:	19 82       	std	Y+1, r1	; 0x01
    2c74:	05 c0       	rjmp	.+10     	; 0x2c80 <MADC_getConversionResult+0xe4>
		default 				: adcRet = MADC_NOK; break;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <MADC_getConversionResult+0xe4>
		}
	}
	else
	{
		adcRet = MADC_PTR_NULL;
    2c7c:	82 e0       	ldi	r24, 0x02	; 2
    2c7e:	89 83       	std	Y+1, r24	; 0x01
	}
	return adcRet;
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c82:	27 96       	adiw	r28, 0x07	; 7
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	cf 91       	pop	r28
    2c90:	df 91       	pop	r29
    2c92:	08 95       	ret

00002c94 <__vector_16>:


ISR(ADC_INT)
{
    2c94:	1f 92       	push	r1
    2c96:	0f 92       	push	r0
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	0f 92       	push	r0
    2c9c:	11 24       	eor	r1, r1
    2c9e:	2f 93       	push	r18
    2ca0:	3f 93       	push	r19
    2ca2:	4f 93       	push	r20
    2ca4:	5f 93       	push	r21
    2ca6:	6f 93       	push	r22
    2ca8:	7f 93       	push	r23
    2caa:	8f 93       	push	r24
    2cac:	9f 93       	push	r25
    2cae:	af 93       	push	r26
    2cb0:	bf 93       	push	r27
    2cb2:	ef 93       	push	r30
    2cb4:	ff 93       	push	r31
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
	if(PTR_NULL != ptrCallbackHandler)
    2cbe:	80 91 50 01 	lds	r24, 0x0150
    2cc2:	90 91 51 01 	lds	r25, 0x0151
    2cc6:	00 97       	sbiw	r24, 0x00	; 0
    2cc8:	29 f0       	breq	.+10     	; 0x2cd4 <__vector_16+0x40>
	{
		ptrCallbackHandler();
    2cca:	e0 91 50 01 	lds	r30, 0x0150
    2cce:	f0 91 51 01 	lds	r31, 0x0151
    2cd2:	09 95       	icall
	}
	else /*Do Nothing */;
}
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	ff 91       	pop	r31
    2cda:	ef 91       	pop	r30
    2cdc:	bf 91       	pop	r27
    2cde:	af 91       	pop	r26
    2ce0:	9f 91       	pop	r25
    2ce2:	8f 91       	pop	r24
    2ce4:	7f 91       	pop	r23
    2ce6:	6f 91       	pop	r22
    2ce8:	5f 91       	pop	r21
    2cea:	4f 91       	pop	r20
    2cec:	3f 91       	pop	r19
    2cee:	2f 91       	pop	r18
    2cf0:	0f 90       	pop	r0
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	0f 90       	pop	r0
    2cf6:	1f 90       	pop	r1
    2cf8:	18 95       	reti

00002cfa <SSD_int>:
    {GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH, GPIO_HIGH},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW},
    {GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_LOW, GPIO_HIGH, GPIO_LOW, GPIO_LOW}};

EN_SSD_systemState_t SSD_int(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	c4 54       	subi	r28, 0x44	; 68
    2d04:	d0 40       	sbci	r29, 0x00	; 0
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	fe 01       	movw	r30, r28
    2d12:	ed 5b       	subi	r30, 0xBD	; 189
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	91 83       	std	Z+1, r25	; 0x01
    2d18:	80 83       	st	Z, r24
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    2d22:	fe 01       	movw	r30, r28
    2d24:	ed 5b       	subi	r30, 0xBD	; 189
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <SSD_int+0x38>
    2d30:	d2 c1       	rjmp	.+932    	; 0x30d6 <SSD_int+0x3dc>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    2d32:	fe 01       	movw	r30, r28
    2d34:	ed 5b       	subi	r30, 0xBD	; 189
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	01 90       	ld	r0, Z+
    2d3a:	f0 81       	ld	r31, Z
    2d3c:	e0 2d       	mov	r30, r0
    2d3e:	80 81       	ld	r24, Z
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <SSD_int+0x4c>
    2d44:	df c0       	rjmp	.+446    	; 0x2f04 <SSD_int+0x20a>

      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    2d46:	fe 01       	movw	r30, r28
    2d48:	ed 5b       	subi	r30, 0xBD	; 189
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	01 90       	ld	r0, Z+
    2d4e:	f0 81       	ld	r31, Z
    2d50:	e0 2d       	mov	r30, r0
    2d52:	97 85       	ldd	r25, Z+15	; 0x0f
    2d54:	fe 01       	movw	r30, r28
    2d56:	ed 5b       	subi	r30, 0xBD	; 189
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	01 90       	ld	r0, Z+
    2d5c:	f0 81       	ld	r31, Z
    2d5e:	e0 2d       	mov	r30, r0
    2d60:	80 89       	ldd	r24, Z+16	; 0x10
    2d62:	9b 83       	std	Y+3, r25	; 0x03
    2d64:	8c 83       	std	Y+4, r24	; 0x04
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	8d 83       	std	Y+5, r24	; 0x05
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    2d6e:	fe 01       	movw	r30, r28
    2d70:	ed 5b       	subi	r30, 0xBD	; 189
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	01 90       	ld	r0, Z+
    2d76:	f0 81       	ld	r31, Z
    2d78:	e0 2d       	mov	r30, r0
    2d7a:	91 81       	ldd	r25, Z+1	; 0x01
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	ed 5b       	subi	r30, 0xBD	; 189
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	01 90       	ld	r0, Z+
    2d84:	f0 81       	ld	r31, Z
    2d86:	e0 2d       	mov	r30, r0
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	9f 83       	std	Y+7, r25	; 0x07
    2d8c:	88 87       	std	Y+8, r24	; 0x08
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	89 87       	std	Y+9, r24	; 0x09
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 5b       	subi	r30, 0xBD	; 189
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	01 90       	ld	r0, Z+
    2d9e:	f0 81       	ld	r31, Z
    2da0:	e0 2d       	mov	r30, r0
    2da2:	93 81       	ldd	r25, Z+3	; 0x03
    2da4:	fe 01       	movw	r30, r28
    2da6:	ed 5b       	subi	r30, 0xBD	; 189
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	01 90       	ld	r0, Z+
    2dac:	f0 81       	ld	r31, Z
    2dae:	e0 2d       	mov	r30, r0
    2db0:	84 81       	ldd	r24, Z+4	; 0x04
    2db2:	9b 87       	std	Y+11, r25	; 0x0b
    2db4:	8c 87       	std	Y+12, r24	; 0x0c
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	8d 87       	std	Y+13, r24	; 0x0d
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	ed 5b       	subi	r30, 0xBD	; 189
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	01 90       	ld	r0, Z+
    2dc6:	f0 81       	ld	r31, Z
    2dc8:	e0 2d       	mov	r30, r0
    2dca:	95 81       	ldd	r25, Z+5	; 0x05
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ed 5b       	subi	r30, 0xBD	; 189
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	01 90       	ld	r0, Z+
    2dd4:	f0 81       	ld	r31, Z
    2dd6:	e0 2d       	mov	r30, r0
    2dd8:	86 81       	ldd	r24, Z+6	; 0x06
    2dda:	9f 87       	std	Y+15, r25	; 0x0f
    2ddc:	88 8b       	std	Y+16, r24	; 0x10
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	89 8b       	std	Y+17, r24	; 0x11
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    2de6:	fe 01       	movw	r30, r28
    2de8:	ed 5b       	subi	r30, 0xBD	; 189
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	01 90       	ld	r0, Z+
    2dee:	f0 81       	ld	r31, Z
    2df0:	e0 2d       	mov	r30, r0
    2df2:	97 81       	ldd	r25, Z+7	; 0x07
    2df4:	fe 01       	movw	r30, r28
    2df6:	ed 5b       	subi	r30, 0xBD	; 189
    2df8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfa:	01 90       	ld	r0, Z+
    2dfc:	f0 81       	ld	r31, Z
    2dfe:	e0 2d       	mov	r30, r0
    2e00:	80 85       	ldd	r24, Z+8	; 0x08
    2e02:	9b 8b       	std	Y+19, r25	; 0x13
    2e04:	8c 8b       	std	Y+20, r24	; 0x14
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	8d 8b       	std	Y+21, r24	; 0x15
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ed 5b       	subi	r30, 0xBD	; 189
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	01 90       	ld	r0, Z+
    2e16:	f0 81       	ld	r31, Z
    2e18:	e0 2d       	mov	r30, r0
    2e1a:	91 85       	ldd	r25, Z+9	; 0x09
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	ed 5b       	subi	r30, 0xBD	; 189
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	01 90       	ld	r0, Z+
    2e24:	f0 81       	ld	r31, Z
    2e26:	e0 2d       	mov	r30, r0
    2e28:	82 85       	ldd	r24, Z+10	; 0x0a
    2e2a:	9f 8b       	std	Y+23, r25	; 0x17
    2e2c:	88 8f       	std	Y+24, r24	; 0x18
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	89 8f       	std	Y+25, r24	; 0x19
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    2e36:	fe 01       	movw	r30, r28
    2e38:	ed 5b       	subi	r30, 0xBD	; 189
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	01 90       	ld	r0, Z+
    2e3e:	f0 81       	ld	r31, Z
    2e40:	e0 2d       	mov	r30, r0
    2e42:	93 85       	ldd	r25, Z+11	; 0x0b
    2e44:	fe 01       	movw	r30, r28
    2e46:	ed 5b       	subi	r30, 0xBD	; 189
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	01 90       	ld	r0, Z+
    2e4c:	f0 81       	ld	r31, Z
    2e4e:	e0 2d       	mov	r30, r0
    2e50:	84 85       	ldd	r24, Z+12	; 0x0c
    2e52:	9b 8f       	std	Y+27, r25	; 0x1b
    2e54:	8c 8f       	std	Y+28, r24	; 0x1c
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	8d 8f       	std	Y+29, r24	; 0x1d
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	8e 8f       	std	Y+30, r24	; 0x1e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ed 5b       	subi	r30, 0xBD	; 189
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	01 90       	ld	r0, Z+
    2e66:	f0 81       	ld	r31, Z
    2e68:	e0 2d       	mov	r30, r0
    2e6a:	95 85       	ldd	r25, Z+13	; 0x0d
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ed 5b       	subi	r30, 0xBD	; 189
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	01 90       	ld	r0, Z+
    2e74:	f0 81       	ld	r31, Z
    2e76:	e0 2d       	mov	r30, r0
    2e78:	86 85       	ldd	r24, Z+14	; 0x0e
    2e7a:	9f 8f       	std	Y+31, r25	; 0x1f
    2e7c:	88 a3       	std	Y+32, r24	; 0x20
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	89 a3       	std	Y+33, r24	; 0x21
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	8a a3       	std	Y+34, r24	; 0x22

      gpioRet = GPIO_initPin(&pinCom);
    2e86:	ce 01       	movw	r24, r28
    2e88:	03 96       	adiw	r24, 0x03	; 3
    2e8a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    2e8e:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	88 23       	and	r24, r24
    2e94:	29 f4       	brne	.+10     	; 0x2ea0 <SSD_int+0x1a6>
        gpioRet = GPIO_initPin(&pinA);
    2e96:	ce 01       	movw	r24, r28
    2e98:	07 96       	adiw	r24, 0x07	; 7
    2e9a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    2e9e:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	88 23       	and	r24, r24
    2ea4:	21 f4       	brne	.+8      	; 0x2eae <SSD_int+0x1b4>
        GPIO_initPin(&pinB);
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	0b 96       	adiw	r24, 0x0b	; 11
    2eaa:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	88 23       	and	r24, r24
    2eb2:	21 f4       	brne	.+8      	; 0x2ebc <SSD_int+0x1c2>
        GPIO_initPin(&pinC);
    2eb4:	ce 01       	movw	r24, r28
    2eb6:	0f 96       	adiw	r24, 0x0f	; 15
    2eb8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	88 23       	and	r24, r24
    2ec0:	21 f4       	brne	.+8      	; 0x2eca <SSD_int+0x1d0>
        GPIO_initPin(&pinD);
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	43 96       	adiw	r24, 0x13	; 19
    2ec6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	88 23       	and	r24, r24
    2ece:	21 f4       	brne	.+8      	; 0x2ed8 <SSD_int+0x1de>
        GPIO_initPin(&pinE);
    2ed0:	ce 01       	movw	r24, r28
    2ed2:	47 96       	adiw	r24, 0x17	; 23
    2ed4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	88 23       	and	r24, r24
    2edc:	21 f4       	brne	.+8      	; 0x2ee6 <SSD_int+0x1ec>
        GPIO_initPin(&pinF);
    2ede:	ce 01       	movw	r24, r28
    2ee0:	4b 96       	adiw	r24, 0x1b	; 27
    2ee2:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    2ee6:	89 81       	ldd	r24, Y+1	; 0x01
    2ee8:	88 23       	and	r24, r24
    2eea:	21 f4       	brne	.+8      	; 0x2ef4 <SSD_int+0x1fa>
        GPIO_initPin(&pinG);
    2eec:	ce 01       	movw	r24, r28
    2eee:	4f 96       	adiw	r24, 0x1f	; 31
    2ef0:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	88 23       	and	r24, r24
    2ef8:	11 f4       	brne	.+4      	; 0x2efe <SSD_int+0x204>
        ssdRet = SSD_OK;
    2efa:	1a 82       	std	Y+2, r1	; 0x02
    2efc:	ee c0       	rjmp	.+476    	; 0x30da <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	8a 83       	std	Y+2, r24	; 0x02
    2f02:	eb c0       	rjmp	.+470    	; 0x30da <SSD_int+0x3e0>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    2f04:	fe 01       	movw	r30, r28
    2f06:	ed 5b       	subi	r30, 0xBD	; 189
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	01 90       	ld	r0, Z+
    2f0c:	f0 81       	ld	r31, Z
    2f0e:	e0 2d       	mov	r30, r0
    2f10:	80 81       	ld	r24, Z
    2f12:	88 23       	and	r24, r24
    2f14:	09 f0       	breq	.+2      	; 0x2f18 <SSD_int+0x21e>
    2f16:	e1 c0       	rjmp	.+450    	; 0x30da <SSD_int+0x3e0>
      ST_GPIO_cfg_t pinCom = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinComPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinComPortName};
    2f18:	fe 01       	movw	r30, r28
    2f1a:	ed 5b       	subi	r30, 0xBD	; 189
    2f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f1e:	01 90       	ld	r0, Z+
    2f20:	f0 81       	ld	r31, Z
    2f22:	e0 2d       	mov	r30, r0
    2f24:	97 85       	ldd	r25, Z+15	; 0x0f
    2f26:	fe 01       	movw	r30, r28
    2f28:	ed 5b       	subi	r30, 0xBD	; 189
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	01 90       	ld	r0, Z+
    2f2e:	f0 81       	ld	r31, Z
    2f30:	e0 2d       	mov	r30, r0
    2f32:	80 89       	ldd	r24, Z+16	; 0x10
    2f34:	9b a3       	std	Y+35, r25	; 0x23
    2f36:	8c a3       	std	Y+36, r24	; 0x24
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	8d a3       	std	Y+37, r24	; 0x25
    2f3c:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    2f3e:	fe 01       	movw	r30, r28
    2f40:	ed 5b       	subi	r30, 0xBD	; 189
    2f42:	ff 4f       	sbci	r31, 0xFF	; 255
    2f44:	01 90       	ld	r0, Z+
    2f46:	f0 81       	ld	r31, Z
    2f48:	e0 2d       	mov	r30, r0
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	fe 01       	movw	r30, r28
    2f4e:	ed 5b       	subi	r30, 0xBD	; 189
    2f50:	ff 4f       	sbci	r31, 0xFF	; 255
    2f52:	01 90       	ld	r0, Z+
    2f54:	f0 81       	ld	r31, Z
    2f56:	e0 2d       	mov	r30, r0
    2f58:	82 81       	ldd	r24, Z+2	; 0x02
    2f5a:	9f a3       	std	Y+39, r25	; 0x27
    2f5c:	88 a7       	std	Y+40, r24	; 0x28
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	89 a7       	std	Y+41, r24	; 0x29
    2f62:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    2f64:	fe 01       	movw	r30, r28
    2f66:	ed 5b       	subi	r30, 0xBD	; 189
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	01 90       	ld	r0, Z+
    2f6c:	f0 81       	ld	r31, Z
    2f6e:	e0 2d       	mov	r30, r0
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	fe 01       	movw	r30, r28
    2f74:	ed 5b       	subi	r30, 0xBD	; 189
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	01 90       	ld	r0, Z+
    2f7a:	f0 81       	ld	r31, Z
    2f7c:	e0 2d       	mov	r30, r0
    2f7e:	84 81       	ldd	r24, Z+4	; 0x04
    2f80:	9b a7       	std	Y+43, r25	; 0x2b
    2f82:	8c a7       	std	Y+44, r24	; 0x2c
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	8d a7       	std	Y+45, r24	; 0x2d
    2f88:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ed 5b       	subi	r30, 0xBD	; 189
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	01 90       	ld	r0, Z+
    2f92:	f0 81       	ld	r31, Z
    2f94:	e0 2d       	mov	r30, r0
    2f96:	95 81       	ldd	r25, Z+5	; 0x05
    2f98:	fe 01       	movw	r30, r28
    2f9a:	ed 5b       	subi	r30, 0xBD	; 189
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	01 90       	ld	r0, Z+
    2fa0:	f0 81       	ld	r31, Z
    2fa2:	e0 2d       	mov	r30, r0
    2fa4:	86 81       	ldd	r24, Z+6	; 0x06
    2fa6:	9f a7       	std	Y+47, r25	; 0x2f
    2fa8:	88 ab       	std	Y+48, r24	; 0x30
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	89 ab       	std	Y+49, r24	; 0x31
    2fae:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	ed 5b       	subi	r30, 0xBD	; 189
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	01 90       	ld	r0, Z+
    2fb8:	f0 81       	ld	r31, Z
    2fba:	e0 2d       	mov	r30, r0
    2fbc:	97 81       	ldd	r25, Z+7	; 0x07
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	ed 5b       	subi	r30, 0xBD	; 189
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	01 90       	ld	r0, Z+
    2fc6:	f0 81       	ld	r31, Z
    2fc8:	e0 2d       	mov	r30, r0
    2fca:	80 85       	ldd	r24, Z+8	; 0x08
    2fcc:	9b ab       	std	Y+51, r25	; 0x33
    2fce:	8c ab       	std	Y+52, r24	; 0x34
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	8d ab       	std	Y+53, r24	; 0x35
    2fd4:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	ed 5b       	subi	r30, 0xBD	; 189
    2fda:	ff 4f       	sbci	r31, 0xFF	; 255
    2fdc:	01 90       	ld	r0, Z+
    2fde:	f0 81       	ld	r31, Z
    2fe0:	e0 2d       	mov	r30, r0
    2fe2:	91 85       	ldd	r25, Z+9	; 0x09
    2fe4:	fe 01       	movw	r30, r28
    2fe6:	ed 5b       	subi	r30, 0xBD	; 189
    2fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fea:	01 90       	ld	r0, Z+
    2fec:	f0 81       	ld	r31, Z
    2fee:	e0 2d       	mov	r30, r0
    2ff0:	82 85       	ldd	r24, Z+10	; 0x0a
    2ff2:	9f ab       	std	Y+55, r25	; 0x37
    2ff4:	88 af       	std	Y+56, r24	; 0x38
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	89 af       	std	Y+57, r24	; 0x39
    2ffa:	1a ae       	std	Y+58, r1	; 0x3a

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ed 5b       	subi	r30, 0xBD	; 189
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	01 90       	ld	r0, Z+
    3004:	f0 81       	ld	r31, Z
    3006:	e0 2d       	mov	r30, r0
    3008:	93 85       	ldd	r25, Z+11	; 0x0b
    300a:	fe 01       	movw	r30, r28
    300c:	ed 5b       	subi	r30, 0xBD	; 189
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	01 90       	ld	r0, Z+
    3012:	f0 81       	ld	r31, Z
    3014:	e0 2d       	mov	r30, r0
    3016:	84 85       	ldd	r24, Z+12	; 0x0c
    3018:	9b af       	std	Y+59, r25	; 0x3b
    301a:	8c af       	std	Y+60, r24	; 0x3c
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	8d af       	std	Y+61, r24	; 0x3d
    3020:	1e ae       	std	Y+62, r1	; 0x3e

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    3022:	fe 01       	movw	r30, r28
    3024:	ed 5b       	subi	r30, 0xBD	; 189
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	01 90       	ld	r0, Z+
    302a:	f0 81       	ld	r31, Z
    302c:	e0 2d       	mov	r30, r0
    302e:	85 85       	ldd	r24, Z+13	; 0x0d
    3030:	fe 01       	movw	r30, r28
    3032:	ed 5b       	subi	r30, 0xBD	; 189
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	01 90       	ld	r0, Z+
    3038:	f0 81       	ld	r31, Z
    303a:	e0 2d       	mov	r30, r0
    303c:	96 85       	ldd	r25, Z+14	; 0x0e
    303e:	fe 01       	movw	r30, r28
    3040:	ff 96       	adiw	r30, 0x3f	; 63
    3042:	80 83       	st	Z, r24
    3044:	fe 01       	movw	r30, r28
    3046:	ff 96       	adiw	r30, 0x3f	; 63
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	fe 01       	movw	r30, r28
    304c:	ff 96       	adiw	r30, 0x3f	; 63
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	82 83       	std	Z+2, r24	; 0x02
    3052:	fe 01       	movw	r30, r28
    3054:	ff 96       	adiw	r30, 0x3f	; 63
    3056:	13 82       	std	Z+3, r1	; 0x03

      gpioRet = GPIO_initPin(&pinCom);
    3058:	ce 01       	movw	r24, r28
    305a:	83 96       	adiw	r24, 0x23	; 35
    305c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3060:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	88 23       	and	r24, r24
    3066:	29 f4       	brne	.+10     	; 0x3072 <SSD_int+0x378>
        gpioRet = GPIO_initPin(&pinA);
    3068:	ce 01       	movw	r24, r28
    306a:	87 96       	adiw	r24, 0x27	; 39
    306c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3070:	89 83       	std	Y+1, r24	; 0x01
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	88 23       	and	r24, r24
    3076:	21 f4       	brne	.+8      	; 0x3080 <SSD_int+0x386>
        GPIO_initPin(&pinB);
    3078:	ce 01       	movw	r24, r28
    307a:	8b 96       	adiw	r24, 0x2b	; 43
    307c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    3080:	89 81       	ldd	r24, Y+1	; 0x01
    3082:	88 23       	and	r24, r24
    3084:	21 f4       	brne	.+8      	; 0x308e <SSD_int+0x394>
        GPIO_initPin(&pinC);
    3086:	ce 01       	movw	r24, r28
    3088:	8f 96       	adiw	r24, 0x2f	; 47
    308a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	88 23       	and	r24, r24
    3092:	21 f4       	brne	.+8      	; 0x309c <SSD_int+0x3a2>
        GPIO_initPin(&pinD);
    3094:	ce 01       	movw	r24, r28
    3096:	c3 96       	adiw	r24, 0x33	; 51
    3098:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	88 23       	and	r24, r24
    30a0:	21 f4       	brne	.+8      	; 0x30aa <SSD_int+0x3b0>
        GPIO_initPin(&pinE);
    30a2:	ce 01       	movw	r24, r28
    30a4:	c7 96       	adiw	r24, 0x37	; 55
    30a6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    30aa:	89 81       	ldd	r24, Y+1	; 0x01
    30ac:	88 23       	and	r24, r24
    30ae:	21 f4       	brne	.+8      	; 0x30b8 <SSD_int+0x3be>
        GPIO_initPin(&pinF);
    30b0:	ce 01       	movw	r24, r28
    30b2:	cb 96       	adiw	r24, 0x3b	; 59
    30b4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    30b8:	89 81       	ldd	r24, Y+1	; 0x01
    30ba:	88 23       	and	r24, r24
    30bc:	21 f4       	brne	.+8      	; 0x30c6 <SSD_int+0x3cc>
        GPIO_initPin(&pinG);
    30be:	ce 01       	movw	r24, r28
    30c0:	cf 96       	adiw	r24, 0x3f	; 63
    30c2:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
      } else {
        /*Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	88 23       	and	r24, r24
    30ca:	11 f4       	brne	.+4      	; 0x30d0 <SSD_int+0x3d6>
        ssdRet = SSD_OK;
    30cc:	1a 82       	std	Y+2, r1	; 0x02
    30ce:	05 c0       	rjmp	.+10     	; 0x30da <SSD_int+0x3e0>
      } else {
        ssdRet = SSD_NOK;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	8a 83       	std	Y+2, r24	; 0x02
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <SSD_int+0x3e0>
      }
    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    30d6:	82 e0       	ldi	r24, 0x02	; 2
    30d8:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    30dc:	cc 5b       	subi	r28, 0xBC	; 188
    30de:	df 4f       	sbci	r29, 0xFF	; 255
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <SSD_setNumberOnSsd>:

EN_SSD_systemState_t
SSD_setNumberOnSsd(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce,
                   EN_SSD_numbers_t valueOfNumber) {
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	ed 97       	sbiw	r28, 0x3d	; 61
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	9c af       	std	Y+60, r25	; 0x3c
    3106:	8b af       	std	Y+59, r24	; 0x3b
    3108:	6d af       	std	Y+61, r22	; 0x3d
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    3112:	8b ad       	ldd	r24, Y+59	; 0x3b
    3114:	9c ad       	ldd	r25, Y+60	; 0x3c
    3116:	00 97       	sbiw	r24, 0x00	; 0
    3118:	09 f4       	brne	.+2      	; 0x311c <SSD_setNumberOnSsd+0x2c>
    311a:	15 c2       	rjmp	.+1066   	; 0x3546 <SSD_setNumberOnSsd+0x456>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    311c:	eb ad       	ldd	r30, Y+59	; 0x3b
    311e:	fc ad       	ldd	r31, Y+60	; 0x3c
    3120:	80 81       	ld	r24, Z
    3122:	81 30       	cpi	r24, 0x01	; 1
    3124:	09 f0       	breq	.+2      	; 0x3128 <SSD_setNumberOnSsd+0x38>
    3126:	08 c1       	rjmp	.+528    	; 0x3338 <SSD_setNumberOnSsd+0x248>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    3128:	eb ad       	ldd	r30, Y+59	; 0x3b
    312a:	fc ad       	ldd	r31, Y+60	; 0x3c
    312c:	91 81       	ldd	r25, Z+1	; 0x01
    312e:	eb ad       	ldd	r30, Y+59	; 0x3b
    3130:	fc ad       	ldd	r31, Y+60	; 0x3c
    3132:	82 81       	ldd	r24, Z+2	; 0x02
    3134:	9b 83       	std	Y+3, r25	; 0x03
    3136:	8c 83       	std	Y+4, r24	; 0x04
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	8d 83       	std	Y+5, r24	; 0x05
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	8e 83       	std	Y+6, r24	; 0x06

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    3140:	eb ad       	ldd	r30, Y+59	; 0x3b
    3142:	fc ad       	ldd	r31, Y+60	; 0x3c
    3144:	93 81       	ldd	r25, Z+3	; 0x03
    3146:	eb ad       	ldd	r30, Y+59	; 0x3b
    3148:	fc ad       	ldd	r31, Y+60	; 0x3c
    314a:	84 81       	ldd	r24, Z+4	; 0x04
    314c:	9f 83       	std	Y+7, r25	; 0x07
    314e:	88 87       	std	Y+8, r24	; 0x08
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	89 87       	std	Y+9, r24	; 0x09
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	8a 87       	std	Y+10, r24	; 0x0a

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    3158:	eb ad       	ldd	r30, Y+59	; 0x3b
    315a:	fc ad       	ldd	r31, Y+60	; 0x3c
    315c:	95 81       	ldd	r25, Z+5	; 0x05
    315e:	eb ad       	ldd	r30, Y+59	; 0x3b
    3160:	fc ad       	ldd	r31, Y+60	; 0x3c
    3162:	86 81       	ldd	r24, Z+6	; 0x06
    3164:	9b 87       	std	Y+11, r25	; 0x0b
    3166:	8c 87       	std	Y+12, r24	; 0x0c
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	8d 87       	std	Y+13, r24	; 0x0d
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	8e 87       	std	Y+14, r24	; 0x0e

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    3170:	eb ad       	ldd	r30, Y+59	; 0x3b
    3172:	fc ad       	ldd	r31, Y+60	; 0x3c
    3174:	97 81       	ldd	r25, Z+7	; 0x07
    3176:	eb ad       	ldd	r30, Y+59	; 0x3b
    3178:	fc ad       	ldd	r31, Y+60	; 0x3c
    317a:	80 85       	ldd	r24, Z+8	; 0x08
    317c:	9f 87       	std	Y+15, r25	; 0x0f
    317e:	88 8b       	std	Y+16, r24	; 0x10
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	89 8b       	std	Y+17, r24	; 0x11
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	8a 8b       	std	Y+18, r24	; 0x12

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    3188:	eb ad       	ldd	r30, Y+59	; 0x3b
    318a:	fc ad       	ldd	r31, Y+60	; 0x3c
    318c:	91 85       	ldd	r25, Z+9	; 0x09
    318e:	eb ad       	ldd	r30, Y+59	; 0x3b
    3190:	fc ad       	ldd	r31, Y+60	; 0x3c
    3192:	82 85       	ldd	r24, Z+10	; 0x0a
    3194:	9b 8b       	std	Y+19, r25	; 0x13
    3196:	8c 8b       	std	Y+20, r24	; 0x14
    3198:	81 e0       	ldi	r24, 0x01	; 1
    319a:	8d 8b       	std	Y+21, r24	; 0x15
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	8e 8b       	std	Y+22, r24	; 0x16

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    31a0:	eb ad       	ldd	r30, Y+59	; 0x3b
    31a2:	fc ad       	ldd	r31, Y+60	; 0x3c
    31a4:	93 85       	ldd	r25, Z+11	; 0x0b
    31a6:	eb ad       	ldd	r30, Y+59	; 0x3b
    31a8:	fc ad       	ldd	r31, Y+60	; 0x3c
    31aa:	84 85       	ldd	r24, Z+12	; 0x0c
    31ac:	9f 8b       	std	Y+23, r25	; 0x17
    31ae:	88 8f       	std	Y+24, r24	; 0x18
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	89 8f       	std	Y+25, r24	; 0x19
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	8a 8f       	std	Y+26, r24	; 0x1a

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_HIGH,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    31b8:	eb ad       	ldd	r30, Y+59	; 0x3b
    31ba:	fc ad       	ldd	r31, Y+60	; 0x3c
    31bc:	95 85       	ldd	r25, Z+13	; 0x0d
    31be:	eb ad       	ldd	r30, Y+59	; 0x3b
    31c0:	fc ad       	ldd	r31, Y+60	; 0x3c
    31c2:	86 85       	ldd	r24, Z+14	; 0x0e
    31c4:	9b 8f       	std	Y+27, r25	; 0x1b
    31c6:	8c 8f       	std	Y+28, r24	; 0x1c
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	8d 8f       	std	Y+29, r24	; 0x1d
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	8e 8f       	std	Y+30, r24	; 0x1e

      gpioRet =
    31d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	c9 01       	movw	r24, r18
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	88 0f       	add	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	88 0f       	add	r24, r24
    31e2:	99 1f       	adc	r25, r25
    31e4:	82 1b       	sub	r24, r18
    31e6:	93 0b       	sbc	r25, r19
    31e8:	fc 01       	movw	r30, r24
    31ea:	ea 53       	subi	r30, 0x3A	; 58
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	20 81       	ld	r18, Z
    31f0:	ce 01       	movw	r24, r28
    31f2:	03 96       	adiw	r24, 0x03	; 3
    31f4:	62 2f       	mov	r22, r18
    31f6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    31fa:	89 83       	std	Y+1, r24	; 0x01
          GPIO_writePinLogic(&pinA, arrOfNumbersForAnodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	88 23       	and	r24, r24
    3200:	b1 f4       	brne	.+44     	; 0x322e <SSD_setNumberOnSsd+0x13e>
        gpioRet = GPIO_writePinLogic(&pinB,
    3202:	8d ad       	ldd	r24, Y+61	; 0x3d
    3204:	28 2f       	mov	r18, r24
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	c9 01       	movw	r24, r18
    320a:	88 0f       	add	r24, r24
    320c:	99 1f       	adc	r25, r25
    320e:	88 0f       	add	r24, r24
    3210:	99 1f       	adc	r25, r25
    3212:	88 0f       	add	r24, r24
    3214:	99 1f       	adc	r25, r25
    3216:	82 1b       	sub	r24, r18
    3218:	93 0b       	sbc	r25, r19
    321a:	fc 01       	movw	r30, r24
    321c:	e9 53       	subi	r30, 0x39	; 57
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	20 81       	ld	r18, Z
    3222:	ce 01       	movw	r24, r28
    3224:	07 96       	adiw	r24, 0x07	; 7
    3226:	62 2f       	mov	r22, r18
    3228:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    322c:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	88 23       	and	r24, r24
    3232:	b1 f4       	brne	.+44     	; 0x3260 <SSD_setNumberOnSsd+0x170>
        gpioRet = GPIO_writePinLogic(&pinC,
    3234:	8d ad       	ldd	r24, Y+61	; 0x3d
    3236:	28 2f       	mov	r18, r24
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	c9 01       	movw	r24, r18
    323c:	88 0f       	add	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	82 1b       	sub	r24, r18
    324a:	93 0b       	sbc	r25, r19
    324c:	fc 01       	movw	r30, r24
    324e:	e8 53       	subi	r30, 0x38	; 56
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	20 81       	ld	r18, Z
    3254:	ce 01       	movw	r24, r28
    3256:	0b 96       	adiw	r24, 0x0b	; 11
    3258:	62 2f       	mov	r22, r18
    325a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    325e:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	88 23       	and	r24, r24
    3264:	b1 f4       	brne	.+44     	; 0x3292 <SSD_setNumberOnSsd+0x1a2>
        gpioRet = GPIO_writePinLogic(&pinD,
    3266:	8d ad       	ldd	r24, Y+61	; 0x3d
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	c9 01       	movw	r24, r18
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	88 0f       	add	r24, r24
    3274:	99 1f       	adc	r25, r25
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	82 1b       	sub	r24, r18
    327c:	93 0b       	sbc	r25, r19
    327e:	fc 01       	movw	r30, r24
    3280:	e7 53       	subi	r30, 0x37	; 55
    3282:	ff 4f       	sbci	r31, 0xFF	; 255
    3284:	20 81       	ld	r18, Z
    3286:	ce 01       	movw	r24, r28
    3288:	0f 96       	adiw	r24, 0x0f	; 15
    328a:	62 2f       	mov	r22, r18
    328c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    3290:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	88 23       	and	r24, r24
    3296:	b1 f4       	brne	.+44     	; 0x32c4 <SSD_setNumberOnSsd+0x1d4>
        gpioRet = GPIO_writePinLogic(&pinE,
    3298:	8d ad       	ldd	r24, Y+61	; 0x3d
    329a:	28 2f       	mov	r18, r24
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	c9 01       	movw	r24, r18
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	88 0f       	add	r24, r24
    32aa:	99 1f       	adc	r25, r25
    32ac:	82 1b       	sub	r24, r18
    32ae:	93 0b       	sbc	r25, r19
    32b0:	fc 01       	movw	r30, r24
    32b2:	e6 53       	subi	r30, 0x36	; 54
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
    32b6:	20 81       	ld	r18, Z
    32b8:	ce 01       	movw	r24, r28
    32ba:	43 96       	adiw	r24, 0x13	; 19
    32bc:	62 2f       	mov	r22, r18
    32be:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    32c2:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	88 23       	and	r24, r24
    32c8:	b1 f4       	brne	.+44     	; 0x32f6 <SSD_setNumberOnSsd+0x206>
        gpioRet = GPIO_writePinLogic(&pinF,
    32ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    32cc:	28 2f       	mov	r18, r24
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	c9 01       	movw	r24, r18
    32d2:	88 0f       	add	r24, r24
    32d4:	99 1f       	adc	r25, r25
    32d6:	88 0f       	add	r24, r24
    32d8:	99 1f       	adc	r25, r25
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	82 1b       	sub	r24, r18
    32e0:	93 0b       	sbc	r25, r19
    32e2:	fc 01       	movw	r30, r24
    32e4:	e5 53       	subi	r30, 0x35	; 53
    32e6:	ff 4f       	sbci	r31, 0xFF	; 255
    32e8:	20 81       	ld	r18, Z
    32ea:	ce 01       	movw	r24, r28
    32ec:	47 96       	adiw	r24, 0x17	; 23
    32ee:	62 2f       	mov	r22, r18
    32f0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    32f4:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	88 23       	and	r24, r24
    32fa:	b1 f4       	brne	.+44     	; 0x3328 <SSD_setNumberOnSsd+0x238>
        gpioRet = GPIO_writePinLogic(&pinG,
    32fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    32fe:	28 2f       	mov	r18, r24
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	c9 01       	movw	r24, r18
    3304:	88 0f       	add	r24, r24
    3306:	99 1f       	adc	r25, r25
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	88 0f       	add	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	82 1b       	sub	r24, r18
    3312:	93 0b       	sbc	r25, r19
    3314:	fc 01       	movw	r30, r24
    3316:	e4 53       	subi	r30, 0x34	; 52
    3318:	ff 4f       	sbci	r31, 0xFF	; 255
    331a:	20 81       	ld	r18, Z
    331c:	ce 01       	movw	r24, r28
    331e:	4b 96       	adiw	r24, 0x1b	; 27
    3320:	62 2f       	mov	r22, r18
    3322:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    3326:	89 83       	std	Y+1, r24	; 0x01
                                     arrOfNumbersForAnodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    3328:	89 81       	ldd	r24, Y+1	; 0x01
    332a:	88 23       	and	r24, r24
    332c:	11 f4       	brne	.+4      	; 0x3332 <SSD_setNumberOnSsd+0x242>
        ssdRet = SSD_OK;
    332e:	1a 82       	std	Y+2, r1	; 0x02
    3330:	0c c1       	rjmp	.+536    	; 0x354a <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	8a 83       	std	Y+2, r24	; 0x02
    3336:	09 c1       	rjmp	.+530    	; 0x354a <SSD_setNumberOnSsd+0x45a>
      }

    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    3338:	eb ad       	ldd	r30, Y+59	; 0x3b
    333a:	fc ad       	ldd	r31, Y+60	; 0x3c
    333c:	80 81       	ld	r24, Z
    333e:	88 23       	and	r24, r24
    3340:	09 f0       	breq	.+2      	; 0x3344 <SSD_setNumberOnSsd+0x254>
    3342:	03 c1       	rjmp	.+518    	; 0x354a <SSD_setNumberOnSsd+0x45a>
      ST_GPIO_cfg_t pinA = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinAPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinAPortName};
    3344:	eb ad       	ldd	r30, Y+59	; 0x3b
    3346:	fc ad       	ldd	r31, Y+60	; 0x3c
    3348:	91 81       	ldd	r25, Z+1	; 0x01
    334a:	eb ad       	ldd	r30, Y+59	; 0x3b
    334c:	fc ad       	ldd	r31, Y+60	; 0x3c
    334e:	82 81       	ldd	r24, Z+2	; 0x02
    3350:	9f 8f       	std	Y+31, r25	; 0x1f
    3352:	88 a3       	std	Y+32, r24	; 0x20
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	89 a3       	std	Y+33, r24	; 0x21
    3358:	1a a2       	std	Y+34, r1	; 0x22

      ST_GPIO_cfg_t pinB = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinBPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinBPortName};
    335a:	eb ad       	ldd	r30, Y+59	; 0x3b
    335c:	fc ad       	ldd	r31, Y+60	; 0x3c
    335e:	93 81       	ldd	r25, Z+3	; 0x03
    3360:	eb ad       	ldd	r30, Y+59	; 0x3b
    3362:	fc ad       	ldd	r31, Y+60	; 0x3c
    3364:	84 81       	ldd	r24, Z+4	; 0x04
    3366:	9b a3       	std	Y+35, r25	; 0x23
    3368:	8c a3       	std	Y+36, r24	; 0x24
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	8d a3       	std	Y+37, r24	; 0x25
    336e:	1e a2       	std	Y+38, r1	; 0x26

      ST_GPIO_cfg_t pinC = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinCPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinCPortName};
    3370:	eb ad       	ldd	r30, Y+59	; 0x3b
    3372:	fc ad       	ldd	r31, Y+60	; 0x3c
    3374:	95 81       	ldd	r25, Z+5	; 0x05
    3376:	eb ad       	ldd	r30, Y+59	; 0x3b
    3378:	fc ad       	ldd	r31, Y+60	; 0x3c
    337a:	86 81       	ldd	r24, Z+6	; 0x06
    337c:	9f a3       	std	Y+39, r25	; 0x27
    337e:	88 a7       	std	Y+40, r24	; 0x28
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	89 a7       	std	Y+41, r24	; 0x29
    3384:	1a a6       	std	Y+42, r1	; 0x2a

      ST_GPIO_cfg_t pinD = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinDPortName};
    3386:	eb ad       	ldd	r30, Y+59	; 0x3b
    3388:	fc ad       	ldd	r31, Y+60	; 0x3c
    338a:	97 81       	ldd	r25, Z+7	; 0x07
    338c:	eb ad       	ldd	r30, Y+59	; 0x3b
    338e:	fc ad       	ldd	r31, Y+60	; 0x3c
    3390:	80 85       	ldd	r24, Z+8	; 0x08
    3392:	9b a7       	std	Y+43, r25	; 0x2b
    3394:	8c a7       	std	Y+44, r24	; 0x2c
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	8d a7       	std	Y+45, r24	; 0x2d
    339a:	1e a6       	std	Y+46, r1	; 0x2e

      ST_GPIO_cfg_t pinE = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinEPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinEPortName};
    339c:	eb ad       	ldd	r30, Y+59	; 0x3b
    339e:	fc ad       	ldd	r31, Y+60	; 0x3c
    33a0:	91 85       	ldd	r25, Z+9	; 0x09
    33a2:	eb ad       	ldd	r30, Y+59	; 0x3b
    33a4:	fc ad       	ldd	r31, Y+60	; 0x3c
    33a6:	82 85       	ldd	r24, Z+10	; 0x0a
    33a8:	9f a7       	std	Y+47, r25	; 0x2f
    33aa:	88 ab       	std	Y+48, r24	; 0x30
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	89 ab       	std	Y+49, r24	; 0x31
    33b0:	1a aa       	std	Y+50, r1	; 0x32

      ST_GPIO_cfg_t pinF = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinFPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinFPortName};
    33b2:	eb ad       	ldd	r30, Y+59	; 0x3b
    33b4:	fc ad       	ldd	r31, Y+60	; 0x3c
    33b6:	93 85       	ldd	r25, Z+11	; 0x0b
    33b8:	eb ad       	ldd	r30, Y+59	; 0x3b
    33ba:	fc ad       	ldd	r31, Y+60	; 0x3c
    33bc:	84 85       	ldd	r24, Z+12	; 0x0c
    33be:	9b ab       	std	Y+51, r25	; 0x33
    33c0:	8c ab       	std	Y+52, r24	; 0x34
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	8d ab       	std	Y+53, r24	; 0x35
    33c6:	1e aa       	std	Y+54, r1	; 0x36

      ST_GPIO_cfg_t pinG = {.logicOnPin = GPIO_LOW,
                            .pinDirection = GPIO_OUTPUT,
                            .pinNumber = ST_ptrSsdCfgInstamce->ssdPinGPinNumber,
                            .portName = ST_ptrSsdCfgInstamce->ssdPinGPortName};
    33c8:	eb ad       	ldd	r30, Y+59	; 0x3b
    33ca:	fc ad       	ldd	r31, Y+60	; 0x3c
    33cc:	95 85       	ldd	r25, Z+13	; 0x0d
    33ce:	eb ad       	ldd	r30, Y+59	; 0x3b
    33d0:	fc ad       	ldd	r31, Y+60	; 0x3c
    33d2:	86 85       	ldd	r24, Z+14	; 0x0e
    33d4:	9f ab       	std	Y+55, r25	; 0x37
    33d6:	88 af       	std	Y+56, r24	; 0x38
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	89 af       	std	Y+57, r24	; 0x39
    33dc:	1a ae       	std	Y+58, r1	; 0x3a

      gpioRet = GPIO_writePinLogic(&pinA,
    33de:	8d ad       	ldd	r24, Y+61	; 0x3d
    33e0:	28 2f       	mov	r18, r24
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	c9 01       	movw	r24, r18
    33e6:	88 0f       	add	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	88 0f       	add	r24, r24
    33ec:	99 1f       	adc	r25, r25
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	82 1b       	sub	r24, r18
    33f4:	93 0b       	sbc	r25, r19
    33f6:	fc 01       	movw	r30, r24
    33f8:	e0 58       	subi	r30, 0x80	; 128
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	20 81       	ld	r18, Z
    33fe:	ce 01       	movw	r24, r28
    3400:	4f 96       	adiw	r24, 0x1f	; 31
    3402:	62 2f       	mov	r22, r18
    3404:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    3408:	89 83       	std	Y+1, r24	; 0x01
                                   arrOfNumbersForCathodeCom[valueOfNumber][0]);
      if (gpioRet == GPIO_OK) {
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	88 23       	and	r24, r24
    340e:	b1 f4       	brne	.+44     	; 0x343c <SSD_setNumberOnSsd+0x34c>
        gpioRet = GPIO_writePinLogic(
    3410:	8d ad       	ldd	r24, Y+61	; 0x3d
    3412:	28 2f       	mov	r18, r24
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	c9 01       	movw	r24, r18
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	82 1b       	sub	r24, r18
    3426:	93 0b       	sbc	r25, r19
    3428:	fc 01       	movw	r30, r24
    342a:	ef 57       	subi	r30, 0x7F	; 127
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	20 81       	ld	r18, Z
    3430:	ce 01       	movw	r24, r28
    3432:	83 96       	adiw	r24, 0x23	; 35
    3434:	62 2f       	mov	r22, r18
    3436:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    343a:	89 83       	std	Y+1, r24	; 0x01
            &pinB, arrOfNumbersForCathodeCom[valueOfNumber][1]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	88 23       	and	r24, r24
    3440:	b1 f4       	brne	.+44     	; 0x346e <SSD_setNumberOnSsd+0x37e>
        gpioRet = GPIO_writePinLogic(
    3442:	8d ad       	ldd	r24, Y+61	; 0x3d
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	c9 01       	movw	r24, r18
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	88 0f       	add	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	82 1b       	sub	r24, r18
    3458:	93 0b       	sbc	r25, r19
    345a:	fc 01       	movw	r30, r24
    345c:	ee 57       	subi	r30, 0x7E	; 126
    345e:	ff 4f       	sbci	r31, 0xFF	; 255
    3460:	20 81       	ld	r18, Z
    3462:	ce 01       	movw	r24, r28
    3464:	87 96       	adiw	r24, 0x27	; 39
    3466:	62 2f       	mov	r22, r18
    3468:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    346c:	89 83       	std	Y+1, r24	; 0x01
            &pinC, arrOfNumbersForCathodeCom[valueOfNumber][2]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	88 23       	and	r24, r24
    3472:	b1 f4       	brne	.+44     	; 0x34a0 <SSD_setNumberOnSsd+0x3b0>
        gpioRet = GPIO_writePinLogic(
    3474:	8d ad       	ldd	r24, Y+61	; 0x3d
    3476:	28 2f       	mov	r18, r24
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	c9 01       	movw	r24, r18
    347c:	88 0f       	add	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	82 1b       	sub	r24, r18
    348a:	93 0b       	sbc	r25, r19
    348c:	fc 01       	movw	r30, r24
    348e:	ed 57       	subi	r30, 0x7D	; 125
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	20 81       	ld	r18, Z
    3494:	ce 01       	movw	r24, r28
    3496:	8b 96       	adiw	r24, 0x2b	; 43
    3498:	62 2f       	mov	r22, r18
    349a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    349e:	89 83       	std	Y+1, r24	; 0x01
            &pinD, arrOfNumbersForCathodeCom[valueOfNumber][3]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	88 23       	and	r24, r24
    34a4:	b1 f4       	brne	.+44     	; 0x34d2 <SSD_setNumberOnSsd+0x3e2>
        gpioRet = GPIO_writePinLogic(
    34a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	c9 01       	movw	r24, r18
    34ae:	88 0f       	add	r24, r24
    34b0:	99 1f       	adc	r25, r25
    34b2:	88 0f       	add	r24, r24
    34b4:	99 1f       	adc	r25, r25
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	82 1b       	sub	r24, r18
    34bc:	93 0b       	sbc	r25, r19
    34be:	fc 01       	movw	r30, r24
    34c0:	ec 57       	subi	r30, 0x7C	; 124
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	20 81       	ld	r18, Z
    34c6:	ce 01       	movw	r24, r28
    34c8:	8f 96       	adiw	r24, 0x2f	; 47
    34ca:	62 2f       	mov	r22, r18
    34cc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    34d0:	89 83       	std	Y+1, r24	; 0x01
            &pinE, arrOfNumbersForCathodeCom[valueOfNumber][4]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	88 23       	and	r24, r24
    34d6:	b1 f4       	brne	.+44     	; 0x3504 <SSD_setNumberOnSsd+0x414>
        gpioRet = GPIO_writePinLogic(
    34d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	c9 01       	movw	r24, r18
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	88 0f       	add	r24, r24
    34ea:	99 1f       	adc	r25, r25
    34ec:	82 1b       	sub	r24, r18
    34ee:	93 0b       	sbc	r25, r19
    34f0:	fc 01       	movw	r30, r24
    34f2:	eb 57       	subi	r30, 0x7B	; 123
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	20 81       	ld	r18, Z
    34f8:	ce 01       	movw	r24, r28
    34fa:	c3 96       	adiw	r24, 0x33	; 51
    34fc:	62 2f       	mov	r22, r18
    34fe:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    3502:	89 83       	std	Y+1, r24	; 0x01
            &pinF, arrOfNumbersForCathodeCom[valueOfNumber][5]);
      } else {
        /* Do Nothing*/
      }
      if (gpioRet == GPIO_OK) {
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	88 23       	and	r24, r24
    3508:	b1 f4       	brne	.+44     	; 0x3536 <SSD_setNumberOnSsd+0x446>
        gpioRet = GPIO_writePinLogic(
    350a:	8d ad       	ldd	r24, Y+61	; 0x3d
    350c:	28 2f       	mov	r18, r24
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	c9 01       	movw	r24, r18
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	88 0f       	add	r24, r24
    3518:	99 1f       	adc	r25, r25
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	82 1b       	sub	r24, r18
    3520:	93 0b       	sbc	r25, r19
    3522:	fc 01       	movw	r30, r24
    3524:	ea 57       	subi	r30, 0x7A	; 122
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	20 81       	ld	r18, Z
    352a:	ce 01       	movw	r24, r28
    352c:	c7 96       	adiw	r24, 0x37	; 55
    352e:	62 2f       	mov	r22, r18
    3530:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    3534:	89 83       	std	Y+1, r24	; 0x01
            &pinG, arrOfNumbersForCathodeCom[valueOfNumber][6]);
      } else {
        /* Do Nothing*/
      }

      if (gpioRet == GPIO_OK) {
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	88 23       	and	r24, r24
    353a:	11 f4       	brne	.+4      	; 0x3540 <SSD_setNumberOnSsd+0x450>
        ssdRet = SSD_OK;
    353c:	1a 82       	std	Y+2, r1	; 0x02
    353e:	05 c0       	rjmp	.+10     	; 0x354a <SSD_setNumberOnSsd+0x45a>
      } else {
        ssdRet = SSD_NOK;
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	8a 83       	std	Y+2, r24	; 0x02
    3544:	02 c0       	rjmp	.+4      	; 0x354a <SSD_setNumberOnSsd+0x45a>

    } else {
      /*Do Nothing*/
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    3546:	82 e0       	ldi	r24, 0x02	; 2
    3548:	8a 83       	std	Y+2, r24	; 0x02
  }

  return ssdRet;
    354a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    354c:	ed 96       	adiw	r28, 0x3d	; 61
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <SSD_enableDot>:

EN_SSD_systemState_t SSD_enableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
    3566:	2c 97       	sbiw	r28, 0x0c	; 12
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	9c 87       	std	Y+12, r25	; 0x0c
    3574:	8b 87       	std	Y+11, r24	; 0x0b

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    357e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3580:	9c 85       	ldd	r25, Y+12	; 0x0c
    3582:	00 97       	sbiw	r24, 0x00	; 0
    3584:	d9 f1       	breq	.+118    	; 0x35fc <SSD_enableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    3586:	eb 85       	ldd	r30, Y+11	; 0x0b
    3588:	fc 85       	ldd	r31, Y+12	; 0x0c
    358a:	80 81       	ld	r24, Z
    358c:	81 30       	cpi	r24, 0x01	; 1
    358e:	c9 f4       	brne	.+50     	; 0x35c2 <SSD_enableDot+0x64>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    3590:	eb 85       	ldd	r30, Y+11	; 0x0b
    3592:	fc 85       	ldd	r31, Y+12	; 0x0c
    3594:	91 89       	ldd	r25, Z+17	; 0x11
    3596:	eb 85       	ldd	r30, Y+11	; 0x0b
    3598:	fc 85       	ldd	r31, Y+12	; 0x0c
    359a:	82 89       	ldd	r24, Z+18	; 0x12
    359c:	9b 83       	std	Y+3, r25	; 0x03
    359e:	8c 83       	std	Y+4, r24	; 0x04
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	8d 83       	std	Y+5, r24	; 0x05
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	8e 83       	std	Y+6, r24	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    35a8:	ce 01       	movw	r24, r28
    35aa:	03 96       	adiw	r24, 0x03	; 3
    35ac:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    35b0:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	88 23       	and	r24, r24
    35b6:	11 f4       	brne	.+4      	; 0x35bc <SSD_enableDot+0x5e>
        ssdRet = SSD_OK;
    35b8:	1a 82       	std	Y+2, r1	; 0x02
    35ba:	22 c0       	rjmp	.+68     	; 0x3600 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	8a 83       	std	Y+2, r24	; 0x02
    35c0:	1f c0       	rjmp	.+62     	; 0x3600 <SSD_enableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    35c2:	eb 85       	ldd	r30, Y+11	; 0x0b
    35c4:	fc 85       	ldd	r31, Y+12	; 0x0c
    35c6:	80 81       	ld	r24, Z
    35c8:	88 23       	and	r24, r24
    35ca:	d1 f4       	brne	.+52     	; 0x3600 <SSD_enableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    35cc:	eb 85       	ldd	r30, Y+11	; 0x0b
    35ce:	fc 85       	ldd	r31, Y+12	; 0x0c
    35d0:	91 89       	ldd	r25, Z+17	; 0x11
    35d2:	eb 85       	ldd	r30, Y+11	; 0x0b
    35d4:	fc 85       	ldd	r31, Y+12	; 0x0c
    35d6:	82 89       	ldd	r24, Z+18	; 0x12
    35d8:	9f 83       	std	Y+7, r25	; 0x07
    35da:	88 87       	std	Y+8, r24	; 0x08
    35dc:	81 e0       	ldi	r24, 0x01	; 1
    35de:	89 87       	std	Y+9, r24	; 0x09
    35e0:	1a 86       	std	Y+10, r1	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    35e2:	ce 01       	movw	r24, r28
    35e4:	07 96       	adiw	r24, 0x07	; 7
    35e6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    35ea:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	88 23       	and	r24, r24
    35f0:	11 f4       	brne	.+4      	; 0x35f6 <SSD_enableDot+0x98>
        ssdRet = SSD_OK;
    35f2:	1a 82       	std	Y+2, r1	; 0x02
    35f4:	05 c0       	rjmp	.+10     	; 0x3600 <SSD_enableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	8a 83       	std	Y+2, r24	; 0x02
    35fa:	02 c0       	rjmp	.+4      	; 0x3600 <SSD_enableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    35fc:	82 e0       	ldi	r24, 0x02	; 2
    35fe:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3602:	2c 96       	adiw	r28, 0x0c	; 12
    3604:	0f b6       	in	r0, 0x3f	; 63
    3606:	f8 94       	cli
    3608:	de bf       	out	0x3e, r29	; 62
    360a:	0f be       	out	0x3f, r0	; 63
    360c:	cd bf       	out	0x3d, r28	; 61
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	08 95       	ret

00003614 <SSD_disableDot>:

EN_SSD_systemState_t SSD_disableDot(ST_SSD_cfg_t const *ST_ptrSsdCfgInstamce) {
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	2c 97       	sbiw	r28, 0x0c	; 12
    361e:	0f b6       	in	r0, 0x3f	; 63
    3620:	f8 94       	cli
    3622:	de bf       	out	0x3e, r29	; 62
    3624:	0f be       	out	0x3f, r0	; 63
    3626:	cd bf       	out	0x3d, r28	; 61
    3628:	9c 87       	std	Y+12, r25	; 0x0c
    362a:	8b 87       	std	Y+11, r24	; 0x0b
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdCfgInstamce) {
    3634:	8b 85       	ldd	r24, Y+11	; 0x0b
    3636:	9c 85       	ldd	r25, Y+12	; 0x0c
    3638:	00 97       	sbiw	r24, 0x00	; 0
    363a:	d9 f1       	breq	.+118    	; 0x36b2 <SSD_disableDot+0x9e>
    if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_ANODE_COMMON) {
    363c:	eb 85       	ldd	r30, Y+11	; 0x0b
    363e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3640:	80 81       	ld	r24, Z
    3642:	81 30       	cpi	r24, 0x01	; 1
    3644:	c1 f4       	brne	.+48     	; 0x3676 <SSD_disableDot+0x62>

      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_LOW,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    3646:	eb 85       	ldd	r30, Y+11	; 0x0b
    3648:	fc 85       	ldd	r31, Y+12	; 0x0c
    364a:	91 89       	ldd	r25, Z+17	; 0x11
    364c:	eb 85       	ldd	r30, Y+11	; 0x0b
    364e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3650:	82 89       	ldd	r24, Z+18	; 0x12
    3652:	9b 83       	std	Y+3, r25	; 0x03
    3654:	8c 83       	std	Y+4, r24	; 0x04
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	8d 83       	std	Y+5, r24	; 0x05
    365a:	1e 82       	std	Y+6, r1	; 0x06

      gpioRet = GPIO_initPin(&pinDot);
    365c:	ce 01       	movw	r24, r28
    365e:	03 96       	adiw	r24, 0x03	; 3
    3660:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3664:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	88 23       	and	r24, r24
    366a:	11 f4       	brne	.+4      	; 0x3670 <SSD_disableDot+0x5c>
        ssdRet = SSD_OK;
    366c:	1a 82       	std	Y+2, r1	; 0x02
    366e:	23 c0       	rjmp	.+70     	; 0x36b6 <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	8a 83       	std	Y+2, r24	; 0x02
    3674:	20 c0       	rjmp	.+64     	; 0x36b6 <SSD_disableDot+0xa2>
      }
    } else if (ST_ptrSsdCfgInstamce->ssdCommonType == SSD_CATHODE_COMMON) {
    3676:	eb 85       	ldd	r30, Y+11	; 0x0b
    3678:	fc 85       	ldd	r31, Y+12	; 0x0c
    367a:	80 81       	ld	r24, Z
    367c:	88 23       	and	r24, r24
    367e:	d9 f4       	brne	.+54     	; 0x36b6 <SSD_disableDot+0xa2>
      ST_GPIO_cfg_t pinDot = {
          .logicOnPin = GPIO_HIGH,
          .pinDirection = GPIO_OUTPUT,
          .pinNumber = ST_ptrSsdCfgInstamce->ssdPinDotPinNumber,
          .portName = ST_ptrSsdCfgInstamce->ssdPinDotPortName};
    3680:	eb 85       	ldd	r30, Y+11	; 0x0b
    3682:	fc 85       	ldd	r31, Y+12	; 0x0c
    3684:	91 89       	ldd	r25, Z+17	; 0x11
    3686:	eb 85       	ldd	r30, Y+11	; 0x0b
    3688:	fc 85       	ldd	r31, Y+12	; 0x0c
    368a:	82 89       	ldd	r24, Z+18	; 0x12
    368c:	9f 83       	std	Y+7, r25	; 0x07
    368e:	88 87       	std	Y+8, r24	; 0x08
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	89 87       	std	Y+9, r24	; 0x09
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	8a 87       	std	Y+10, r24	; 0x0a
      gpioRet = GPIO_initPin(&pinDot);
    3698:	ce 01       	movw	r24, r28
    369a:	07 96       	adiw	r24, 0x07	; 7
    369c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    36a0:	89 83       	std	Y+1, r24	; 0x01
      if (gpioRet == GPIO_OK) {
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	88 23       	and	r24, r24
    36a6:	11 f4       	brne	.+4      	; 0x36ac <SSD_disableDot+0x98>
        ssdRet = SSD_OK;
    36a8:	1a 82       	std	Y+2, r1	; 0x02
    36aa:	05 c0       	rjmp	.+10     	; 0x36b6 <SSD_disableDot+0xa2>
      } else {
        ssdRet = SSD_NOK;
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	8a 83       	std	Y+2, r24	; 0x02
    36b0:	02 c0       	rjmp	.+4      	; 0x36b6 <SSD_disableDot+0xa2>
      }
    } else {
      /* Do Nothing */
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    36b2:	82 e0       	ldi	r24, 0x02	; 2
    36b4:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    36b8:	2c 96       	adiw	r28, 0x0c	; 12
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <SSD_dualInit>:

//////////////////////////////////////////////////////////////////////////////////////////////

EN_SSD_systemState_t
SSD_dualInit(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	a0 97       	sbiw	r28, 0x20	; 32
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	98 a3       	std	Y+32, r25	; 0x20
    36e0:	8f 8f       	std	Y+31, r24	; 0x1f
  EN_SSD_systemState_t ssdRet = SSD_NOK;
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    36ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36ec:	98 a1       	ldd	r25, Y+32	; 0x20
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <SSD_dualInit+0x2a>
    36f2:	99 c0       	rjmp	.+306    	; 0x3826 <SSD_dualInit+0x15c>

    ST_GPIO_cfg_t pinA = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinAPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinAPortName};
    36f4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    36f6:	f8 a1       	ldd	r31, Y+32	; 0x20
    36f8:	92 81       	ldd	r25, Z+2	; 0x02
    36fa:	ef 8d       	ldd	r30, Y+31	; 0x1f
    36fc:	f8 a1       	ldd	r31, Y+32	; 0x20
    36fe:	83 81       	ldd	r24, Z+3	; 0x03
    3700:	1b 82       	std	Y+3, r1	; 0x03
    3702:	1c 82       	std	Y+4, r1	; 0x04
    3704:	1d 82       	std	Y+5, r1	; 0x05
    3706:	1e 82       	std	Y+6, r1	; 0x06
    3708:	9b 83       	std	Y+3, r25	; 0x03
    370a:	8c 83       	std	Y+4, r24	; 0x04
    370c:	81 e0       	ldi	r24, 0x01	; 1
    370e:	8d 83       	std	Y+5, r24	; 0x05

    ST_GPIO_cfg_t pinB = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinBPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinBPortName};
    3710:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3712:	f8 a1       	ldd	r31, Y+32	; 0x20
    3714:	94 81       	ldd	r25, Z+4	; 0x04
    3716:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3718:	f8 a1       	ldd	r31, Y+32	; 0x20
    371a:	85 81       	ldd	r24, Z+5	; 0x05
    371c:	1f 82       	std	Y+7, r1	; 0x07
    371e:	18 86       	std	Y+8, r1	; 0x08
    3720:	19 86       	std	Y+9, r1	; 0x09
    3722:	1a 86       	std	Y+10, r1	; 0x0a
    3724:	9f 83       	std	Y+7, r25	; 0x07
    3726:	88 87       	std	Y+8, r24	; 0x08
    3728:	81 e0       	ldi	r24, 0x01	; 1
    372a:	89 87       	std	Y+9, r24	; 0x09

    ST_GPIO_cfg_t pinC = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinCPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinCPortName};
    372c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    372e:	f8 a1       	ldd	r31, Y+32	; 0x20
    3730:	96 81       	ldd	r25, Z+6	; 0x06
    3732:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3734:	f8 a1       	ldd	r31, Y+32	; 0x20
    3736:	87 81       	ldd	r24, Z+7	; 0x07
    3738:	1b 86       	std	Y+11, r1	; 0x0b
    373a:	1c 86       	std	Y+12, r1	; 0x0c
    373c:	1d 86       	std	Y+13, r1	; 0x0d
    373e:	1e 86       	std	Y+14, r1	; 0x0e
    3740:	9b 87       	std	Y+11, r25	; 0x0b
    3742:	8c 87       	std	Y+12, r24	; 0x0c
    3744:	81 e0       	ldi	r24, 0x01	; 1
    3746:	8d 87       	std	Y+13, r24	; 0x0d

    ST_GPIO_cfg_t pinD = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinDPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinDPortName};
    3748:	ef 8d       	ldd	r30, Y+31	; 0x1f
    374a:	f8 a1       	ldd	r31, Y+32	; 0x20
    374c:	90 85       	ldd	r25, Z+8	; 0x08
    374e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3750:	f8 a1       	ldd	r31, Y+32	; 0x20
    3752:	81 85       	ldd	r24, Z+9	; 0x09
    3754:	1f 86       	std	Y+15, r1	; 0x0f
    3756:	18 8a       	std	Y+16, r1	; 0x10
    3758:	19 8a       	std	Y+17, r1	; 0x11
    375a:	1a 8a       	std	Y+18, r1	; 0x12
    375c:	9f 87       	std	Y+15, r25	; 0x0f
    375e:	88 8b       	std	Y+16, r24	; 0x10
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	89 8b       	std	Y+17, r24	; 0x11

    ST_GPIO_cfg_t pinE = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinEPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinEPortName};
    3764:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3766:	f8 a1       	ldd	r31, Y+32	; 0x20
    3768:	92 85       	ldd	r25, Z+10	; 0x0a
    376a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    376c:	f8 a1       	ldd	r31, Y+32	; 0x20
    376e:	83 85       	ldd	r24, Z+11	; 0x0b
    3770:	1b 8a       	std	Y+19, r1	; 0x13
    3772:	1c 8a       	std	Y+20, r1	; 0x14
    3774:	1d 8a       	std	Y+21, r1	; 0x15
    3776:	1e 8a       	std	Y+22, r1	; 0x16
    3778:	9b 8b       	std	Y+19, r25	; 0x13
    377a:	8c 8b       	std	Y+20, r24	; 0x14
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	8d 8b       	std	Y+21, r24	; 0x15

    ST_GPIO_cfg_t pinF = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinFPortName};
    3780:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3782:	f8 a1       	ldd	r31, Y+32	; 0x20
    3784:	94 85       	ldd	r25, Z+12	; 0x0c
    3786:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3788:	f8 a1       	ldd	r31, Y+32	; 0x20
    378a:	85 85       	ldd	r24, Z+13	; 0x0d
    378c:	1f 8a       	std	Y+23, r1	; 0x17
    378e:	18 8e       	std	Y+24, r1	; 0x18
    3790:	19 8e       	std	Y+25, r1	; 0x19
    3792:	1a 8e       	std	Y+26, r1	; 0x1a
    3794:	9f 8b       	std	Y+23, r25	; 0x17
    3796:	88 8f       	std	Y+24, r24	; 0x18
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	89 8f       	std	Y+25, r24	; 0x19

    ST_GPIO_cfg_t pinG = {
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinGPinNumber,
        .portName = ST_ptrSsdDualCfgInstance->ssdPinGPortName};
    379c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    379e:	f8 a1       	ldd	r31, Y+32	; 0x20
    37a0:	96 85       	ldd	r25, Z+14	; 0x0e
    37a2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    37a4:	f8 a1       	ldd	r31, Y+32	; 0x20
    37a6:	87 85       	ldd	r24, Z+15	; 0x0f
    37a8:	1b 8e       	std	Y+27, r1	; 0x1b
    37aa:	1c 8e       	std	Y+28, r1	; 0x1c
    37ac:	1d 8e       	std	Y+29, r1	; 0x1d
    37ae:	1e 8e       	std	Y+30, r1	; 0x1e
    37b0:	9b 8f       	std	Y+27, r25	; 0x1b
    37b2:	8c 8f       	std	Y+28, r24	; 0x1c
    37b4:	81 e0       	ldi	r24, 0x01	; 1
    37b6:	8d 8f       	std	Y+29, r24	; 0x1d

    gpioRet = GPIO_initPin(&pinA);
    37b8:	ce 01       	movw	r24, r28
    37ba:	03 96       	adiw	r24, 0x03	; 3
    37bc:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    37c0:	89 83       	std	Y+1, r24	; 0x01
    if (gpioRet == GPIO_OK) {
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	88 23       	and	r24, r24
    37c6:	21 f4       	brne	.+8      	; 0x37d0 <SSD_dualInit+0x106>
      GPIO_initPin(&pinB);
    37c8:	ce 01       	movw	r24, r28
    37ca:	07 96       	adiw	r24, 0x07	; 7
    37cc:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	88 23       	and	r24, r24
    37d4:	21 f4       	brne	.+8      	; 0x37de <SSD_dualInit+0x114>
      GPIO_initPin(&pinC);
    37d6:	ce 01       	movw	r24, r28
    37d8:	0b 96       	adiw	r24, 0x0b	; 11
    37da:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	88 23       	and	r24, r24
    37e2:	21 f4       	brne	.+8      	; 0x37ec <SSD_dualInit+0x122>
      GPIO_initPin(&pinD);
    37e4:	ce 01       	movw	r24, r28
    37e6:	0f 96       	adiw	r24, 0x0f	; 15
    37e8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	88 23       	and	r24, r24
    37f0:	21 f4       	brne	.+8      	; 0x37fa <SSD_dualInit+0x130>
      GPIO_initPin(&pinE);
    37f2:	ce 01       	movw	r24, r28
    37f4:	43 96       	adiw	r24, 0x13	; 19
    37f6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    37fa:	89 81       	ldd	r24, Y+1	; 0x01
    37fc:	88 23       	and	r24, r24
    37fe:	21 f4       	brne	.+8      	; 0x3808 <SSD_dualInit+0x13e>
      GPIO_initPin(&pinF);
    3800:	ce 01       	movw	r24, r28
    3802:	47 96       	adiw	r24, 0x17	; 23
    3804:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }
    if (gpioRet == GPIO_OK) {
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	88 23       	and	r24, r24
    380c:	21 f4       	brne	.+8      	; 0x3816 <SSD_dualInit+0x14c>
      GPIO_initPin(&pinG);
    380e:	ce 01       	movw	r24, r28
    3810:	4b 96       	adiw	r24, 0x1b	; 27
    3812:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    } else {
      /*Do Nothing*/
    }

    if (gpioRet == GPIO_OK) {
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	88 23       	and	r24, r24
    381a:	11 f4       	brne	.+4      	; 0x3820 <SSD_dualInit+0x156>
      ssdRet = SSD_OK;
    381c:	1a 82       	std	Y+2, r1	; 0x02
    381e:	05 c0       	rjmp	.+10     	; 0x382a <SSD_dualInit+0x160>
    } else {
      ssdRet = SSD_NOK;
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	8a 83       	std	Y+2, r24	; 0x02
    3824:	02 c0       	rjmp	.+4      	; 0x382a <SSD_dualInit+0x160>
    }
  } else {
    ssdRet = SSD_NULL_PTR;
    3826:	82 e0       	ldi	r24, 0x02	; 2
    3828:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ssdRet;
    382a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    382c:	a0 96       	adiw	r28, 0x20	; 32
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	08 95       	ret

0000383e <SSD_dualSetCurrentSegmentComPin>:

EN_SSD_systemState_t SSD_dualSetCurrentSegmentComPin(
    ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance) {
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	a5 97       	sbiw	r28, 0x25	; 37
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	9c a3       	std	Y+36, r25	; 0x24
    3854:	8b a3       	std	Y+35, r24	; 0x23

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    385e:	8b a1       	ldd	r24, Y+35	; 0x23
    3860:	9c a1       	ldd	r25, Y+36	; 0x24
    3862:	00 97       	sbiw	r24, 0x00	; 0
    3864:	09 f4       	brne	.+2      	; 0x3868 <SSD_dualSetCurrentSegmentComPin+0x2a>
    3866:	f7 c0       	rjmp	.+494    	; 0x3a56 <SSD_dualSetCurrentSegmentComPin+0x218>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    3868:	eb a1       	ldd	r30, Y+35	; 0x23
    386a:	fc a1       	ldd	r31, Y+36	; 0x24
    386c:	86 89       	ldd	r24, Z+22	; 0x16
    386e:	88 23       	and	r24, r24
    3870:	09 f0       	breq	.+2      	; 0x3874 <SSD_dualSetCurrentSegmentComPin+0x36>
    3872:	76 c0       	rjmp	.+236    	; 0x3960 <SSD_dualSetCurrentSegmentComPin+0x122>
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    3874:	eb a1       	ldd	r30, Y+35	; 0x23
    3876:	fc a1       	ldd	r31, Y+36	; 0x24
    3878:	80 81       	ld	r24, Z
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	c9 f4       	brne	.+50     	; 0x38b0 <SSD_dualSetCurrentSegmentComPin+0x72>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    387e:	eb a1       	ldd	r30, Y+35	; 0x23
    3880:	fc a1       	ldd	r31, Y+36	; 0x24
    3882:	92 89       	ldd	r25, Z+18	; 0x12
    3884:	eb a1       	ldd	r30, Y+35	; 0x23
    3886:	fc a1       	ldd	r31, Y+36	; 0x24
    3888:	83 89       	ldd	r24, Z+19	; 0x13
    388a:	9b 83       	std	Y+3, r25	; 0x03
    388c:	8c 83       	std	Y+4, r24	; 0x04
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	8d 83       	std	Y+5, r24	; 0x05
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	8e 83       	std	Y+6, r24	; 0x06

        gpioRet = GPIO_initPin(&pinFirstCom);
    3896:	ce 01       	movw	r24, r28
    3898:	03 96       	adiw	r24, 0x03	; 3
    389a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    389e:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	88 23       	and	r24, r24
    38a4:	11 f4       	brne	.+4      	; 0x38aa <SSD_dualSetCurrentSegmentComPin+0x6c>
          ssdRet = SSD_OK;
    38a6:	1a 82       	std	Y+2, r1	; 0x02
    38a8:	1f c0       	rjmp	.+62     	; 0x38e8 <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	8a 83       	std	Y+2, r24	; 0x02
    38ae:	1c c0       	rjmp	.+56     	; 0x38e8 <SSD_dualSetCurrentSegmentComPin+0xaa>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    38b0:	eb a1       	ldd	r30, Y+35	; 0x23
    38b2:	fc a1       	ldd	r31, Y+36	; 0x24
    38b4:	80 81       	ld	r24, Z
    38b6:	88 23       	and	r24, r24
    38b8:	b9 f4       	brne	.+46     	; 0x38e8 <SSD_dualSetCurrentSegmentComPin+0xaa>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    38ba:	eb a1       	ldd	r30, Y+35	; 0x23
    38bc:	fc a1       	ldd	r31, Y+36	; 0x24
    38be:	92 89       	ldd	r25, Z+18	; 0x12
    38c0:	eb a1       	ldd	r30, Y+35	; 0x23
    38c2:	fc a1       	ldd	r31, Y+36	; 0x24
    38c4:	83 89       	ldd	r24, Z+19	; 0x13
    38c6:	9f 83       	std	Y+7, r25	; 0x07
    38c8:	88 87       	std	Y+8, r24	; 0x08
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	89 87       	std	Y+9, r24	; 0x09
    38ce:	1a 86       	std	Y+10, r1	; 0x0a

        gpioRet = GPIO_initPin(&pinFirstCom);
    38d0:	ce 01       	movw	r24, r28
    38d2:	07 96       	adiw	r24, 0x07	; 7
    38d4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    38d8:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    38da:	89 81       	ldd	r24, Y+1	; 0x01
    38dc:	88 23       	and	r24, r24
    38de:	11 f4       	brne	.+4      	; 0x38e4 <SSD_dualSetCurrentSegmentComPin+0xa6>
          ssdRet = SSD_OK;
    38e0:	1a 82       	std	Y+2, r1	; 0x02
    38e2:	02 c0       	rjmp	.+4      	; 0x38e8 <SSD_dualSetCurrentSegmentComPin+0xaa>
        } else {
          ssdRet = SSD_NOK;
    38e4:	81 e0       	ldi	r24, 0x01	; 1
    38e6:	8a 83       	std	Y+2, r24	; 0x02

      } else {
        /*Do Nothing*/
      }

      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    38e8:	eb a1       	ldd	r30, Y+35	; 0x23
    38ea:	fc a1       	ldd	r31, Y+36	; 0x24
    38ec:	81 81       	ldd	r24, Z+1	; 0x01
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	c1 f4       	brne	.+48     	; 0x3922 <SSD_dualSetCurrentSegmentComPin+0xe4>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    38f2:	eb a1       	ldd	r30, Y+35	; 0x23
    38f4:	fc a1       	ldd	r31, Y+36	; 0x24
    38f6:	94 89       	ldd	r25, Z+20	; 0x14
    38f8:	eb a1       	ldd	r30, Y+35	; 0x23
    38fa:	fc a1       	ldd	r31, Y+36	; 0x24
    38fc:	85 89       	ldd	r24, Z+21	; 0x15
    38fe:	9b 87       	std	Y+11, r25	; 0x0b
    3900:	8c 87       	std	Y+12, r24	; 0x0c
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	8d 87       	std	Y+13, r24	; 0x0d
    3906:	1e 86       	std	Y+14, r1	; 0x0e

        gpioRet = GPIO_initPin(&pinSecondCom);
    3908:	ce 01       	movw	r24, r28
    390a:	0b 96       	adiw	r24, 0x0b	; 11
    390c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3910:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	88 23       	and	r24, r24
    3916:	11 f4       	brne	.+4      	; 0x391c <SSD_dualSetCurrentSegmentComPin+0xde>
          ssdRet = SSD_OK;
    3918:	1a 82       	std	Y+2, r1	; 0x02
    391a:	9f c0       	rjmp	.+318    	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	8a 83       	std	Y+2, r24	; 0x02
    3920:	9c c0       	rjmp	.+312    	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    3922:	eb a1       	ldd	r30, Y+35	; 0x23
    3924:	fc a1       	ldd	r31, Y+36	; 0x24
    3926:	81 81       	ldd	r24, Z+1	; 0x01
    3928:	88 23       	and	r24, r24
    392a:	09 f0       	breq	.+2      	; 0x392e <SSD_dualSetCurrentSegmentComPin+0xf0>
    392c:	96 c0       	rjmp	.+300    	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    392e:	eb a1       	ldd	r30, Y+35	; 0x23
    3930:	fc a1       	ldd	r31, Y+36	; 0x24
    3932:	94 89       	ldd	r25, Z+20	; 0x14
    3934:	eb a1       	ldd	r30, Y+35	; 0x23
    3936:	fc a1       	ldd	r31, Y+36	; 0x24
    3938:	85 89       	ldd	r24, Z+21	; 0x15
    393a:	9f 87       	std	Y+15, r25	; 0x0f
    393c:	88 8b       	std	Y+16, r24	; 0x10
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	89 8b       	std	Y+17, r24	; 0x11
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	8a 8b       	std	Y+18, r24	; 0x12

        gpioRet = GPIO_initPin(&pinSecondCom);
    3946:	ce 01       	movw	r24, r28
    3948:	0f 96       	adiw	r24, 0x0f	; 15
    394a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    394e:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	88 23       	and	r24, r24
    3954:	11 f4       	brne	.+4      	; 0x395a <SSD_dualSetCurrentSegmentComPin+0x11c>
          ssdRet = SSD_OK;
    3956:	1a 82       	std	Y+2, r1	; 0x02
    3958:	80 c0       	rjmp	.+256    	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    395a:	81 e0       	ldi	r24, 0x01	; 1
    395c:	8a 83       	std	Y+2, r24	; 0x02
    395e:	7d c0       	rjmp	.+250    	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else {
        /*Do Nothing*/
      }

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    3960:	eb a1       	ldd	r30, Y+35	; 0x23
    3962:	fc a1       	ldd	r31, Y+36	; 0x24
    3964:	86 89       	ldd	r24, Z+22	; 0x16
    3966:	81 30       	cpi	r24, 0x01	; 1
    3968:	09 f0       	breq	.+2      	; 0x396c <SSD_dualSetCurrentSegmentComPin+0x12e>
    396a:	77 c0       	rjmp	.+238    	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
      if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType == SSD_ANODE_COMMON) {
    396c:	eb a1       	ldd	r30, Y+35	; 0x23
    396e:	fc a1       	ldd	r31, Y+36	; 0x24
    3970:	81 81       	ldd	r24, Z+1	; 0x01
    3972:	81 30       	cpi	r24, 0x01	; 1
    3974:	c9 f4       	brne	.+50     	; 0x39a8 <SSD_dualSetCurrentSegmentComPin+0x16a>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    3976:	eb a1       	ldd	r30, Y+35	; 0x23
    3978:	fc a1       	ldd	r31, Y+36	; 0x24
    397a:	94 89       	ldd	r25, Z+20	; 0x14
    397c:	eb a1       	ldd	r30, Y+35	; 0x23
    397e:	fc a1       	ldd	r31, Y+36	; 0x24
    3980:	85 89       	ldd	r24, Z+21	; 0x15
    3982:	9b 8b       	std	Y+19, r25	; 0x13
    3984:	8c 8b       	std	Y+20, r24	; 0x14
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	8d 8b       	std	Y+21, r24	; 0x15
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	8e 8b       	std	Y+22, r24	; 0x16

        gpioRet = GPIO_initPin(&pinSecondCom);
    398e:	ce 01       	movw	r24, r28
    3990:	43 96       	adiw	r24, 0x13	; 19
    3992:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3996:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    3998:	89 81       	ldd	r24, Y+1	; 0x01
    399a:	88 23       	and	r24, r24
    399c:	11 f4       	brne	.+4      	; 0x39a2 <SSD_dualSetCurrentSegmentComPin+0x164>
          ssdRet = SSD_OK;
    399e:	1a 82       	std	Y+2, r1	; 0x02
    39a0:	1f c0       	rjmp	.+62     	; 0x39e0 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	8a 83       	std	Y+2, r24	; 0x02
    39a6:	1c c0       	rjmp	.+56     	; 0x39e0 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        }

      } else if (ST_ptrSsdDualCfgInstance->ssdSecondCommonType ==
    39a8:	eb a1       	ldd	r30, Y+35	; 0x23
    39aa:	fc a1       	ldd	r31, Y+36	; 0x24
    39ac:	81 81       	ldd	r24, Z+1	; 0x01
    39ae:	88 23       	and	r24, r24
    39b0:	b9 f4       	brne	.+46     	; 0x39e0 <SSD_dualSetCurrentSegmentComPin+0x1a2>

        ST_GPIO_cfg_t pinSecondCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName};
    39b2:	eb a1       	ldd	r30, Y+35	; 0x23
    39b4:	fc a1       	ldd	r31, Y+36	; 0x24
    39b6:	94 89       	ldd	r25, Z+20	; 0x14
    39b8:	eb a1       	ldd	r30, Y+35	; 0x23
    39ba:	fc a1       	ldd	r31, Y+36	; 0x24
    39bc:	85 89       	ldd	r24, Z+21	; 0x15
    39be:	9f 8b       	std	Y+23, r25	; 0x17
    39c0:	88 8f       	std	Y+24, r24	; 0x18
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	89 8f       	std	Y+25, r24	; 0x19
    39c6:	1a 8e       	std	Y+26, r1	; 0x1a

        gpioRet = GPIO_initPin(&pinSecondCom);
    39c8:	ce 01       	movw	r24, r28
    39ca:	47 96       	adiw	r24, 0x17	; 23
    39cc:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    39d0:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	88 23       	and	r24, r24
    39d6:	11 f4       	brne	.+4      	; 0x39dc <SSD_dualSetCurrentSegmentComPin+0x19e>
          ssdRet = SSD_OK;
    39d8:	1a 82       	std	Y+2, r1	; 0x02
    39da:	02 c0       	rjmp	.+4      	; 0x39e0 <SSD_dualSetCurrentSegmentComPin+0x1a2>
        } else {
          ssdRet = SSD_NOK;
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	8a 83       	std	Y+2, r24	; 0x02
        }
      } else {
        /*Do Nothing*/
      }
      if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType == SSD_ANODE_COMMON) {
    39e0:	eb a1       	ldd	r30, Y+35	; 0x23
    39e2:	fc a1       	ldd	r31, Y+36	; 0x24
    39e4:	80 81       	ld	r24, Z
    39e6:	81 30       	cpi	r24, 0x01	; 1
    39e8:	c1 f4       	brne	.+48     	; 0x3a1a <SSD_dualSetCurrentSegmentComPin+0x1dc>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_LOW,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    39ea:	eb a1       	ldd	r30, Y+35	; 0x23
    39ec:	fc a1       	ldd	r31, Y+36	; 0x24
    39ee:	92 89       	ldd	r25, Z+18	; 0x12
    39f0:	eb a1       	ldd	r30, Y+35	; 0x23
    39f2:	fc a1       	ldd	r31, Y+36	; 0x24
    39f4:	83 89       	ldd	r24, Z+19	; 0x13
    39f6:	9b 8f       	std	Y+27, r25	; 0x1b
    39f8:	8c 8f       	std	Y+28, r24	; 0x1c
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	8d 8f       	std	Y+29, r24	; 0x1d
    39fe:	1e 8e       	std	Y+30, r1	; 0x1e

        gpioRet = GPIO_initPin(&pinFirstCom);
    3a00:	ce 01       	movw	r24, r28
    3a02:	4b 96       	adiw	r24, 0x1b	; 27
    3a04:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3a08:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	88 23       	and	r24, r24
    3a0e:	11 f4       	brne	.+4      	; 0x3a14 <SSD_dualSetCurrentSegmentComPin+0x1d6>
          ssdRet = SSD_OK;
    3a10:	1a 82       	std	Y+2, r1	; 0x02
    3a12:	23 c0       	rjmp	.+70     	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	8a 83       	std	Y+2, r24	; 0x02
    3a18:	20 c0       	rjmp	.+64     	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
        }
      } else if (ST_ptrSsdDualCfgInstance->ssdFirstCommonType ==
    3a1a:	eb a1       	ldd	r30, Y+35	; 0x23
    3a1c:	fc a1       	ldd	r31, Y+36	; 0x24
    3a1e:	80 81       	ld	r24, Z
    3a20:	88 23       	and	r24, r24
    3a22:	d9 f4       	brne	.+54     	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>

        ST_GPIO_cfg_t pinFirstCom = {
            .logicOnPin = GPIO_HIGH,
            .pinDirection = GPIO_OUTPUT,
            .pinNumber = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber,
            .portName = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName};
    3a24:	eb a1       	ldd	r30, Y+35	; 0x23
    3a26:	fc a1       	ldd	r31, Y+36	; 0x24
    3a28:	92 89       	ldd	r25, Z+18	; 0x12
    3a2a:	eb a1       	ldd	r30, Y+35	; 0x23
    3a2c:	fc a1       	ldd	r31, Y+36	; 0x24
    3a2e:	83 89       	ldd	r24, Z+19	; 0x13
    3a30:	9f 8f       	std	Y+31, r25	; 0x1f
    3a32:	88 a3       	std	Y+32, r24	; 0x20
    3a34:	81 e0       	ldi	r24, 0x01	; 1
    3a36:	89 a3       	std	Y+33, r24	; 0x21
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	8a a3       	std	Y+34, r24	; 0x22

        gpioRet = GPIO_initPin(&pinFirstCom);
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	4f 96       	adiw	r24, 0x1f	; 31
    3a40:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3a44:	89 83       	std	Y+1, r24	; 0x01
        if (gpioRet == GPIO_OK) {
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	88 23       	and	r24, r24
    3a4a:	11 f4       	brne	.+4      	; 0x3a50 <SSD_dualSetCurrentSegmentComPin+0x212>
          ssdRet = SSD_OK;
    3a4c:	1a 82       	std	Y+2, r1	; 0x02
    3a4e:	05 c0       	rjmp	.+10     	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
        } else {
          ssdRet = SSD_NOK;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	8a 83       	std	Y+2, r24	; 0x02
    3a54:	02 c0       	rjmp	.+4      	; 0x3a5a <SSD_dualSetCurrentSegmentComPin+0x21c>
      }
    } else {
    }

  } else {
    ssdRet = SSD_NULL_PTR;
    3a56:	82 e0       	ldi	r24, 0x02	; 2
    3a58:	8a 83       	std	Y+2, r24	; 0x02
  }
}
    3a5a:	a5 96       	adiw	r28, 0x25	; 37
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	cf 91       	pop	r28
    3a68:	df 91       	pop	r29
    3a6a:	08 95       	ret

00003a6c <SSD_dualSwitchSegment>:

EN_SSD_systemState_t
SSD_dualSwitchSegment(ST_SSD_DualCfg_t *ST_ptrSsdDualCfgInstance,
                      EN_SSD_index_t indexOfTheDisplay) {
    3a6c:	df 93       	push	r29
    3a6e:	cf 93       	push	r28
    3a70:	00 d0       	rcall	.+0      	; 0x3a72 <SSD_dualSwitchSegment+0x6>
    3a72:	00 d0       	rcall	.+0      	; 0x3a74 <SSD_dualSwitchSegment+0x8>
    3a74:	cd b7       	in	r28, 0x3d	; 61
    3a76:	de b7       	in	r29, 0x3e	; 62
    3a78:	9b 83       	std	Y+3, r25	; 0x03
    3a7a:	8a 83       	std	Y+2, r24	; 0x02
    3a7c:	6c 83       	std	Y+4, r22	; 0x04

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	9b 81       	ldd	r25, Y+3	; 0x03
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	31 f0       	breq	.+12     	; 0x3a96 <SSD_dualSwitchSegment+0x2a>
    ST_ptrSsdDualCfgInstance->ssdCurrentDisplay = indexOfTheDisplay;
    3a8a:	ea 81       	ldd	r30, Y+2	; 0x02
    3a8c:	fb 81       	ldd	r31, Y+3	; 0x03
    3a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a90:	86 8b       	std	Z+22, r24	; 0x16
    ssdRet = SSD_OK;
    3a92:	19 82       	std	Y+1, r1	; 0x01
    3a94:	02 c0       	rjmp	.+4      	; 0x3a9a <SSD_dualSwitchSegment+0x2e>
  } else {
    ssdRet = SSD_NULL_PTR;
    3a96:	82 e0       	ldi	r24, 0x02	; 2
    3a98:	89 83       	std	Y+1, r24	; 0x01
  }
  return ssdRet;
    3a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	0f 90       	pop	r0
    3aa2:	0f 90       	pop	r0
    3aa4:	cf 91       	pop	r28
    3aa6:	df 91       	pop	r29
    3aa8:	08 95       	ret

00003aaa <SSD_dualSetNumberOnSsd>:

EN_SSD_systemState_t
SSD_dualSetNumberOnSsd(ST_SSD_DualCfg_t const *ST_ptrSsdDualCfgInstance,
                       EN_SSD_numbers_t valueOfNumber) {
    3aaa:	cf 92       	push	r12
    3aac:	df 92       	push	r13
    3aae:	ef 92       	push	r14
    3ab0:	ff 92       	push	r15
    3ab2:	0f 93       	push	r16
    3ab4:	1f 93       	push	r17
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
    3abe:	6c 97       	sbiw	r28, 0x1c	; 28
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	de bf       	out	0x3e, r29	; 62
    3ac6:	0f be       	out	0x3f, r0	; 63
    3ac8:	cd bf       	out	0x3d, r28	; 61
    3aca:	99 8f       	std	Y+25, r25	; 0x19
    3acc:	88 8f       	std	Y+24, r24	; 0x18
    3ace:	6a 8f       	std	Y+26, r22	; 0x1a

  EN_SSD_systemState_t ssdRet = SSD_NOK;
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	8c 83       	std	Y+4, r24	; 0x04
  EN_SSD_typeOfCommon_t currentCommonType;
  EN_GPIO_mcuPins_t currentCommonPin;
  EN_GPIO_mcuPorts_t currentCommonPort;

  if (PTR_NULL != ST_ptrSsdDualCfgInstance) {
    3ad4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ad6:	99 8d       	ldd	r25, Y+25	; 0x19
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	09 f4       	brne	.+2      	; 0x3ade <SSD_dualSetNumberOnSsd+0x34>
    3adc:	73 c0       	rjmp	.+230    	; 0x3bc4 <SSD_dualSetNumberOnSsd+0x11a>
    if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_FIRST) {
    3ade:	e8 8d       	ldd	r30, Y+24	; 0x18
    3ae0:	f9 8d       	ldd	r31, Y+25	; 0x19
    3ae2:	86 89       	ldd	r24, Z+22	; 0x16
    3ae4:	88 23       	and	r24, r24
    3ae6:	69 f4       	brne	.+26     	; 0x3b02 <SSD_dualSetNumberOnSsd+0x58>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdFirstCommonType;
    3ae8:	e8 8d       	ldd	r30, Y+24	; 0x18
    3aea:	f9 8d       	ldd	r31, Y+25	; 0x19
    3aec:	80 81       	ld	r24, Z
    3aee:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinFirstComPortName;
    3af0:	e8 8d       	ldd	r30, Y+24	; 0x18
    3af2:	f9 8d       	ldd	r31, Y+25	; 0x19
    3af4:	82 89       	ldd	r24, Z+18	; 0x12
    3af6:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinFirstComPinNumber;
    3af8:	e8 8d       	ldd	r30, Y+24	; 0x18
    3afa:	f9 8d       	ldd	r31, Y+25	; 0x19
    3afc:	83 89       	ldd	r24, Z+19	; 0x13
    3afe:	8a 83       	std	Y+2, r24	; 0x02
    3b00:	11 c0       	rjmp	.+34     	; 0x3b24 <SSD_dualSetNumberOnSsd+0x7a>

    } else if (ST_ptrSsdDualCfgInstance->ssdCurrentDisplay == SSD_SECOND) {
    3b02:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b04:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b06:	86 89       	ldd	r24, Z+22	; 0x16
    3b08:	81 30       	cpi	r24, 0x01	; 1
    3b0a:	61 f4       	brne	.+24     	; 0x3b24 <SSD_dualSetNumberOnSsd+0x7a>

      currentCommonType = ST_ptrSsdDualCfgInstance->ssdSecondCommonType;
    3b0c:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b0e:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b10:	81 81       	ldd	r24, Z+1	; 0x01
    3b12:	8b 83       	std	Y+3, r24	; 0x03
      currentCommonPort = ST_ptrSsdDualCfgInstance->ssdPinSecondComPortName;
    3b14:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b16:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b18:	84 89       	ldd	r24, Z+20	; 0x14
    3b1a:	89 83       	std	Y+1, r24	; 0x01
      currentCommonPin = ST_ptrSsdDualCfgInstance->ssdPinSecondComPinNumber;
    3b1c:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b1e:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b20:	85 89       	ldd	r24, Z+21	; 0x15
    3b22:	8a 83       	std	Y+2, r24	; 0x02
        .ssdPinDPortName = ST_ptrSsdDualCfgInstance->ssdPinDPortName,
        .ssdPinEPortName = ST_ptrSsdDualCfgInstance->ssdPinEPortName,
        .ssdPinFPortName = ST_ptrSsdDualCfgInstance->ssdPinFPortName,
        .ssdPinGPortName = ST_ptrSsdDualCfgInstance->ssdPinGPortName,
        .ssdPinComPortName = currentCommonPort,
        .ssdPinComPinNumber = currentCommonPin};
    3b24:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b26:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b28:	92 81       	ldd	r25, Z+2	; 0x02
    3b2a:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b2c:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b2e:	23 81       	ldd	r18, Z+3	; 0x03
    3b30:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b32:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b34:	34 81       	ldd	r19, Z+4	; 0x04
    3b36:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b38:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b3a:	45 81       	ldd	r20, Z+5	; 0x05
    3b3c:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b3e:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b40:	56 81       	ldd	r21, Z+6	; 0x06
    3b42:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b44:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b46:	67 81       	ldd	r22, Z+7	; 0x07
    3b48:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b4a:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b4c:	70 85       	ldd	r23, Z+8	; 0x08
    3b4e:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b50:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b52:	a1 85       	ldd	r26, Z+9	; 0x09
    3b54:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b56:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b58:	b2 85       	ldd	r27, Z+10	; 0x0a
    3b5a:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b5c:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b5e:	13 85       	ldd	r17, Z+11	; 0x0b
    3b60:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b62:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b64:	04 85       	ldd	r16, Z+12	; 0x0c
    3b66:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b68:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b6a:	f5 84       	ldd	r15, Z+13	; 0x0d
    3b6c:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b6e:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b70:	e6 84       	ldd	r14, Z+14	; 0x0e
    3b72:	e8 8d       	ldd	r30, Y+24	; 0x18
    3b74:	f9 8d       	ldd	r31, Y+25	; 0x19
    3b76:	d7 84       	ldd	r13, Z+15	; 0x0f
    3b78:	83 e1       	ldi	r24, 0x13	; 19
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	35 96       	adiw	r30, 0x05	; 5
    3b7e:	fc 8f       	std	Y+28, r31	; 0x1c
    3b80:	eb 8f       	std	Y+27, r30	; 0x1b
    3b82:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3b84:	fc 8d       	ldd	r31, Y+28	; 0x1c
    3b86:	c8 2e       	mov	r12, r24
    3b88:	11 92       	st	Z+, r1
    3b8a:	ca 94       	dec	r12
    3b8c:	e9 f7       	brne	.-6      	; 0x3b88 <SSD_dualSetNumberOnSsd+0xde>
    3b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b90:	8d 83       	std	Y+5, r24	; 0x05
    3b92:	9e 83       	std	Y+6, r25	; 0x06
    3b94:	2f 83       	std	Y+7, r18	; 0x07
    3b96:	38 87       	std	Y+8, r19	; 0x08
    3b98:	49 87       	std	Y+9, r20	; 0x09
    3b9a:	5a 87       	std	Y+10, r21	; 0x0a
    3b9c:	6b 87       	std	Y+11, r22	; 0x0b
    3b9e:	7c 87       	std	Y+12, r23	; 0x0c
    3ba0:	ad 87       	std	Y+13, r26	; 0x0d
    3ba2:	be 87       	std	Y+14, r27	; 0x0e
    3ba4:	1f 87       	std	Y+15, r17	; 0x0f
    3ba6:	08 8b       	std	Y+16, r16	; 0x10
    3ba8:	f9 8a       	std	Y+17, r15	; 0x11
    3baa:	ea 8a       	std	Y+18, r14	; 0x12
    3bac:	db 8a       	std	Y+19, r13	; 0x13
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	8c 8b       	std	Y+20, r24	; 0x14
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	8d 8b       	std	Y+21, r24	; 0x15

    ssdRet = SSD_setNumberOnSsd(&curruntSsdPins, valueOfNumber);
    3bb6:	ce 01       	movw	r24, r28
    3bb8:	05 96       	adiw	r24, 0x05	; 5
    3bba:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3bbc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <SSD_setNumberOnSsd>
    3bc0:	8c 83       	std	Y+4, r24	; 0x04
    3bc2:	02 c0       	rjmp	.+4      	; 0x3bc8 <SSD_dualSetNumberOnSsd+0x11e>
  } else {
    ssdRet = SSD_NOK;
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	8c 83       	std	Y+4, r24	; 0x04
  }
  return ssdRet;
    3bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3bca:	6c 96       	adiw	r28, 0x1c	; 28
    3bcc:	0f b6       	in	r0, 0x3f	; 63
    3bce:	f8 94       	cli
    3bd0:	de bf       	out	0x3e, r29	; 62
    3bd2:	0f be       	out	0x3f, r0	; 63
    3bd4:	cd bf       	out	0x3d, r28	; 61
    3bd6:	cf 91       	pop	r28
    3bd8:	df 91       	pop	r29
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	df 90       	pop	r13
    3be4:	cf 90       	pop	r12
    3be6:	08 95       	ret

00003be8 <HPB_init>:

#include "pb_interface.h"


EN_HPB_systeamState_t HPB_init(ST_HPB_cfg_t const *ST_ptrPbCfgInstance)
{
    3be8:	df 93       	push	r29
    3bea:	cf 93       	push	r28
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
    3bf0:	28 97       	sbiw	r28, 0x08	; 8
    3bf2:	0f b6       	in	r0, 0x3f	; 63
    3bf4:	f8 94       	cli
    3bf6:	de bf       	out	0x3e, r29	; 62
    3bf8:	0f be       	out	0x3f, r0	; 63
    3bfa:	cd bf       	out	0x3d, r28	; 61
    3bfc:	98 87       	std	Y+8, r25	; 0x08
    3bfe:	8f 83       	std	Y+7, r24	; 0x07
	EN_HPB_systeamState_t pbRet = HPB_OK;
    3c00:	1a 82       	std	Y+2, r1	; 0x02
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrPbCfgInstance)
    3c06:	8f 81       	ldd	r24, Y+7	; 0x07
    3c08:	98 85       	ldd	r25, Y+8	; 0x08
    3c0a:	00 97       	sbiw	r24, 0x00	; 0
    3c0c:	d1 f0       	breq	.+52     	; 0x3c42 <HPB_init+0x5a>
		{
				.portName = ST_ptrPbCfgInstance->pbPort,
				.pinNumber = ST_ptrPbCfgInstance->PbPin,
				.pinDirection = GPIO_INPUT,
				.logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrPbCfgInstance->PbInternalResistor
		};
    3c0e:	ef 81       	ldd	r30, Y+7	; 0x07
    3c10:	f8 85       	ldd	r31, Y+8	; 0x08
    3c12:	81 81       	ldd	r24, Z+1	; 0x01
    3c14:	ef 81       	ldd	r30, Y+7	; 0x07
    3c16:	f8 85       	ldd	r31, Y+8	; 0x08
    3c18:	90 81       	ld	r25, Z
    3c1a:	ef 81       	ldd	r30, Y+7	; 0x07
    3c1c:	f8 85       	ldd	r31, Y+8	; 0x08
    3c1e:	22 81       	ldd	r18, Z+2	; 0x02
    3c20:	8b 83       	std	Y+3, r24	; 0x03
    3c22:	9c 83       	std	Y+4, r25	; 0x04
    3c24:	1d 82       	std	Y+5, r1	; 0x05
    3c26:	2e 83       	std	Y+6, r18	; 0x06

		gpioRet = GPIO_initPin(&pbPinCfg);
    3c28:	ce 01       	movw	r24, r28
    3c2a:	03 96       	adiw	r24, 0x03	; 3
    3c2c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3c30:	89 83       	std	Y+1, r24	; 0x01

		if(gpioRet == GPIO_OK) pbRet = HPB_OK; else pbRet = HPB_NOK;
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	88 23       	and	r24, r24
    3c36:	11 f4       	brne	.+4      	; 0x3c3c <HPB_init+0x54>
    3c38:	1a 82       	std	Y+2, r1	; 0x02
    3c3a:	05 c0       	rjmp	.+10     	; 0x3c46 <HPB_init+0x5e>
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <HPB_init+0x5e>
	}
	else
	{
		pbRet = HPB_PTR_NULL;
    3c42:	82 e0       	ldi	r24, 0x02	; 2
    3c44:	8a 83       	std	Y+2, r24	; 0x02
	}

	return pbRet;
    3c46:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3c48:	28 96       	adiw	r28, 0x08	; 8
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
    3c54:	cf 91       	pop	r28
    3c56:	df 91       	pop	r29
    3c58:	08 95       	ret

00003c5a <HPB_getBtnStates>:

EN_HPB_systeamState_t HPB_getBtnStates(ST_HPB_cfg_t const *ST_ptrPbCfgInstance , EN_HPB_state_t *ptrOfStatesRet)
{
    3c5a:	df 93       	push	r29
    3c5c:	cf 93       	push	r28
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	2c 97       	sbiw	r28, 0x0c	; 12
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	9a 87       	std	Y+10, r25	; 0x0a
    3c70:	89 87       	std	Y+9, r24	; 0x09
    3c72:	7c 87       	std	Y+12, r23	; 0x0c
    3c74:	6b 87       	std	Y+11, r22	; 0x0b
	EN_HPB_systeamState_t pbRet = HPB_OK;
    3c76:	1b 82       	std	Y+3, r1	; 0x03
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	8a 83       	std	Y+2, r24	; 0x02

	if( (PTR_NULL != ST_ptrPbCfgInstance) && (PTR_NULL != ptrOfStatesRet))
    3c7c:	89 85       	ldd	r24, Y+9	; 0x09
    3c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c80:	00 97       	sbiw	r24, 0x00	; 0
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <HPB_getBtnStates+0x2c>
    3c84:	5c c0       	rjmp	.+184    	; 0x3d3e <HPB_getBtnStates+0xe4>
    3c86:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c88:	9c 85       	ldd	r25, Y+12	; 0x0c
    3c8a:	00 97       	sbiw	r24, 0x00	; 0
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <HPB_getBtnStates+0x36>
    3c8e:	57 c0       	rjmp	.+174    	; 0x3d3e <HPB_getBtnStates+0xe4>
	{
		ST_GPIO_cfg_t pbPinCfg =
		{
				.portName = ST_ptrPbCfgInstance->pbPort,
				.pinNumber = ST_ptrPbCfgInstance->PbPin,
		};
    3c90:	e9 85       	ldd	r30, Y+9	; 0x09
    3c92:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c94:	91 81       	ldd	r25, Z+1	; 0x01
    3c96:	e9 85       	ldd	r30, Y+9	; 0x09
    3c98:	fa 85       	ldd	r31, Y+10	; 0x0a
    3c9a:	80 81       	ld	r24, Z
    3c9c:	1c 82       	std	Y+4, r1	; 0x04
    3c9e:	1d 82       	std	Y+5, r1	; 0x05
    3ca0:	1e 82       	std	Y+6, r1	; 0x06
    3ca2:	1f 82       	std	Y+7, r1	; 0x07
    3ca4:	9c 83       	std	Y+4, r25	; 0x04
    3ca6:	8d 83       	std	Y+5, r24	; 0x05

		EN_GPIO_pinLogic_t pbPinLogic;
		EN_GPIO_pinLogic_t tempForDebouncing;
		gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
    3ca8:	ce 01       	movw	r24, r28
    3caa:	04 96       	adiw	r24, 0x04	; 4
    3cac:	9e 01       	movw	r18, r28
    3cae:	28 5f       	subi	r18, 0xF8	; 248
    3cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cb2:	b9 01       	movw	r22, r18
    3cb4:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <GPIO_readPinLogic>
    3cb8:	8a 83       	std	Y+2, r24	; 0x02
		tempForDebouncing = pbPinLogic;
    3cba:	88 85       	ldd	r24, Y+8	; 0x08
    3cbc:	89 83       	std	Y+1, r24	; 0x01
    3cbe:	09 c0       	rjmp	.+18     	; 0x3cd2 <HPB_getBtnStates+0x78>
		while(tempForDebouncing == pbPinLogic)
		{
			gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
    3cc0:	ce 01       	movw	r24, r28
    3cc2:	04 96       	adiw	r24, 0x04	; 4
    3cc4:	9e 01       	movw	r18, r28
    3cc6:	28 5f       	subi	r18, 0xF8	; 248
    3cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cca:	b9 01       	movw	r22, r18
    3ccc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <GPIO_readPinLogic>
    3cd0:	8a 83       	std	Y+2, r24	; 0x02

		EN_GPIO_pinLogic_t pbPinLogic;
		EN_GPIO_pinLogic_t tempForDebouncing;
		gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
		tempForDebouncing = pbPinLogic;
		while(tempForDebouncing == pbPinLogic)
    3cd2:	98 85       	ldd	r25, Y+8	; 0x08
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	89 17       	cp	r24, r25
    3cd8:	99 f3       	breq	.-26     	; 0x3cc0 <HPB_getBtnStates+0x66>
		{
			gpioRet = GPIO_readPinLogic(&pbPinCfg,&pbPinLogic);
		}
		if(gpioRet == GPIO_OK)
    3cda:	8a 81       	ldd	r24, Y+2	; 0x02
    3cdc:	88 23       	and	r24, r24
    3cde:	61 f5       	brne	.+88     	; 0x3d38 <HPB_getBtnStates+0xde>
		{
			if(ST_ptrPbCfgInstance->PbInternalResistor == HPB_PULL_UP)
    3ce0:	e9 85       	ldd	r30, Y+9	; 0x09
    3ce2:	fa 85       	ldd	r31, Y+10	; 0x0a
    3ce4:	82 81       	ldd	r24, Z+2	; 0x02
    3ce6:	81 30       	cpi	r24, 0x01	; 1
    3ce8:	89 f4       	brne	.+34     	; 0x3d0c <HPB_getBtnStates+0xb2>
			{
				if(pbPinLogic == GPIO_LOW)
    3cea:	88 85       	ldd	r24, Y+8	; 0x08
    3cec:	88 23       	and	r24, r24
    3cee:	29 f4       	brne	.+10     	; 0x3cfa <HPB_getBtnStates+0xa0>
				{
					*ptrOfStatesRet = HPB_STATE_PRESSED;
    3cf0:	eb 85       	ldd	r30, Y+11	; 0x0b
    3cf2:	fc 85       	ldd	r31, Y+12	; 0x0c
    3cf4:	10 82       	st	Z, r1
					pbRet = HPB_OK;
    3cf6:	1b 82       	std	Y+3, r1	; 0x03
    3cf8:	24 c0       	rjmp	.+72     	; 0x3d42 <HPB_getBtnStates+0xe8>
				}
				else if(pbPinLogic == GPIO_HIGH)
    3cfa:	88 85       	ldd	r24, Y+8	; 0x08
    3cfc:	81 30       	cpi	r24, 0x01	; 1
    3cfe:	09 f5       	brne	.+66     	; 0x3d42 <HPB_getBtnStates+0xe8>
				{
					*ptrOfStatesRet = HPB_STATE_RELEASED;
    3d00:	eb 85       	ldd	r30, Y+11	; 0x0b
    3d02:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	80 83       	st	Z, r24
					pbRet = HPB_OK;
    3d08:	1b 82       	std	Y+3, r1	; 0x03
    3d0a:	1b c0       	rjmp	.+54     	; 0x3d42 <HPB_getBtnStates+0xe8>
				}
				else /* Do Nothing */;

			}
			else if(ST_ptrPbCfgInstance->PbInternalResistor == HPB_PULL_DOWN)
    3d0c:	e9 85       	ldd	r30, Y+9	; 0x09
    3d0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3d10:	82 81       	ldd	r24, Z+2	; 0x02
    3d12:	88 23       	and	r24, r24
    3d14:	b1 f4       	brne	.+44     	; 0x3d42 <HPB_getBtnStates+0xe8>
			{
				if(pbPinLogic == GPIO_HIGH)
    3d16:	88 85       	ldd	r24, Y+8	; 0x08
    3d18:	81 30       	cpi	r24, 0x01	; 1
    3d1a:	29 f4       	brne	.+10     	; 0x3d26 <HPB_getBtnStates+0xcc>
				{
					*ptrOfStatesRet = HPB_STATE_PRESSED;
    3d1c:	eb 85       	ldd	r30, Y+11	; 0x0b
    3d1e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d20:	10 82       	st	Z, r1
					pbRet = HPB_OK;
    3d22:	1b 82       	std	Y+3, r1	; 0x03
    3d24:	0e c0       	rjmp	.+28     	; 0x3d42 <HPB_getBtnStates+0xe8>
				}
				else if(pbPinLogic == GPIO_LOW)
    3d26:	88 85       	ldd	r24, Y+8	; 0x08
    3d28:	88 23       	and	r24, r24
    3d2a:	59 f4       	brne	.+22     	; 0x3d42 <HPB_getBtnStates+0xe8>
				{
					*ptrOfStatesRet = HPB_STATE_RELEASED;
    3d2c:	eb 85       	ldd	r30, Y+11	; 0x0b
    3d2e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	80 83       	st	Z, r24
					pbRet = HPB_OK;
    3d34:	1b 82       	std	Y+3, r1	; 0x03
    3d36:	05 c0       	rjmp	.+10     	; 0x3d42 <HPB_getBtnStates+0xe8>
				else /* Do Nothing */;
			}else /* Do Nothing */;
		}
		else
		{
			pbRet = HPB_NOK;
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	8b 83       	std	Y+3, r24	; 0x03
    3d3c:	02 c0       	rjmp	.+4      	; 0x3d42 <HPB_getBtnStates+0xe8>
		}

	}
	else
	{
		pbRet = HPB_PTR_NULL;
    3d3e:	82 e0       	ldi	r24, 0x02	; 2
    3d40:	8b 83       	std	Y+3, r24	; 0x03
	}

	return pbRet;
    3d42:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3d44:	2c 96       	adiw	r28, 0x0c	; 12
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	de bf       	out	0x3e, r29	; 62
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	cd bf       	out	0x3d, r28	; 61
    3d50:	cf 91       	pop	r28
    3d52:	df 91       	pop	r29
    3d54:	08 95       	ret

00003d56 <LED_init>:
// Date          : 1 Aug 2023 */ GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "../../HAL/led/led_interface.h"

EN_LED_systemStates_t LED_init(ST_LED_cfg_t const *ST_ptrLedInstance) {
    3d56:	df 93       	push	r29
    3d58:	cf 93       	push	r28
    3d5a:	cd b7       	in	r28, 0x3d	; 61
    3d5c:	de b7       	in	r29, 0x3e	; 62
    3d5e:	28 97       	sbiw	r28, 0x08	; 8
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	98 87       	std	Y+8, r25	; 0x08
    3d6c:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    3d76:	8f 81       	ldd	r24, Y+7	; 0x07
    3d78:	98 85       	ldd	r25, Y+8	; 0x08
    3d7a:	00 97       	sbiw	r24, 0x00	; 0
    3d7c:	d9 f0       	breq	.+54     	; 0x3db4 <LED_init+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    3d7e:	ef 81       	ldd	r30, Y+7	; 0x07
    3d80:	f8 85       	ldd	r31, Y+8	; 0x08
    3d82:	81 81       	ldd	r24, Z+1	; 0x01
    3d84:	ef 81       	ldd	r30, Y+7	; 0x07
    3d86:	f8 85       	ldd	r31, Y+8	; 0x08
    3d88:	92 81       	ldd	r25, Z+2	; 0x02
    3d8a:	ef 81       	ldd	r30, Y+7	; 0x07
    3d8c:	f8 85       	ldd	r31, Y+8	; 0x08
    3d8e:	20 81       	ld	r18, Z
    3d90:	8b 83       	std	Y+3, r24	; 0x03
    3d92:	9c 83       	std	Y+4, r25	; 0x04
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	8d 83       	std	Y+5, r24	; 0x05
    3d98:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_initPin(&copyOfLedInstance);
    3d9a:	ce 01       	movw	r24, r28
    3d9c:	03 96       	adiw	r24, 0x03	; 3
    3d9e:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    3da2:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    3da4:	89 81       	ldd	r24, Y+1	; 0x01
    3da6:	88 23       	and	r24, r24
    3da8:	11 f4       	brne	.+4      	; 0x3dae <LED_init+0x58>
      ledRet = LED_OK;
    3daa:	1a 82       	std	Y+2, r1	; 0x02
    3dac:	05 c0       	rjmp	.+10     	; 0x3db8 <LED_init+0x62>
    } else {
      ledRet = LED_NOK;
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	8a 83       	std	Y+2, r24	; 0x02
    3db2:	02 c0       	rjmp	.+4      	; 0x3db8 <LED_init+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    3db8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3dba:	28 96       	adiw	r28, 0x08	; 8
    3dbc:	0f b6       	in	r0, 0x3f	; 63
    3dbe:	f8 94       	cli
    3dc0:	de bf       	out	0x3e, r29	; 62
    3dc2:	0f be       	out	0x3f, r0	; 63
    3dc4:	cd bf       	out	0x3d, r28	; 61
    3dc6:	cf 91       	pop	r28
    3dc8:	df 91       	pop	r29
    3dca:	08 95       	ret

00003dcc <LED_turnOn>:
EN_LED_systemStates_t LED_turnOn(ST_LED_cfg_t const *ST_ptrLedInstance) {
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	cd b7       	in	r28, 0x3d	; 61
    3dd2:	de b7       	in	r29, 0x3e	; 62
    3dd4:	28 97       	sbiw	r28, 0x08	; 8
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	cd bf       	out	0x3d, r28	; 61
    3de0:	98 87       	std	Y+8, r25	; 0x08
    3de2:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    3dec:	8f 81       	ldd	r24, Y+7	; 0x07
    3dee:	98 85       	ldd	r25, Y+8	; 0x08
    3df0:	00 97       	sbiw	r24, 0x00	; 0
    3df2:	e1 f0       	breq	.+56     	; 0x3e2c <LED_turnOn+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    3df4:	ef 81       	ldd	r30, Y+7	; 0x07
    3df6:	f8 85       	ldd	r31, Y+8	; 0x08
    3df8:	81 81       	ldd	r24, Z+1	; 0x01
    3dfa:	ef 81       	ldd	r30, Y+7	; 0x07
    3dfc:	f8 85       	ldd	r31, Y+8	; 0x08
    3dfe:	92 81       	ldd	r25, Z+2	; 0x02
    3e00:	ef 81       	ldd	r30, Y+7	; 0x07
    3e02:	f8 85       	ldd	r31, Y+8	; 0x08
    3e04:	20 81       	ld	r18, Z
    3e06:	8b 83       	std	Y+3, r24	; 0x03
    3e08:	9c 83       	std	Y+4, r25	; 0x04
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	8d 83       	std	Y+5, r24	; 0x05
    3e0e:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_HIGH);
    3e10:	ce 01       	movw	r24, r28
    3e12:	03 96       	adiw	r24, 0x03	; 3
    3e14:	61 e0       	ldi	r22, 0x01	; 1
    3e16:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    3e1a:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    3e1c:	89 81       	ldd	r24, Y+1	; 0x01
    3e1e:	88 23       	and	r24, r24
    3e20:	11 f4       	brne	.+4      	; 0x3e26 <LED_turnOn+0x5a>
      ledRet = LED_OK;
    3e22:	1a 82       	std	Y+2, r1	; 0x02
    3e24:	05 c0       	rjmp	.+10     	; 0x3e30 <LED_turnOn+0x64>
    } else {
      ledRet = LED_NOK;
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	8a 83       	std	Y+2, r24	; 0x02
    3e2a:	02 c0       	rjmp	.+4      	; 0x3e30 <LED_turnOn+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    3e2c:	82 e0       	ldi	r24, 0x02	; 2
    3e2e:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    3e30:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3e32:	28 96       	adiw	r28, 0x08	; 8
    3e34:	0f b6       	in	r0, 0x3f	; 63
    3e36:	f8 94       	cli
    3e38:	de bf       	out	0x3e, r29	; 62
    3e3a:	0f be       	out	0x3f, r0	; 63
    3e3c:	cd bf       	out	0x3d, r28	; 61
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	08 95       	ret

00003e44 <LED_turnOff>:
EN_LED_systemStates_t LED_turnOff(ST_LED_cfg_t const *ST_ptrLedInstance) {
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
    3e4c:	28 97       	sbiw	r28, 0x08	; 8
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	cd bf       	out	0x3d, r28	; 61
    3e58:	98 87       	std	Y+8, r25	; 0x08
    3e5a:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    3e64:	8f 81       	ldd	r24, Y+7	; 0x07
    3e66:	98 85       	ldd	r25, Y+8	; 0x08
    3e68:	00 97       	sbiw	r24, 0x00	; 0
    3e6a:	e1 f0       	breq	.+56     	; 0x3ea4 <LED_turnOff+0x60>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    3e6c:	ef 81       	ldd	r30, Y+7	; 0x07
    3e6e:	f8 85       	ldd	r31, Y+8	; 0x08
    3e70:	81 81       	ldd	r24, Z+1	; 0x01
    3e72:	ef 81       	ldd	r30, Y+7	; 0x07
    3e74:	f8 85       	ldd	r31, Y+8	; 0x08
    3e76:	92 81       	ldd	r25, Z+2	; 0x02
    3e78:	ef 81       	ldd	r30, Y+7	; 0x07
    3e7a:	f8 85       	ldd	r31, Y+8	; 0x08
    3e7c:	20 81       	ld	r18, Z
    3e7e:	8b 83       	std	Y+3, r24	; 0x03
    3e80:	9c 83       	std	Y+4, r25	; 0x04
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	8d 83       	std	Y+5, r24	; 0x05
    3e86:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_writePinLogic(&copyOfLedInstance, GPIO_LOW);
    3e88:	ce 01       	movw	r24, r28
    3e8a:	03 96       	adiw	r24, 0x03	; 3
    3e8c:	60 e0       	ldi	r22, 0x00	; 0
    3e8e:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    3e92:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	88 23       	and	r24, r24
    3e98:	11 f4       	brne	.+4      	; 0x3e9e <LED_turnOff+0x5a>
      ledRet = LED_OK;
    3e9a:	1a 82       	std	Y+2, r1	; 0x02
    3e9c:	05 c0       	rjmp	.+10     	; 0x3ea8 <LED_turnOff+0x64>
    } else {
      ledRet = LED_NOK;
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	8a 83       	std	Y+2, r24	; 0x02
    3ea2:	02 c0       	rjmp	.+4      	; 0x3ea8 <LED_turnOff+0x64>
    }
  } else {
    ledRet = LED_PTR_NULL;
    3ea4:	82 e0       	ldi	r24, 0x02	; 2
    3ea6:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3eaa:	28 96       	adiw	r28, 0x08	; 8
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	cd bf       	out	0x3d, r28	; 61
    3eb6:	cf 91       	pop	r28
    3eb8:	df 91       	pop	r29
    3eba:	08 95       	ret

00003ebc <LED_toggle>:
EN_LED_systemStates_t LED_toggle(ST_LED_cfg_t const *ST_ptrLedInstance) {
    3ebc:	df 93       	push	r29
    3ebe:	cf 93       	push	r28
    3ec0:	cd b7       	in	r28, 0x3d	; 61
    3ec2:	de b7       	in	r29, 0x3e	; 62
    3ec4:	28 97       	sbiw	r28, 0x08	; 8
    3ec6:	0f b6       	in	r0, 0x3f	; 63
    3ec8:	f8 94       	cli
    3eca:	de bf       	out	0x3e, r29	; 62
    3ecc:	0f be       	out	0x3f, r0	; 63
    3ece:	cd bf       	out	0x3d, r28	; 61
    3ed0:	98 87       	std	Y+8, r25	; 0x08
    3ed2:	8f 83       	std	Y+7, r24	; 0x07
  EN_LED_systemStates_t ledRet = LED_NOK;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	89 83       	std	Y+1, r24	; 0x01
  if (PTR_NULL != ST_ptrLedInstance) {
    3edc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ede:	98 85       	ldd	r25, Y+8	; 0x08
    3ee0:	00 97       	sbiw	r24, 0x00	; 0
    3ee2:	d9 f0       	breq	.+54     	; 0x3f1a <LED_toggle+0x5e>

    ST_GPIO_cfg_t copyOfLedInstance = {
        .logicOnPin = (EN_GPIO_pinLogic_t)ST_ptrLedInstance->ledDefaultState,
        .pinDirection = GPIO_OUTPUT,
        .pinNumber = ST_ptrLedInstance->ledPinNumber,
        .portName = ST_ptrLedInstance->ledPortName};
    3ee4:	ef 81       	ldd	r30, Y+7	; 0x07
    3ee6:	f8 85       	ldd	r31, Y+8	; 0x08
    3ee8:	81 81       	ldd	r24, Z+1	; 0x01
    3eea:	ef 81       	ldd	r30, Y+7	; 0x07
    3eec:	f8 85       	ldd	r31, Y+8	; 0x08
    3eee:	92 81       	ldd	r25, Z+2	; 0x02
    3ef0:	ef 81       	ldd	r30, Y+7	; 0x07
    3ef2:	f8 85       	ldd	r31, Y+8	; 0x08
    3ef4:	20 81       	ld	r18, Z
    3ef6:	8b 83       	std	Y+3, r24	; 0x03
    3ef8:	9c 83       	std	Y+4, r25	; 0x04
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	8d 83       	std	Y+5, r24	; 0x05
    3efe:	2e 83       	std	Y+6, r18	; 0x06
    gpioRet = GPIO_togglePinLogic(&copyOfLedInstance);
    3f00:	ce 01       	movw	r24, r28
    3f02:	03 96       	adiw	r24, 0x03	; 3
    3f04:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <GPIO_togglePinLogic>
    3f08:	89 83       	std	Y+1, r24	; 0x01
    if (GPIO_OK == gpioRet) {
    3f0a:	89 81       	ldd	r24, Y+1	; 0x01
    3f0c:	88 23       	and	r24, r24
    3f0e:	11 f4       	brne	.+4      	; 0x3f14 <LED_toggle+0x58>
      ledRet = LED_OK;
    3f10:	1a 82       	std	Y+2, r1	; 0x02
    3f12:	05 c0       	rjmp	.+10     	; 0x3f1e <LED_toggle+0x62>
    } else {
      ledRet = LED_NOK;
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	8a 83       	std	Y+2, r24	; 0x02
    3f18:	02 c0       	rjmp	.+4      	; 0x3f1e <LED_toggle+0x62>
    }
  } else {
    ledRet = LED_PTR_NULL;
    3f1a:	82 e0       	ldi	r24, 0x02	; 2
    3f1c:	8a 83       	std	Y+2, r24	; 0x02
  }
  return ledRet;
    3f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f20:	28 96       	adiw	r28, 0x08	; 8
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	f8 94       	cli
    3f26:	de bf       	out	0x3e, r29	; 62
    3f28:	0f be       	out	0x3f, r0	; 63
    3f2a:	cd bf       	out	0x3d, r28	; 61
    3f2c:	cf 91       	pop	r28
    3f2e:	df 91       	pop	r29
    3f30:	08 95       	ret

00003f32 <HLCD_init>:

#include "lcd_interface.h"


EN_HLCD_systemState_t HLCD_init(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	df 93       	push	r29
    3f38:	cf 93       	push	r28
    3f3a:	cd b7       	in	r28, 0x3d	; 61
    3f3c:	de b7       	in	r29, 0x3e	; 62
    3f3e:	ce 59       	subi	r28, 0x9E	; 158
    3f40:	d0 40       	sbci	r29, 0x00	; 0
    3f42:	0f b6       	in	r0, 0x3f	; 63
    3f44:	f8 94       	cli
    3f46:	de bf       	out	0x3e, r29	; 62
    3f48:	0f be       	out	0x3f, r0	; 63
    3f4a:	cd bf       	out	0x3d, r28	; 61
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e3 56       	subi	r30, 0x63	; 99
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	91 83       	std	Z+1, r25	; 0x01
    3f54:	80 83       	st	Z, r24
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    3f56:	fe 01       	movw	r30, r28
    3f58:	e0 58       	subi	r30, 0x80	; 128
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    3f60:	fe 01       	movw	r30, r28
    3f62:	e1 58       	subi	r30, 0x81	; 129
    3f64:	ff 4f       	sbci	r31, 0xFF	; 255
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e3 56       	subi	r30, 0x63	; 99
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	00 97       	sbiw	r24, 0x00	; 0
    3f76:	09 f4       	brne	.+2      	; 0x3f7a <HLCD_init+0x48>
    3f78:	18 c7       	rjmp	.+3632   	; 0x4daa <HLCD_init+0xe78>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e3 56       	subi	r30, 0x63	; 99
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	01 90       	ld	r0, Z+
    3f82:	f0 81       	ld	r31, Z
    3f84:	e0 2d       	mov	r30, r0
    3f86:	81 81       	ldd	r24, Z+1	; 0x01
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e3 56       	subi	r30, 0x63	; 99
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	01 90       	ld	r0, Z+
    3f90:	f0 81       	ld	r31, Z
    3f92:	e0 2d       	mov	r30, r0
    3f94:	93 81       	ldd	r25, Z+3	; 0x03
    3f96:	fe 01       	movw	r30, r28
    3f98:	ef 57       	subi	r30, 0x7F	; 127
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 83       	st	Z, r24
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	ef 57       	subi	r30, 0x7F	; 127
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	91 83       	std	Z+1, r25	; 0x01
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	ef 57       	subi	r30, 0x7F	; 127
    3faa:	ff 4f       	sbci	r31, 0xFF	; 255
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	82 83       	std	Z+2, r24	; 0x02
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	ef 57       	subi	r30, 0x7F	; 127
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3fb8:	fe 01       	movw	r30, r28
    3fba:	e3 56       	subi	r30, 0x63	; 99
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	01 90       	ld	r0, Z+
    3fc0:	f0 81       	ld	r31, Z
    3fc2:	e0 2d       	mov	r30, r0
    3fc4:	81 81       	ldd	r24, Z+1	; 0x01
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	e3 56       	subi	r30, 0x63	; 99
    3fca:	ff 4f       	sbci	r31, 0xFF	; 255
    3fcc:	01 90       	ld	r0, Z+
    3fce:	f0 81       	ld	r31, Z
    3fd0:	e0 2d       	mov	r30, r0
    3fd2:	94 81       	ldd	r25, Z+4	; 0x04
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	eb 57       	subi	r30, 0x7B	; 123
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	80 83       	st	Z, r24
    3fdc:	fe 01       	movw	r30, r28
    3fde:	eb 57       	subi	r30, 0x7B	; 123
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	eb 57       	subi	r30, 0x7B	; 123
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	82 83       	std	Z+2, r24	; 0x02
    3fee:	fe 01       	movw	r30, r28
    3ff0:	eb 57       	subi	r30, 0x7B	; 123
    3ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff4:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	e3 56       	subi	r30, 0x63	; 99
    3ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    3ffc:	01 90       	ld	r0, Z+
    3ffe:	f0 81       	ld	r31, Z
    4000:	e0 2d       	mov	r30, r0
    4002:	81 81       	ldd	r24, Z+1	; 0x01
    4004:	fe 01       	movw	r30, r28
    4006:	e3 56       	subi	r30, 0x63	; 99
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	01 90       	ld	r0, Z+
    400c:	f0 81       	ld	r31, Z
    400e:	e0 2d       	mov	r30, r0
    4010:	95 81       	ldd	r25, Z+5	; 0x05
    4012:	fe 01       	movw	r30, r28
    4014:	e7 57       	subi	r30, 0x77	; 119
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	80 83       	st	Z, r24
    401a:	fe 01       	movw	r30, r28
    401c:	e7 57       	subi	r30, 0x77	; 119
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	fe 01       	movw	r30, r28
    4024:	e7 57       	subi	r30, 0x77	; 119
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	82 83       	std	Z+2, r24	; 0x02
    402c:	fe 01       	movw	r30, r28
    402e:	e7 57       	subi	r30, 0x77	; 119
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	13 82       	std	Z+3, r1	; 0x03


		gpioRet = GPIO_initPin(&rsPin);
    4034:	ce 01       	movw	r24, r28
    4036:	8f 57       	subi	r24, 0x7F	; 127
    4038:	9f 4f       	sbci	r25, 0xFF	; 255
    403a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    403e:	fe 01       	movw	r30, r28
    4040:	e1 58       	subi	r30, 0x81	; 129
    4042:	ff 4f       	sbci	r31, 0xFF	; 255
    4044:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&rwPin);
    4046:	fe 01       	movw	r30, r28
    4048:	e1 58       	subi	r30, 0x81	; 129
    404a:	ff 4f       	sbci	r31, 0xFF	; 255
    404c:	80 81       	ld	r24, Z
    404e:	88 23       	and	r24, r24
    4050:	51 f4       	brne	.+20     	; 0x4066 <HLCD_init+0x134>
    4052:	ce 01       	movw	r24, r28
    4054:	8b 57       	subi	r24, 0x7B	; 123
    4056:	9f 4f       	sbci	r25, 0xFF	; 255
    4058:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    405c:	fe 01       	movw	r30, r28
    405e:	e1 58       	subi	r30, 0x81	; 129
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	80 83       	st	Z, r24
    4064:	05 c0       	rjmp	.+10     	; 0x4070 <HLCD_init+0x13e>
		else lcdRet = HLCD_NOK;
    4066:	fe 01       	movw	r30, r28
    4068:	e0 58       	subi	r30, 0x80	; 128
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	81 e0       	ldi	r24, 0x01	; 1
    406e:	80 83       	st	Z, r24

		if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&enPin);
    4070:	fe 01       	movw	r30, r28
    4072:	e1 58       	subi	r30, 0x81	; 129
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	80 81       	ld	r24, Z
    4078:	88 23       	and	r24, r24
    407a:	51 f4       	brne	.+20     	; 0x4090 <HLCD_init+0x15e>
    407c:	ce 01       	movw	r24, r28
    407e:	87 57       	subi	r24, 0x77	; 119
    4080:	9f 4f       	sbci	r25, 0xFF	; 255
    4082:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    4086:	fe 01       	movw	r30, r28
    4088:	e1 58       	subi	r30, 0x81	; 129
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	80 83       	st	Z, r24
    408e:	05 c0       	rjmp	.+10     	; 0x409a <HLCD_init+0x168>
		else lcdRet = HLCD_NOK;
    4090:	fe 01       	movw	r30, r28
    4092:	e0 58       	subi	r30, 0x80	; 128
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	80 83       	st	Z, r24

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    409a:	fe 01       	movw	r30, r28
    409c:	e3 56       	subi	r30, 0x63	; 99
    409e:	ff 4f       	sbci	r31, 0xFF	; 255
    40a0:	01 90       	ld	r0, Z+
    40a2:	f0 81       	ld	r31, Z
    40a4:	e0 2d       	mov	r30, r0
    40a6:	80 81       	ld	r24, Z
    40a8:	88 23       	and	r24, r24
    40aa:	09 f0       	breq	.+2      	; 0x40ae <HLCD_init+0x17c>
    40ac:	42 c4       	rjmp	.+2180   	; 0x4932 <HLCD_init+0xa00>
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d4Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    40ae:	fe 01       	movw	r30, r28
    40b0:	e3 56       	subi	r30, 0x63	; 99
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	01 90       	ld	r0, Z+
    40b6:	f0 81       	ld	r31, Z
    40b8:	e0 2d       	mov	r30, r0
    40ba:	82 81       	ldd	r24, Z+2	; 0x02
    40bc:	fe 01       	movw	r30, r28
    40be:	e3 56       	subi	r30, 0x63	; 99
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	01 90       	ld	r0, Z+
    40c4:	f0 81       	ld	r31, Z
    40c6:	e0 2d       	mov	r30, r0
    40c8:	92 85       	ldd	r25, Z+10	; 0x0a
    40ca:	fe 01       	movw	r30, r28
    40cc:	e3 57       	subi	r30, 0x73	; 115
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	80 83       	st	Z, r24
    40d2:	fe 01       	movw	r30, r28
    40d4:	e3 57       	subi	r30, 0x73	; 115
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	91 83       	std	Z+1, r25	; 0x01
    40da:	fe 01       	movw	r30, r28
    40dc:	e3 57       	subi	r30, 0x73	; 115
    40de:	ff 4f       	sbci	r31, 0xFF	; 255
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	82 83       	std	Z+2, r24	; 0x02
    40e4:	fe 01       	movw	r30, r28
    40e6:	e3 57       	subi	r30, 0x73	; 115
    40e8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ea:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d5Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    40ec:	fe 01       	movw	r30, r28
    40ee:	e3 56       	subi	r30, 0x63	; 99
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	01 90       	ld	r0, Z+
    40f4:	f0 81       	ld	r31, Z
    40f6:	e0 2d       	mov	r30, r0
    40f8:	82 81       	ldd	r24, Z+2	; 0x02
    40fa:	fe 01       	movw	r30, r28
    40fc:	e3 56       	subi	r30, 0x63	; 99
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	01 90       	ld	r0, Z+
    4102:	f0 81       	ld	r31, Z
    4104:	e0 2d       	mov	r30, r0
    4106:	93 85       	ldd	r25, Z+11	; 0x0b
    4108:	fe 01       	movw	r30, r28
    410a:	ef 56       	subi	r30, 0x6F	; 111
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 83       	st	Z, r24
    4110:	fe 01       	movw	r30, r28
    4112:	ef 56       	subi	r30, 0x6F	; 111
    4114:	ff 4f       	sbci	r31, 0xFF	; 255
    4116:	91 83       	std	Z+1, r25	; 0x01
    4118:	fe 01       	movw	r30, r28
    411a:	ef 56       	subi	r30, 0x6F	; 111
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	82 83       	std	Z+2, r24	; 0x02
    4122:	fe 01       	movw	r30, r28
    4124:	ef 56       	subi	r30, 0x6F	; 111
    4126:	ff 4f       	sbci	r31, 0xFF	; 255
    4128:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d6Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    412a:	fe 01       	movw	r30, r28
    412c:	e3 56       	subi	r30, 0x63	; 99
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	01 90       	ld	r0, Z+
    4132:	f0 81       	ld	r31, Z
    4134:	e0 2d       	mov	r30, r0
    4136:	82 81       	ldd	r24, Z+2	; 0x02
    4138:	fe 01       	movw	r30, r28
    413a:	e3 56       	subi	r30, 0x63	; 99
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	01 90       	ld	r0, Z+
    4140:	f0 81       	ld	r31, Z
    4142:	e0 2d       	mov	r30, r0
    4144:	94 85       	ldd	r25, Z+12	; 0x0c
    4146:	fe 01       	movw	r30, r28
    4148:	eb 56       	subi	r30, 0x6B	; 107
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	80 83       	st	Z, r24
    414e:	fe 01       	movw	r30, r28
    4150:	eb 56       	subi	r30, 0x6B	; 107
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	91 83       	std	Z+1, r25	; 0x01
    4156:	fe 01       	movw	r30, r28
    4158:	eb 56       	subi	r30, 0x6B	; 107
    415a:	ff 4f       	sbci	r31, 0xFF	; 255
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	82 83       	std	Z+2, r24	; 0x02
    4160:	fe 01       	movw	r30, r28
    4162:	eb 56       	subi	r30, 0x6B	; 107
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	13 82       	std	Z+3, r1	; 0x03
			{
					.portName = ST_ptrLcdCfgInstance->dataPort,
					.pinNumber = ST_ptrLcdCfgInstance->d7Pin,
					.logicOnPin = GPIO_LOW,
					.pinDirection = GPIO_OUTPUT
			};
    4168:	fe 01       	movw	r30, r28
    416a:	e3 56       	subi	r30, 0x63	; 99
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	01 90       	ld	r0, Z+
    4170:	f0 81       	ld	r31, Z
    4172:	e0 2d       	mov	r30, r0
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	fe 01       	movw	r30, r28
    4178:	e3 56       	subi	r30, 0x63	; 99
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	01 90       	ld	r0, Z+
    417e:	f0 81       	ld	r31, Z
    4180:	e0 2d       	mov	r30, r0
    4182:	95 85       	ldd	r25, Z+13	; 0x0d
    4184:	fe 01       	movw	r30, r28
    4186:	e7 56       	subi	r30, 0x67	; 103
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 83       	st	Z, r24
    418c:	fe 01       	movw	r30, r28
    418e:	e7 56       	subi	r30, 0x67	; 103
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	91 83       	std	Z+1, r25	; 0x01
    4194:	fe 01       	movw	r30, r28
    4196:	e7 56       	subi	r30, 0x67	; 103
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	82 83       	std	Z+2, r24	; 0x02
    419e:	fe 01       	movw	r30, r28
    41a0:	e7 56       	subi	r30, 0x67	; 103
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	13 82       	std	Z+3, r1	; 0x03

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d4Pin);
    41a6:	fe 01       	movw	r30, r28
    41a8:	e1 58       	subi	r30, 0x81	; 129
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	80 81       	ld	r24, Z
    41ae:	88 23       	and	r24, r24
    41b0:	51 f4       	brne	.+20     	; 0x41c6 <HLCD_init+0x294>
    41b2:	ce 01       	movw	r24, r28
    41b4:	83 57       	subi	r24, 0x73	; 115
    41b6:	9f 4f       	sbci	r25, 0xFF	; 255
    41b8:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    41bc:	fe 01       	movw	r30, r28
    41be:	e1 58       	subi	r30, 0x81	; 129
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	80 83       	st	Z, r24
    41c4:	05 c0       	rjmp	.+10     	; 0x41d0 <HLCD_init+0x29e>
			else lcdRet = HLCD_NOK;
    41c6:	fe 01       	movw	r30, r28
    41c8:	e0 58       	subi	r30, 0x80	; 128
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d5Pin);
    41d0:	fe 01       	movw	r30, r28
    41d2:	e1 58       	subi	r30, 0x81	; 129
    41d4:	ff 4f       	sbci	r31, 0xFF	; 255
    41d6:	80 81       	ld	r24, Z
    41d8:	88 23       	and	r24, r24
    41da:	51 f4       	brne	.+20     	; 0x41f0 <HLCD_init+0x2be>
    41dc:	ce 01       	movw	r24, r28
    41de:	8f 56       	subi	r24, 0x6F	; 111
    41e0:	9f 4f       	sbci	r25, 0xFF	; 255
    41e2:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    41e6:	fe 01       	movw	r30, r28
    41e8:	e1 58       	subi	r30, 0x81	; 129
    41ea:	ff 4f       	sbci	r31, 0xFF	; 255
    41ec:	80 83       	st	Z, r24
    41ee:	05 c0       	rjmp	.+10     	; 0x41fa <HLCD_init+0x2c8>
			else lcdRet = HLCD_NOK;
    41f0:	fe 01       	movw	r30, r28
    41f2:	e0 58       	subi	r30, 0x80	; 128
    41f4:	ff 4f       	sbci	r31, 0xFF	; 255
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d6Pin);
    41fa:	fe 01       	movw	r30, r28
    41fc:	e1 58       	subi	r30, 0x81	; 129
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	80 81       	ld	r24, Z
    4202:	88 23       	and	r24, r24
    4204:	51 f4       	brne	.+20     	; 0x421a <HLCD_init+0x2e8>
    4206:	ce 01       	movw	r24, r28
    4208:	8b 56       	subi	r24, 0x6B	; 107
    420a:	9f 4f       	sbci	r25, 0xFF	; 255
    420c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    4210:	fe 01       	movw	r30, r28
    4212:	e1 58       	subi	r30, 0x81	; 129
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	80 83       	st	Z, r24
    4218:	05 c0       	rjmp	.+10     	; 0x4224 <HLCD_init+0x2f2>
			else lcdRet = HLCD_NOK;
    421a:	fe 01       	movw	r30, r28
    421c:	e0 58       	subi	r30, 0x80	; 128
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	80 83       	st	Z, r24

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPin(&d7Pin);
    4224:	fe 01       	movw	r30, r28
    4226:	e1 58       	subi	r30, 0x81	; 129
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	80 81       	ld	r24, Z
    422c:	88 23       	and	r24, r24
    422e:	51 f4       	brne	.+20     	; 0x4244 <HLCD_init+0x312>
    4230:	ce 01       	movw	r24, r28
    4232:	87 56       	subi	r24, 0x67	; 103
    4234:	9f 4f       	sbci	r25, 0xFF	; 255
    4236:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    423a:	fe 01       	movw	r30, r28
    423c:	e1 58       	subi	r30, 0x81	; 129
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 83       	st	Z, r24
    4242:	05 c0       	rjmp	.+10     	; 0x424e <HLCD_init+0x31c>
			else lcdRet = HLCD_NOK;
    4244:	fe 01       	movw	r30, r28
    4246:	e0 58       	subi	r30, 0x80	; 128
    4248:	ff 4f       	sbci	r31, 0xFF	; 255
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	80 83       	st	Z, r24
    424e:	fe 01       	movw	r30, r28
    4250:	e5 58       	subi	r30, 0x85	; 133
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	a0 ef       	ldi	r26, 0xF0	; 240
    425a:	b1 e4       	ldi	r27, 0x41	; 65
    425c:	80 83       	st	Z, r24
    425e:	91 83       	std	Z+1, r25	; 0x01
    4260:	a2 83       	std	Z+2, r26	; 0x02
    4262:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4264:	8e 01       	movw	r16, r28
    4266:	09 58       	subi	r16, 0x89	; 137
    4268:	1f 4f       	sbci	r17, 0xFF	; 255
    426a:	fe 01       	movw	r30, r28
    426c:	e5 58       	subi	r30, 0x85	; 133
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	82 81       	ldd	r24, Z+2	; 0x02
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	30 e0       	ldi	r19, 0x00	; 0
    427c:	4a ef       	ldi	r20, 0xFA	; 250
    427e:	54 e4       	ldi	r21, 0x44	; 68
    4280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4284:	dc 01       	movw	r26, r24
    4286:	cb 01       	movw	r24, r22
    4288:	f8 01       	movw	r30, r16
    428a:	80 83       	st	Z, r24
    428c:	91 83       	std	Z+1, r25	; 0x01
    428e:	a2 83       	std	Z+2, r26	; 0x02
    4290:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4292:	fe 01       	movw	r30, r28
    4294:	e9 58       	subi	r30, 0x89	; 137
    4296:	ff 4f       	sbci	r31, 0xFF	; 255
    4298:	60 81       	ld	r22, Z
    429a:	71 81       	ldd	r23, Z+1	; 0x01
    429c:	82 81       	ldd	r24, Z+2	; 0x02
    429e:	93 81       	ldd	r25, Z+3	; 0x03
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e8       	ldi	r20, 0x80	; 128
    42a6:	5f e3       	ldi	r21, 0x3F	; 63
    42a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    42ac:	88 23       	and	r24, r24
    42ae:	44 f4       	brge	.+16     	; 0x42c0 <HLCD_init+0x38e>
		__ticks = 1;
    42b0:	fe 01       	movw	r30, r28
    42b2:	eb 58       	subi	r30, 0x8B	; 139
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	91 83       	std	Z+1, r25	; 0x01
    42bc:	80 83       	st	Z, r24
    42be:	64 c0       	rjmp	.+200    	; 0x4388 <HLCD_init+0x456>
	else if (__tmp > 65535)
    42c0:	fe 01       	movw	r30, r28
    42c2:	e9 58       	subi	r30, 0x89	; 137
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	60 81       	ld	r22, Z
    42c8:	71 81       	ldd	r23, Z+1	; 0x01
    42ca:	82 81       	ldd	r24, Z+2	; 0x02
    42cc:	93 81       	ldd	r25, Z+3	; 0x03
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	3f ef       	ldi	r19, 0xFF	; 255
    42d2:	4f e7       	ldi	r20, 0x7F	; 127
    42d4:	57 e4       	ldi	r21, 0x47	; 71
    42d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    42da:	18 16       	cp	r1, r24
    42dc:	0c f0       	brlt	.+2      	; 0x42e0 <HLCD_init+0x3ae>
    42de:	43 c0       	rjmp	.+134    	; 0x4366 <HLCD_init+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e0:	fe 01       	movw	r30, r28
    42e2:	e5 58       	subi	r30, 0x85	; 133
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	60 81       	ld	r22, Z
    42e8:	71 81       	ldd	r23, Z+1	; 0x01
    42ea:	82 81       	ldd	r24, Z+2	; 0x02
    42ec:	93 81       	ldd	r25, Z+3	; 0x03
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 e2       	ldi	r20, 0x20	; 32
    42f4:	51 e4       	ldi	r21, 0x41	; 65
    42f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fa:	dc 01       	movw	r26, r24
    42fc:	cb 01       	movw	r24, r22
    42fe:	8e 01       	movw	r16, r28
    4300:	0b 58       	subi	r16, 0x8B	; 139
    4302:	1f 4f       	sbci	r17, 0xFF	; 255
    4304:	bc 01       	movw	r22, r24
    4306:	cd 01       	movw	r24, r26
    4308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	f8 01       	movw	r30, r16
    4312:	91 83       	std	Z+1, r25	; 0x01
    4314:	80 83       	st	Z, r24
    4316:	1f c0       	rjmp	.+62     	; 0x4356 <HLCD_init+0x424>
    4318:	fe 01       	movw	r30, r28
    431a:	ed 58       	subi	r30, 0x8D	; 141
    431c:	ff 4f       	sbci	r31, 0xFF	; 255
    431e:	88 ec       	ldi	r24, 0xC8	; 200
    4320:	90 e0       	ldi	r25, 0x00	; 0
    4322:	91 83       	std	Z+1, r25	; 0x01
    4324:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4326:	fe 01       	movw	r30, r28
    4328:	ed 58       	subi	r30, 0x8D	; 141
    432a:	ff 4f       	sbci	r31, 0xFF	; 255
    432c:	80 81       	ld	r24, Z
    432e:	91 81       	ldd	r25, Z+1	; 0x01
    4330:	01 97       	sbiw	r24, 0x01	; 1
    4332:	f1 f7       	brne	.-4      	; 0x4330 <HLCD_init+0x3fe>
    4334:	fe 01       	movw	r30, r28
    4336:	ed 58       	subi	r30, 0x8D	; 141
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    433e:	de 01       	movw	r26, r28
    4340:	ab 58       	subi	r26, 0x8B	; 139
    4342:	bf 4f       	sbci	r27, 0xFF	; 255
    4344:	fe 01       	movw	r30, r28
    4346:	eb 58       	subi	r30, 0x8B	; 139
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	80 81       	ld	r24, Z
    434c:	91 81       	ldd	r25, Z+1	; 0x01
    434e:	01 97       	sbiw	r24, 0x01	; 1
    4350:	11 96       	adiw	r26, 0x01	; 1
    4352:	9c 93       	st	X, r25
    4354:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4356:	fe 01       	movw	r30, r28
    4358:	eb 58       	subi	r30, 0x8B	; 139
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	80 81       	ld	r24, Z
    435e:	91 81       	ldd	r25, Z+1	; 0x01
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	d1 f6       	brne	.-76     	; 0x4318 <HLCD_init+0x3e6>
    4364:	27 c0       	rjmp	.+78     	; 0x43b4 <HLCD_init+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4366:	8e 01       	movw	r16, r28
    4368:	0b 58       	subi	r16, 0x8B	; 139
    436a:	1f 4f       	sbci	r17, 0xFF	; 255
    436c:	fe 01       	movw	r30, r28
    436e:	e9 58       	subi	r30, 0x89	; 137
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	60 81       	ld	r22, Z
    4374:	71 81       	ldd	r23, Z+1	; 0x01
    4376:	82 81       	ldd	r24, Z+2	; 0x02
    4378:	93 81       	ldd	r25, Z+3	; 0x03
    437a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    437e:	dc 01       	movw	r26, r24
    4380:	cb 01       	movw	r24, r22
    4382:	f8 01       	movw	r30, r16
    4384:	91 83       	std	Z+1, r25	; 0x01
    4386:	80 83       	st	Z, r24
    4388:	de 01       	movw	r26, r28
    438a:	af 58       	subi	r26, 0x8F	; 143
    438c:	bf 4f       	sbci	r27, 0xFF	; 255
    438e:	fe 01       	movw	r30, r28
    4390:	eb 58       	subi	r30, 0x8B	; 139
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	80 81       	ld	r24, Z
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	8d 93       	st	X+, r24
    439a:	9c 93       	st	X, r25
    439c:	fe 01       	movw	r30, r28
    439e:	ef 58       	subi	r30, 0x8F	; 143
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	80 81       	ld	r24, Z
    43a4:	91 81       	ldd	r25, Z+1	; 0x01
    43a6:	01 97       	sbiw	r24, 0x01	; 1
    43a8:	f1 f7       	brne	.-4      	; 0x43a6 <HLCD_init+0x474>
    43aa:	fe 01       	movw	r30, r28
    43ac:	ef 58       	subi	r30, 0x8F	; 143
    43ae:	ff 4f       	sbci	r31, 0xFF	; 255
    43b0:	91 83       	std	Z+1, r25	; 0x01
    43b2:	80 83       	st	Z, r24

			_delay_ms(30);

			HLCD_sendCmd(ST_ptrLcdCfgInstance ,FUNCTION_SET);
    43b4:	fe 01       	movw	r30, r28
    43b6:	e3 56       	subi	r30, 0x63	; 99
    43b8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ba:	80 81       	ld	r24, Z
    43bc:	91 81       	ldd	r25, Z+1	; 0x01
    43be:	68 e2       	ldi	r22, 0x28	; 40
    43c0:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    43c4:	fe 01       	movw	r30, r28
    43c6:	e3 59       	subi	r30, 0x93	; 147
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	a8 e4       	ldi	r26, 0x48	; 72
    43d0:	b2 e4       	ldi	r27, 0x42	; 66
    43d2:	80 83       	st	Z, r24
    43d4:	91 83       	std	Z+1, r25	; 0x01
    43d6:	a2 83       	std	Z+2, r26	; 0x02
    43d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43da:	8e 01       	movw	r16, r28
    43dc:	07 59       	subi	r16, 0x97	; 151
    43de:	1f 4f       	sbci	r17, 0xFF	; 255
    43e0:	fe 01       	movw	r30, r28
    43e2:	e3 59       	subi	r30, 0x93	; 147
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	60 81       	ld	r22, Z
    43e8:	71 81       	ldd	r23, Z+1	; 0x01
    43ea:	82 81       	ldd	r24, Z+2	; 0x02
    43ec:	93 81       	ldd	r25, Z+3	; 0x03
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	4a ef       	ldi	r20, 0xFA	; 250
    43f4:	54 e4       	ldi	r21, 0x44	; 68
    43f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	f8 01       	movw	r30, r16
    4400:	80 83       	st	Z, r24
    4402:	91 83       	std	Z+1, r25	; 0x01
    4404:	a2 83       	std	Z+2, r26	; 0x02
    4406:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4408:	fe 01       	movw	r30, r28
    440a:	e7 59       	subi	r30, 0x97	; 151
    440c:	ff 4f       	sbci	r31, 0xFF	; 255
    440e:	60 81       	ld	r22, Z
    4410:	71 81       	ldd	r23, Z+1	; 0x01
    4412:	82 81       	ldd	r24, Z+2	; 0x02
    4414:	93 81       	ldd	r25, Z+3	; 0x03
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	40 e8       	ldi	r20, 0x80	; 128
    441c:	5f e3       	ldi	r21, 0x3F	; 63
    441e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4422:	88 23       	and	r24, r24
    4424:	44 f4       	brge	.+16     	; 0x4436 <HLCD_init+0x504>
		__ticks = 1;
    4426:	fe 01       	movw	r30, r28
    4428:	e9 59       	subi	r30, 0x99	; 153
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	91 83       	std	Z+1, r25	; 0x01
    4432:	80 83       	st	Z, r24
    4434:	64 c0       	rjmp	.+200    	; 0x44fe <HLCD_init+0x5cc>
	else if (__tmp > 65535)
    4436:	fe 01       	movw	r30, r28
    4438:	e7 59       	subi	r30, 0x97	; 151
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	60 81       	ld	r22, Z
    443e:	71 81       	ldd	r23, Z+1	; 0x01
    4440:	82 81       	ldd	r24, Z+2	; 0x02
    4442:	93 81       	ldd	r25, Z+3	; 0x03
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	3f ef       	ldi	r19, 0xFF	; 255
    4448:	4f e7       	ldi	r20, 0x7F	; 127
    444a:	57 e4       	ldi	r21, 0x47	; 71
    444c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4450:	18 16       	cp	r1, r24
    4452:	0c f0       	brlt	.+2      	; 0x4456 <HLCD_init+0x524>
    4454:	43 c0       	rjmp	.+134    	; 0x44dc <HLCD_init+0x5aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4456:	fe 01       	movw	r30, r28
    4458:	e3 59       	subi	r30, 0x93	; 147
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	60 81       	ld	r22, Z
    445e:	71 81       	ldd	r23, Z+1	; 0x01
    4460:	82 81       	ldd	r24, Z+2	; 0x02
    4462:	93 81       	ldd	r25, Z+3	; 0x03
    4464:	20 e0       	ldi	r18, 0x00	; 0
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	40 e2       	ldi	r20, 0x20	; 32
    446a:	51 e4       	ldi	r21, 0x41	; 65
    446c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4470:	dc 01       	movw	r26, r24
    4472:	cb 01       	movw	r24, r22
    4474:	8e 01       	movw	r16, r28
    4476:	09 59       	subi	r16, 0x99	; 153
    4478:	1f 4f       	sbci	r17, 0xFF	; 255
    447a:	bc 01       	movw	r22, r24
    447c:	cd 01       	movw	r24, r26
    447e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	f8 01       	movw	r30, r16
    4488:	91 83       	std	Z+1, r25	; 0x01
    448a:	80 83       	st	Z, r24
    448c:	1f c0       	rjmp	.+62     	; 0x44cc <HLCD_init+0x59a>
    448e:	fe 01       	movw	r30, r28
    4490:	eb 59       	subi	r30, 0x9B	; 155
    4492:	ff 4f       	sbci	r31, 0xFF	; 255
    4494:	88 ec       	ldi	r24, 0xC8	; 200
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	91 83       	std	Z+1, r25	; 0x01
    449a:	80 83       	st	Z, r24
    449c:	fe 01       	movw	r30, r28
    449e:	eb 59       	subi	r30, 0x9B	; 155
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 81       	ld	r24, Z
    44a4:	91 81       	ldd	r25, Z+1	; 0x01
    44a6:	01 97       	sbiw	r24, 0x01	; 1
    44a8:	f1 f7       	brne	.-4      	; 0x44a6 <HLCD_init+0x574>
    44aa:	fe 01       	movw	r30, r28
    44ac:	eb 59       	subi	r30, 0x9B	; 155
    44ae:	ff 4f       	sbci	r31, 0xFF	; 255
    44b0:	91 83       	std	Z+1, r25	; 0x01
    44b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b4:	de 01       	movw	r26, r28
    44b6:	a9 59       	subi	r26, 0x99	; 153
    44b8:	bf 4f       	sbci	r27, 0xFF	; 255
    44ba:	fe 01       	movw	r30, r28
    44bc:	e9 59       	subi	r30, 0x99	; 153
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	80 81       	ld	r24, Z
    44c2:	91 81       	ldd	r25, Z+1	; 0x01
    44c4:	01 97       	sbiw	r24, 0x01	; 1
    44c6:	11 96       	adiw	r26, 0x01	; 1
    44c8:	9c 93       	st	X, r25
    44ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44cc:	fe 01       	movw	r30, r28
    44ce:	e9 59       	subi	r30, 0x99	; 153
    44d0:	ff 4f       	sbci	r31, 0xFF	; 255
    44d2:	80 81       	ld	r24, Z
    44d4:	91 81       	ldd	r25, Z+1	; 0x01
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	d1 f6       	brne	.-76     	; 0x448e <HLCD_init+0x55c>
    44da:	27 c0       	rjmp	.+78     	; 0x452a <HLCD_init+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44dc:	8e 01       	movw	r16, r28
    44de:	09 59       	subi	r16, 0x99	; 153
    44e0:	1f 4f       	sbci	r17, 0xFF	; 255
    44e2:	fe 01       	movw	r30, r28
    44e4:	e7 59       	subi	r30, 0x97	; 151
    44e6:	ff 4f       	sbci	r31, 0xFF	; 255
    44e8:	60 81       	ld	r22, Z
    44ea:	71 81       	ldd	r23, Z+1	; 0x01
    44ec:	82 81       	ldd	r24, Z+2	; 0x02
    44ee:	93 81       	ldd	r25, Z+3	; 0x03
    44f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	f8 01       	movw	r30, r16
    44fa:	91 83       	std	Z+1, r25	; 0x01
    44fc:	80 83       	st	Z, r24
    44fe:	de 01       	movw	r26, r28
    4500:	ad 59       	subi	r26, 0x9D	; 157
    4502:	bf 4f       	sbci	r27, 0xFF	; 255
    4504:	fe 01       	movw	r30, r28
    4506:	e9 59       	subi	r30, 0x99	; 153
    4508:	ff 4f       	sbci	r31, 0xFF	; 255
    450a:	80 81       	ld	r24, Z
    450c:	91 81       	ldd	r25, Z+1	; 0x01
    450e:	8d 93       	st	X+, r24
    4510:	9c 93       	st	X, r25
    4512:	fe 01       	movw	r30, r28
    4514:	ed 59       	subi	r30, 0x9D	; 157
    4516:	ff 4f       	sbci	r31, 0xFF	; 255
    4518:	80 81       	ld	r24, Z
    451a:	91 81       	ldd	r25, Z+1	; 0x01
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	f1 f7       	brne	.-4      	; 0x451c <HLCD_init+0x5ea>
    4520:	fe 01       	movw	r30, r28
    4522:	ed 59       	subi	r30, 0x9D	; 157
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	91 83       	std	Z+1, r25	; 0x01
    4528:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_ON_OFF);
    452a:	fe 01       	movw	r30, r28
    452c:	e3 56       	subi	r30, 0x63	; 99
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	80 81       	ld	r24, Z
    4532:	91 81       	ldd	r25, Z+1	; 0x01
    4534:	6f e0       	ldi	r22, 0x0F	; 15
    4536:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    453a:	fe 01       	movw	r30, r28
    453c:	e1 5a       	subi	r30, 0xA1	; 161
    453e:	ff 4f       	sbci	r31, 0xFF	; 255
    4540:	80 e0       	ldi	r24, 0x00	; 0
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	a8 e4       	ldi	r26, 0x48	; 72
    4546:	b2 e4       	ldi	r27, 0x42	; 66
    4548:	80 83       	st	Z, r24
    454a:	91 83       	std	Z+1, r25	; 0x01
    454c:	a2 83       	std	Z+2, r26	; 0x02
    454e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4550:	8e 01       	movw	r16, r28
    4552:	05 5a       	subi	r16, 0xA5	; 165
    4554:	1f 4f       	sbci	r17, 0xFF	; 255
    4556:	fe 01       	movw	r30, r28
    4558:	e1 5a       	subi	r30, 0xA1	; 161
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	60 81       	ld	r22, Z
    455e:	71 81       	ldd	r23, Z+1	; 0x01
    4560:	82 81       	ldd	r24, Z+2	; 0x02
    4562:	93 81       	ldd	r25, Z+3	; 0x03
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	4a ef       	ldi	r20, 0xFA	; 250
    456a:	54 e4       	ldi	r21, 0x44	; 68
    456c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	f8 01       	movw	r30, r16
    4576:	80 83       	st	Z, r24
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	a2 83       	std	Z+2, r26	; 0x02
    457c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    457e:	fe 01       	movw	r30, r28
    4580:	e5 5a       	subi	r30, 0xA5	; 165
    4582:	ff 4f       	sbci	r31, 0xFF	; 255
    4584:	60 81       	ld	r22, Z
    4586:	71 81       	ldd	r23, Z+1	; 0x01
    4588:	82 81       	ldd	r24, Z+2	; 0x02
    458a:	93 81       	ldd	r25, Z+3	; 0x03
    458c:	20 e0       	ldi	r18, 0x00	; 0
    458e:	30 e0       	ldi	r19, 0x00	; 0
    4590:	40 e8       	ldi	r20, 0x80	; 128
    4592:	5f e3       	ldi	r21, 0x3F	; 63
    4594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4598:	88 23       	and	r24, r24
    459a:	44 f4       	brge	.+16     	; 0x45ac <HLCD_init+0x67a>
		__ticks = 1;
    459c:	fe 01       	movw	r30, r28
    459e:	e7 5a       	subi	r30, 0xA7	; 167
    45a0:	ff 4f       	sbci	r31, 0xFF	; 255
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	90 e0       	ldi	r25, 0x00	; 0
    45a6:	91 83       	std	Z+1, r25	; 0x01
    45a8:	80 83       	st	Z, r24
    45aa:	64 c0       	rjmp	.+200    	; 0x4674 <HLCD_init+0x742>
	else if (__tmp > 65535)
    45ac:	fe 01       	movw	r30, r28
    45ae:	e5 5a       	subi	r30, 0xA5	; 165
    45b0:	ff 4f       	sbci	r31, 0xFF	; 255
    45b2:	60 81       	ld	r22, Z
    45b4:	71 81       	ldd	r23, Z+1	; 0x01
    45b6:	82 81       	ldd	r24, Z+2	; 0x02
    45b8:	93 81       	ldd	r25, Z+3	; 0x03
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	3f ef       	ldi	r19, 0xFF	; 255
    45be:	4f e7       	ldi	r20, 0x7F	; 127
    45c0:	57 e4       	ldi	r21, 0x47	; 71
    45c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    45c6:	18 16       	cp	r1, r24
    45c8:	0c f0       	brlt	.+2      	; 0x45cc <HLCD_init+0x69a>
    45ca:	43 c0       	rjmp	.+134    	; 0x4652 <HLCD_init+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45cc:	fe 01       	movw	r30, r28
    45ce:	e1 5a       	subi	r30, 0xA1	; 161
    45d0:	ff 4f       	sbci	r31, 0xFF	; 255
    45d2:	60 81       	ld	r22, Z
    45d4:	71 81       	ldd	r23, Z+1	; 0x01
    45d6:	82 81       	ldd	r24, Z+2	; 0x02
    45d8:	93 81       	ldd	r25, Z+3	; 0x03
    45da:	20 e0       	ldi	r18, 0x00	; 0
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	40 e2       	ldi	r20, 0x20	; 32
    45e0:	51 e4       	ldi	r21, 0x41	; 65
    45e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45e6:	dc 01       	movw	r26, r24
    45e8:	cb 01       	movw	r24, r22
    45ea:	8e 01       	movw	r16, r28
    45ec:	07 5a       	subi	r16, 0xA7	; 167
    45ee:	1f 4f       	sbci	r17, 0xFF	; 255
    45f0:	bc 01       	movw	r22, r24
    45f2:	cd 01       	movw	r24, r26
    45f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45f8:	dc 01       	movw	r26, r24
    45fa:	cb 01       	movw	r24, r22
    45fc:	f8 01       	movw	r30, r16
    45fe:	91 83       	std	Z+1, r25	; 0x01
    4600:	80 83       	st	Z, r24
    4602:	1f c0       	rjmp	.+62     	; 0x4642 <HLCD_init+0x710>
    4604:	fe 01       	movw	r30, r28
    4606:	e9 5a       	subi	r30, 0xA9	; 169
    4608:	ff 4f       	sbci	r31, 0xFF	; 255
    460a:	88 ec       	ldi	r24, 0xC8	; 200
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	91 83       	std	Z+1, r25	; 0x01
    4610:	80 83       	st	Z, r24
    4612:	fe 01       	movw	r30, r28
    4614:	e9 5a       	subi	r30, 0xA9	; 169
    4616:	ff 4f       	sbci	r31, 0xFF	; 255
    4618:	80 81       	ld	r24, Z
    461a:	91 81       	ldd	r25, Z+1	; 0x01
    461c:	01 97       	sbiw	r24, 0x01	; 1
    461e:	f1 f7       	brne	.-4      	; 0x461c <HLCD_init+0x6ea>
    4620:	fe 01       	movw	r30, r28
    4622:	e9 5a       	subi	r30, 0xA9	; 169
    4624:	ff 4f       	sbci	r31, 0xFF	; 255
    4626:	91 83       	std	Z+1, r25	; 0x01
    4628:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462a:	de 01       	movw	r26, r28
    462c:	a7 5a       	subi	r26, 0xA7	; 167
    462e:	bf 4f       	sbci	r27, 0xFF	; 255
    4630:	fe 01       	movw	r30, r28
    4632:	e7 5a       	subi	r30, 0xA7	; 167
    4634:	ff 4f       	sbci	r31, 0xFF	; 255
    4636:	80 81       	ld	r24, Z
    4638:	91 81       	ldd	r25, Z+1	; 0x01
    463a:	01 97       	sbiw	r24, 0x01	; 1
    463c:	11 96       	adiw	r26, 0x01	; 1
    463e:	9c 93       	st	X, r25
    4640:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4642:	fe 01       	movw	r30, r28
    4644:	e7 5a       	subi	r30, 0xA7	; 167
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	80 81       	ld	r24, Z
    464a:	91 81       	ldd	r25, Z+1	; 0x01
    464c:	00 97       	sbiw	r24, 0x00	; 0
    464e:	d1 f6       	brne	.-76     	; 0x4604 <HLCD_init+0x6d2>
    4650:	27 c0       	rjmp	.+78     	; 0x46a0 <HLCD_init+0x76e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4652:	8e 01       	movw	r16, r28
    4654:	07 5a       	subi	r16, 0xA7	; 167
    4656:	1f 4f       	sbci	r17, 0xFF	; 255
    4658:	fe 01       	movw	r30, r28
    465a:	e5 5a       	subi	r30, 0xA5	; 165
    465c:	ff 4f       	sbci	r31, 0xFF	; 255
    465e:	60 81       	ld	r22, Z
    4660:	71 81       	ldd	r23, Z+1	; 0x01
    4662:	82 81       	ldd	r24, Z+2	; 0x02
    4664:	93 81       	ldd	r25, Z+3	; 0x03
    4666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	f8 01       	movw	r30, r16
    4670:	91 83       	std	Z+1, r25	; 0x01
    4672:	80 83       	st	Z, r24
    4674:	de 01       	movw	r26, r28
    4676:	ab 5a       	subi	r26, 0xAB	; 171
    4678:	bf 4f       	sbci	r27, 0xFF	; 255
    467a:	fe 01       	movw	r30, r28
    467c:	e7 5a       	subi	r30, 0xA7	; 167
    467e:	ff 4f       	sbci	r31, 0xFF	; 255
    4680:	80 81       	ld	r24, Z
    4682:	91 81       	ldd	r25, Z+1	; 0x01
    4684:	8d 93       	st	X+, r24
    4686:	9c 93       	st	X, r25
    4688:	fe 01       	movw	r30, r28
    468a:	eb 5a       	subi	r30, 0xAB	; 171
    468c:	ff 4f       	sbci	r31, 0xFF	; 255
    468e:	80 81       	ld	r24, Z
    4690:	91 81       	ldd	r25, Z+1	; 0x01
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	f1 f7       	brne	.-4      	; 0x4692 <HLCD_init+0x760>
    4696:	fe 01       	movw	r30, r28
    4698:	eb 5a       	subi	r30, 0xAB	; 171
    469a:	ff 4f       	sbci	r31, 0xFF	; 255
    469c:	91 83       	std	Z+1, r25	; 0x01
    469e:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,DISPLAY_CLR);
    46a0:	fe 01       	movw	r30, r28
    46a2:	e3 56       	subi	r30, 0x63	; 99
    46a4:	ff 4f       	sbci	r31, 0xFF	; 255
    46a6:	80 81       	ld	r24, Z
    46a8:	91 81       	ldd	r25, Z+1	; 0x01
    46aa:	61 e0       	ldi	r22, 0x01	; 1
    46ac:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    46b0:	fe 01       	movw	r30, r28
    46b2:	ef 5a       	subi	r30, 0xAF	; 175
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	80 e0       	ldi	r24, 0x00	; 0
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	a8 e4       	ldi	r26, 0x48	; 72
    46bc:	b2 e4       	ldi	r27, 0x42	; 66
    46be:	80 83       	st	Z, r24
    46c0:	91 83       	std	Z+1, r25	; 0x01
    46c2:	a2 83       	std	Z+2, r26	; 0x02
    46c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46c6:	8e 01       	movw	r16, r28
    46c8:	03 5b       	subi	r16, 0xB3	; 179
    46ca:	1f 4f       	sbci	r17, 0xFF	; 255
    46cc:	fe 01       	movw	r30, r28
    46ce:	ef 5a       	subi	r30, 0xAF	; 175
    46d0:	ff 4f       	sbci	r31, 0xFF	; 255
    46d2:	60 81       	ld	r22, Z
    46d4:	71 81       	ldd	r23, Z+1	; 0x01
    46d6:	82 81       	ldd	r24, Z+2	; 0x02
    46d8:	93 81       	ldd	r25, Z+3	; 0x03
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	30 e0       	ldi	r19, 0x00	; 0
    46de:	4a ef       	ldi	r20, 0xFA	; 250
    46e0:	54 e4       	ldi	r21, 0x44	; 68
    46e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46e6:	dc 01       	movw	r26, r24
    46e8:	cb 01       	movw	r24, r22
    46ea:	f8 01       	movw	r30, r16
    46ec:	80 83       	st	Z, r24
    46ee:	91 83       	std	Z+1, r25	; 0x01
    46f0:	a2 83       	std	Z+2, r26	; 0x02
    46f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46f4:	fe 01       	movw	r30, r28
    46f6:	e3 5b       	subi	r30, 0xB3	; 179
    46f8:	ff 4f       	sbci	r31, 0xFF	; 255
    46fa:	60 81       	ld	r22, Z
    46fc:	71 81       	ldd	r23, Z+1	; 0x01
    46fe:	82 81       	ldd	r24, Z+2	; 0x02
    4700:	93 81       	ldd	r25, Z+3	; 0x03
    4702:	20 e0       	ldi	r18, 0x00	; 0
    4704:	30 e0       	ldi	r19, 0x00	; 0
    4706:	40 e8       	ldi	r20, 0x80	; 128
    4708:	5f e3       	ldi	r21, 0x3F	; 63
    470a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    470e:	88 23       	and	r24, r24
    4710:	44 f4       	brge	.+16     	; 0x4722 <HLCD_init+0x7f0>
		__ticks = 1;
    4712:	fe 01       	movw	r30, r28
    4714:	e5 5b       	subi	r30, 0xB5	; 181
    4716:	ff 4f       	sbci	r31, 0xFF	; 255
    4718:	81 e0       	ldi	r24, 0x01	; 1
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	91 83       	std	Z+1, r25	; 0x01
    471e:	80 83       	st	Z, r24
    4720:	64 c0       	rjmp	.+200    	; 0x47ea <HLCD_init+0x8b8>
	else if (__tmp > 65535)
    4722:	fe 01       	movw	r30, r28
    4724:	e3 5b       	subi	r30, 0xB3	; 179
    4726:	ff 4f       	sbci	r31, 0xFF	; 255
    4728:	60 81       	ld	r22, Z
    472a:	71 81       	ldd	r23, Z+1	; 0x01
    472c:	82 81       	ldd	r24, Z+2	; 0x02
    472e:	93 81       	ldd	r25, Z+3	; 0x03
    4730:	20 e0       	ldi	r18, 0x00	; 0
    4732:	3f ef       	ldi	r19, 0xFF	; 255
    4734:	4f e7       	ldi	r20, 0x7F	; 127
    4736:	57 e4       	ldi	r21, 0x47	; 71
    4738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    473c:	18 16       	cp	r1, r24
    473e:	0c f0       	brlt	.+2      	; 0x4742 <HLCD_init+0x810>
    4740:	43 c0       	rjmp	.+134    	; 0x47c8 <HLCD_init+0x896>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4742:	fe 01       	movw	r30, r28
    4744:	ef 5a       	subi	r30, 0xAF	; 175
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	60 81       	ld	r22, Z
    474a:	71 81       	ldd	r23, Z+1	; 0x01
    474c:	82 81       	ldd	r24, Z+2	; 0x02
    474e:	93 81       	ldd	r25, Z+3	; 0x03
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	40 e2       	ldi	r20, 0x20	; 32
    4756:	51 e4       	ldi	r21, 0x41	; 65
    4758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	8e 01       	movw	r16, r28
    4762:	05 5b       	subi	r16, 0xB5	; 181
    4764:	1f 4f       	sbci	r17, 0xFF	; 255
    4766:	bc 01       	movw	r22, r24
    4768:	cd 01       	movw	r24, r26
    476a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    476e:	dc 01       	movw	r26, r24
    4770:	cb 01       	movw	r24, r22
    4772:	f8 01       	movw	r30, r16
    4774:	91 83       	std	Z+1, r25	; 0x01
    4776:	80 83       	st	Z, r24
    4778:	1f c0       	rjmp	.+62     	; 0x47b8 <HLCD_init+0x886>
    477a:	fe 01       	movw	r30, r28
    477c:	e7 5b       	subi	r30, 0xB7	; 183
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	88 ec       	ldi	r24, 0xC8	; 200
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	91 83       	std	Z+1, r25	; 0x01
    4786:	80 83       	st	Z, r24
    4788:	fe 01       	movw	r30, r28
    478a:	e7 5b       	subi	r30, 0xB7	; 183
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 81       	ld	r24, Z
    4790:	91 81       	ldd	r25, Z+1	; 0x01
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	f1 f7       	brne	.-4      	; 0x4792 <HLCD_init+0x860>
    4796:	fe 01       	movw	r30, r28
    4798:	e7 5b       	subi	r30, 0xB7	; 183
    479a:	ff 4f       	sbci	r31, 0xFF	; 255
    479c:	91 83       	std	Z+1, r25	; 0x01
    479e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47a0:	de 01       	movw	r26, r28
    47a2:	a5 5b       	subi	r26, 0xB5	; 181
    47a4:	bf 4f       	sbci	r27, 0xFF	; 255
    47a6:	fe 01       	movw	r30, r28
    47a8:	e5 5b       	subi	r30, 0xB5	; 181
    47aa:	ff 4f       	sbci	r31, 0xFF	; 255
    47ac:	80 81       	ld	r24, Z
    47ae:	91 81       	ldd	r25, Z+1	; 0x01
    47b0:	01 97       	sbiw	r24, 0x01	; 1
    47b2:	11 96       	adiw	r26, 0x01	; 1
    47b4:	9c 93       	st	X, r25
    47b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b8:	fe 01       	movw	r30, r28
    47ba:	e5 5b       	subi	r30, 0xB5	; 181
    47bc:	ff 4f       	sbci	r31, 0xFF	; 255
    47be:	80 81       	ld	r24, Z
    47c0:	91 81       	ldd	r25, Z+1	; 0x01
    47c2:	00 97       	sbiw	r24, 0x00	; 0
    47c4:	d1 f6       	brne	.-76     	; 0x477a <HLCD_init+0x848>
    47c6:	27 c0       	rjmp	.+78     	; 0x4816 <HLCD_init+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c8:	8e 01       	movw	r16, r28
    47ca:	05 5b       	subi	r16, 0xB5	; 181
    47cc:	1f 4f       	sbci	r17, 0xFF	; 255
    47ce:	fe 01       	movw	r30, r28
    47d0:	e3 5b       	subi	r30, 0xB3	; 179
    47d2:	ff 4f       	sbci	r31, 0xFF	; 255
    47d4:	60 81       	ld	r22, Z
    47d6:	71 81       	ldd	r23, Z+1	; 0x01
    47d8:	82 81       	ldd	r24, Z+2	; 0x02
    47da:	93 81       	ldd	r25, Z+3	; 0x03
    47dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e0:	dc 01       	movw	r26, r24
    47e2:	cb 01       	movw	r24, r22
    47e4:	f8 01       	movw	r30, r16
    47e6:	91 83       	std	Z+1, r25	; 0x01
    47e8:	80 83       	st	Z, r24
    47ea:	de 01       	movw	r26, r28
    47ec:	a9 5b       	subi	r26, 0xB9	; 185
    47ee:	bf 4f       	sbci	r27, 0xFF	; 255
    47f0:	fe 01       	movw	r30, r28
    47f2:	e5 5b       	subi	r30, 0xB5	; 181
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	80 81       	ld	r24, Z
    47f8:	91 81       	ldd	r25, Z+1	; 0x01
    47fa:	8d 93       	st	X+, r24
    47fc:	9c 93       	st	X, r25
    47fe:	fe 01       	movw	r30, r28
    4800:	e9 5b       	subi	r30, 0xB9	; 185
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	80 81       	ld	r24, Z
    4806:	91 81       	ldd	r25, Z+1	; 0x01
    4808:	01 97       	sbiw	r24, 0x01	; 1
    480a:	f1 f7       	brne	.-4      	; 0x4808 <HLCD_init+0x8d6>
    480c:	fe 01       	movw	r30, r28
    480e:	e9 5b       	subi	r30, 0xB9	; 185
    4810:	ff 4f       	sbci	r31, 0xFF	; 255
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	80 83       	st	Z, r24
			_delay_ms(50);
			HLCD_sendCmd(ST_ptrLcdCfgInstance ,ENTRY_MODE);
    4816:	fe 01       	movw	r30, r28
    4818:	e3 56       	subi	r30, 0x63	; 99
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	80 81       	ld	r24, Z
    481e:	91 81       	ldd	r25, Z+1	; 0x01
    4820:	66 e0       	ldi	r22, 0x06	; 6
    4822:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    4826:	fe 01       	movw	r30, r28
    4828:	ed 5b       	subi	r30, 0xBD	; 189
    482a:	ff 4f       	sbci	r31, 0xFF	; 255
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	a8 e4       	ldi	r26, 0x48	; 72
    4832:	b2 e4       	ldi	r27, 0x42	; 66
    4834:	80 83       	st	Z, r24
    4836:	91 83       	std	Z+1, r25	; 0x01
    4838:	a2 83       	std	Z+2, r26	; 0x02
    483a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    483c:	8e 01       	movw	r16, r28
    483e:	01 5c       	subi	r16, 0xC1	; 193
    4840:	1f 4f       	sbci	r17, 0xFF	; 255
    4842:	fe 01       	movw	r30, r28
    4844:	ed 5b       	subi	r30, 0xBD	; 189
    4846:	ff 4f       	sbci	r31, 0xFF	; 255
    4848:	60 81       	ld	r22, Z
    484a:	71 81       	ldd	r23, Z+1	; 0x01
    484c:	82 81       	ldd	r24, Z+2	; 0x02
    484e:	93 81       	ldd	r25, Z+3	; 0x03
    4850:	20 e0       	ldi	r18, 0x00	; 0
    4852:	30 e0       	ldi	r19, 0x00	; 0
    4854:	4a ef       	ldi	r20, 0xFA	; 250
    4856:	54 e4       	ldi	r21, 0x44	; 68
    4858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485c:	dc 01       	movw	r26, r24
    485e:	cb 01       	movw	r24, r22
    4860:	f8 01       	movw	r30, r16
    4862:	80 83       	st	Z, r24
    4864:	91 83       	std	Z+1, r25	; 0x01
    4866:	a2 83       	std	Z+2, r26	; 0x02
    4868:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    486a:	fe 01       	movw	r30, r28
    486c:	ff 96       	adiw	r30, 0x3f	; 63
    486e:	60 81       	ld	r22, Z
    4870:	71 81       	ldd	r23, Z+1	; 0x01
    4872:	82 81       	ldd	r24, Z+2	; 0x02
    4874:	93 81       	ldd	r25, Z+3	; 0x03
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	40 e8       	ldi	r20, 0x80	; 128
    487c:	5f e3       	ldi	r21, 0x3F	; 63
    487e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4882:	88 23       	and	r24, r24
    4884:	2c f4       	brge	.+10     	; 0x4890 <HLCD_init+0x95e>
		__ticks = 1;
    4886:	81 e0       	ldi	r24, 0x01	; 1
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	9e af       	std	Y+62, r25	; 0x3e
    488c:	8d af       	std	Y+61, r24	; 0x3d
    488e:	46 c0       	rjmp	.+140    	; 0x491c <HLCD_init+0x9ea>
	else if (__tmp > 65535)
    4890:	fe 01       	movw	r30, r28
    4892:	ff 96       	adiw	r30, 0x3f	; 63
    4894:	60 81       	ld	r22, Z
    4896:	71 81       	ldd	r23, Z+1	; 0x01
    4898:	82 81       	ldd	r24, Z+2	; 0x02
    489a:	93 81       	ldd	r25, Z+3	; 0x03
    489c:	20 e0       	ldi	r18, 0x00	; 0
    489e:	3f ef       	ldi	r19, 0xFF	; 255
    48a0:	4f e7       	ldi	r20, 0x7F	; 127
    48a2:	57 e4       	ldi	r21, 0x47	; 71
    48a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48a8:	18 16       	cp	r1, r24
    48aa:	64 f5       	brge	.+88     	; 0x4904 <HLCD_init+0x9d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ac:	fe 01       	movw	r30, r28
    48ae:	ed 5b       	subi	r30, 0xBD	; 189
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	60 81       	ld	r22, Z
    48b4:	71 81       	ldd	r23, Z+1	; 0x01
    48b6:	82 81       	ldd	r24, Z+2	; 0x02
    48b8:	93 81       	ldd	r25, Z+3	; 0x03
    48ba:	20 e0       	ldi	r18, 0x00	; 0
    48bc:	30 e0       	ldi	r19, 0x00	; 0
    48be:	40 e2       	ldi	r20, 0x20	; 32
    48c0:	51 e4       	ldi	r21, 0x41	; 65
    48c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c6:	dc 01       	movw	r26, r24
    48c8:	cb 01       	movw	r24, r22
    48ca:	bc 01       	movw	r22, r24
    48cc:	cd 01       	movw	r24, r26
    48ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d2:	dc 01       	movw	r26, r24
    48d4:	cb 01       	movw	r24, r22
    48d6:	9e af       	std	Y+62, r25	; 0x3e
    48d8:	8d af       	std	Y+61, r24	; 0x3d
    48da:	0f c0       	rjmp	.+30     	; 0x48fa <HLCD_init+0x9c8>
    48dc:	88 ec       	ldi	r24, 0xC8	; 200
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	9c af       	std	Y+60, r25	; 0x3c
    48e2:	8b af       	std	Y+59, r24	; 0x3b
    48e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    48e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    48e8:	01 97       	sbiw	r24, 0x01	; 1
    48ea:	f1 f7       	brne	.-4      	; 0x48e8 <HLCD_init+0x9b6>
    48ec:	9c af       	std	Y+60, r25	; 0x3c
    48ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    48f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    48f4:	01 97       	sbiw	r24, 0x01	; 1
    48f6:	9e af       	std	Y+62, r25	; 0x3e
    48f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    48fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    48fe:	00 97       	sbiw	r24, 0x00	; 0
    4900:	69 f7       	brne	.-38     	; 0x48dc <HLCD_init+0x9aa>
    4902:	58 c2       	rjmp	.+1200   	; 0x4db4 <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4904:	fe 01       	movw	r30, r28
    4906:	ff 96       	adiw	r30, 0x3f	; 63
    4908:	60 81       	ld	r22, Z
    490a:	71 81       	ldd	r23, Z+1	; 0x01
    490c:	82 81       	ldd	r24, Z+2	; 0x02
    490e:	93 81       	ldd	r25, Z+3	; 0x03
    4910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4914:	dc 01       	movw	r26, r24
    4916:	cb 01       	movw	r24, r22
    4918:	9e af       	std	Y+62, r25	; 0x3e
    491a:	8d af       	std	Y+61, r24	; 0x3d
    491c:	8d ad       	ldd	r24, Y+61	; 0x3d
    491e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4920:	9a af       	std	Y+58, r25	; 0x3a
    4922:	89 af       	std	Y+57, r24	; 0x39
    4924:	89 ad       	ldd	r24, Y+57	; 0x39
    4926:	9a ad       	ldd	r25, Y+58	; 0x3a
    4928:	01 97       	sbiw	r24, 0x01	; 1
    492a:	f1 f7       	brne	.-4      	; 0x4928 <HLCD_init+0x9f6>
    492c:	9a af       	std	Y+58, r25	; 0x3a
    492e:	89 af       	std	Y+57, r24	; 0x39
    4930:	41 c2       	rjmp	.+1154   	; 0x4db4 <HLCD_init+0xe82>
			_delay_ms(50);

		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    4932:	fe 01       	movw	r30, r28
    4934:	e3 56       	subi	r30, 0x63	; 99
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	01 90       	ld	r0, Z+
    493a:	f0 81       	ld	r31, Z
    493c:	e0 2d       	mov	r30, r0
    493e:	80 81       	ld	r24, Z
    4940:	81 30       	cpi	r24, 0x01	; 1
    4942:	09 f0       	breq	.+2      	; 0x4946 <HLCD_init+0xa14>
    4944:	2c c2       	rjmp	.+1112   	; 0x4d9e <HLCD_init+0xe6c>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_initPort(ST_ptrLcdCfgInstance->dataPort,GPIO_OUTPUT,GPIO_LOW);
    4946:	fe 01       	movw	r30, r28
    4948:	e1 58       	subi	r30, 0x81	; 129
    494a:	ff 4f       	sbci	r31, 0xFF	; 255
    494c:	80 81       	ld	r24, Z
    494e:	88 23       	and	r24, r24
    4950:	81 f4       	brne	.+32     	; 0x4972 <HLCD_init+0xa40>
    4952:	fe 01       	movw	r30, r28
    4954:	e3 56       	subi	r30, 0x63	; 99
    4956:	ff 4f       	sbci	r31, 0xFF	; 255
    4958:	01 90       	ld	r0, Z+
    495a:	f0 81       	ld	r31, Z
    495c:	e0 2d       	mov	r30, r0
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	61 e0       	ldi	r22, 0x01	; 1
    4962:	40 e0       	ldi	r20, 0x00	; 0
    4964:	0e 94 3c 10 	call	0x2078	; 0x2078 <GPIO_initPort>
    4968:	fe 01       	movw	r30, r28
    496a:	e1 58       	subi	r30, 0x81	; 129
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	80 83       	st	Z, r24
    4970:	05 c0       	rjmp	.+10     	; 0x497c <HLCD_init+0xa4a>
			else lcdRet = HLCD_NOK;
    4972:	fe 01       	movw	r30, r28
    4974:	e0 58       	subi	r30, 0x80	; 128
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	81 e0       	ldi	r24, 0x01	; 1
    497a:	80 83       	st	Z, r24
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	a0 e8       	ldi	r26, 0x80	; 128
    4982:	bf e3       	ldi	r27, 0x3F	; 63
    4984:	8d ab       	std	Y+53, r24	; 0x35
    4986:	9e ab       	std	Y+54, r25	; 0x36
    4988:	af ab       	std	Y+55, r26	; 0x37
    498a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    498c:	6d a9       	ldd	r22, Y+53	; 0x35
    498e:	7e a9       	ldd	r23, Y+54	; 0x36
    4990:	8f a9       	ldd	r24, Y+55	; 0x37
    4992:	98 ad       	ldd	r25, Y+56	; 0x38
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	4a ef       	ldi	r20, 0xFA	; 250
    499a:	54 e4       	ldi	r21, 0x44	; 68
    499c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49a0:	dc 01       	movw	r26, r24
    49a2:	cb 01       	movw	r24, r22
    49a4:	89 ab       	std	Y+49, r24	; 0x31
    49a6:	9a ab       	std	Y+50, r25	; 0x32
    49a8:	ab ab       	std	Y+51, r26	; 0x33
    49aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    49ac:	69 a9       	ldd	r22, Y+49	; 0x31
    49ae:	7a a9       	ldd	r23, Y+50	; 0x32
    49b0:	8b a9       	ldd	r24, Y+51	; 0x33
    49b2:	9c a9       	ldd	r25, Y+52	; 0x34
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	40 e8       	ldi	r20, 0x80	; 128
    49ba:	5f e3       	ldi	r21, 0x3F	; 63
    49bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49c0:	88 23       	and	r24, r24
    49c2:	2c f4       	brge	.+10     	; 0x49ce <HLCD_init+0xa9c>
		__ticks = 1;
    49c4:	81 e0       	ldi	r24, 0x01	; 1
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	98 ab       	std	Y+48, r25	; 0x30
    49ca:	8f a7       	std	Y+47, r24	; 0x2f
    49cc:	3f c0       	rjmp	.+126    	; 0x4a4c <HLCD_init+0xb1a>
	else if (__tmp > 65535)
    49ce:	69 a9       	ldd	r22, Y+49	; 0x31
    49d0:	7a a9       	ldd	r23, Y+50	; 0x32
    49d2:	8b a9       	ldd	r24, Y+51	; 0x33
    49d4:	9c a9       	ldd	r25, Y+52	; 0x34
    49d6:	20 e0       	ldi	r18, 0x00	; 0
    49d8:	3f ef       	ldi	r19, 0xFF	; 255
    49da:	4f e7       	ldi	r20, 0x7F	; 127
    49dc:	57 e4       	ldi	r21, 0x47	; 71
    49de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49e2:	18 16       	cp	r1, r24
    49e4:	4c f5       	brge	.+82     	; 0x4a38 <HLCD_init+0xb06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e6:	6d a9       	ldd	r22, Y+53	; 0x35
    49e8:	7e a9       	ldd	r23, Y+54	; 0x36
    49ea:	8f a9       	ldd	r24, Y+55	; 0x37
    49ec:	98 ad       	ldd	r25, Y+56	; 0x38
    49ee:	20 e0       	ldi	r18, 0x00	; 0
    49f0:	30 e0       	ldi	r19, 0x00	; 0
    49f2:	40 e2       	ldi	r20, 0x20	; 32
    49f4:	51 e4       	ldi	r21, 0x41	; 65
    49f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49fa:	dc 01       	movw	r26, r24
    49fc:	cb 01       	movw	r24, r22
    49fe:	bc 01       	movw	r22, r24
    4a00:	cd 01       	movw	r24, r26
    4a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	98 ab       	std	Y+48, r25	; 0x30
    4a0c:	8f a7       	std	Y+47, r24	; 0x2f
    4a0e:	0f c0       	rjmp	.+30     	; 0x4a2e <HLCD_init+0xafc>
    4a10:	88 ec       	ldi	r24, 0xC8	; 200
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	9e a7       	std	Y+46, r25	; 0x2e
    4a16:	8d a7       	std	Y+45, r24	; 0x2d
    4a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a1c:	01 97       	sbiw	r24, 0x01	; 1
    4a1e:	f1 f7       	brne	.-4      	; 0x4a1c <HLCD_init+0xaea>
    4a20:	9e a7       	std	Y+46, r25	; 0x2e
    4a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a26:	98 a9       	ldd	r25, Y+48	; 0x30
    4a28:	01 97       	sbiw	r24, 0x01	; 1
    4a2a:	98 ab       	std	Y+48, r25	; 0x30
    4a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a30:	98 a9       	ldd	r25, Y+48	; 0x30
    4a32:	00 97       	sbiw	r24, 0x00	; 0
    4a34:	69 f7       	brne	.-38     	; 0x4a10 <HLCD_init+0xade>
    4a36:	14 c0       	rjmp	.+40     	; 0x4a60 <HLCD_init+0xb2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a38:	69 a9       	ldd	r22, Y+49	; 0x31
    4a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    4a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    4a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    4a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a44:	dc 01       	movw	r26, r24
    4a46:	cb 01       	movw	r24, r22
    4a48:	98 ab       	std	Y+48, r25	; 0x30
    4a4a:	8f a7       	std	Y+47, r24	; 0x2f
    4a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    4a50:	9c a7       	std	Y+44, r25	; 0x2c
    4a52:	8b a7       	std	Y+43, r24	; 0x2b
    4a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a58:	01 97       	sbiw	r24, 0x01	; 1
    4a5a:	f1 f7       	brne	.-4      	; 0x4a58 <HLCD_init+0xb26>
    4a5c:	9c a7       	std	Y+44, r25	; 0x2c
    4a5e:	8b a7       	std	Y+43, r24	; 0x2b

			_delay_ms(1);

			if(gpioRet == GPIO_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,TWO_LINE_LCD_EIGHT_BIT_MODE);
    4a60:	fe 01       	movw	r30, r28
    4a62:	e1 58       	subi	r30, 0x81	; 129
    4a64:	ff 4f       	sbci	r31, 0xFF	; 255
    4a66:	80 81       	ld	r24, Z
    4a68:	88 23       	and	r24, r24
    4a6a:	69 f4       	brne	.+26     	; 0x4a86 <HLCD_init+0xb54>
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	e3 56       	subi	r30, 0x63	; 99
    4a70:	ff 4f       	sbci	r31, 0xFF	; 255
    4a72:	80 81       	ld	r24, Z
    4a74:	91 81       	ldd	r25, Z+1	; 0x01
    4a76:	68 e3       	ldi	r22, 0x38	; 56
    4a78:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    4a7c:	fe 01       	movw	r30, r28
    4a7e:	e0 58       	subi	r30, 0x80	; 128
    4a80:	ff 4f       	sbci	r31, 0xFF	; 255
    4a82:	80 83       	st	Z, r24
    4a84:	05 c0       	rjmp	.+10     	; 0x4a90 <HLCD_init+0xb5e>
			else lcdRet = HLCD_NOK;
    4a86:	fe 01       	movw	r30, r28
    4a88:	e0 58       	subi	r30, 0x80	; 128
    4a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8c:	81 e0       	ldi	r24, 0x01	; 1
    4a8e:	80 83       	st	Z, r24
    4a90:	80 e0       	ldi	r24, 0x00	; 0
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	a0 e8       	ldi	r26, 0x80	; 128
    4a96:	bf e3       	ldi	r27, 0x3F	; 63
    4a98:	8f a3       	std	Y+39, r24	; 0x27
    4a9a:	98 a7       	std	Y+40, r25	; 0x28
    4a9c:	a9 a7       	std	Y+41, r26	; 0x29
    4a9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa0:	6f a1       	ldd	r22, Y+39	; 0x27
    4aa2:	78 a5       	ldd	r23, Y+40	; 0x28
    4aa4:	89 a5       	ldd	r24, Y+41	; 0x29
    4aa6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	4a ef       	ldi	r20, 0xFA	; 250
    4aae:	54 e4       	ldi	r21, 0x44	; 68
    4ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab4:	dc 01       	movw	r26, r24
    4ab6:	cb 01       	movw	r24, r22
    4ab8:	8b a3       	std	Y+35, r24	; 0x23
    4aba:	9c a3       	std	Y+36, r25	; 0x24
    4abc:	ad a3       	std	Y+37, r26	; 0x25
    4abe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	40 e8       	ldi	r20, 0x80	; 128
    4ace:	5f e3       	ldi	r21, 0x3F	; 63
    4ad0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ad4:	88 23       	and	r24, r24
    4ad6:	2c f4       	brge	.+10     	; 0x4ae2 <HLCD_init+0xbb0>
		__ticks = 1;
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	9a a3       	std	Y+34, r25	; 0x22
    4ade:	89 a3       	std	Y+33, r24	; 0x21
    4ae0:	3f c0       	rjmp	.+126    	; 0x4b60 <HLCD_init+0xc2e>
	else if (__tmp > 65535)
    4ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    4ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    4ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    4ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    4aea:	20 e0       	ldi	r18, 0x00	; 0
    4aec:	3f ef       	ldi	r19, 0xFF	; 255
    4aee:	4f e7       	ldi	r20, 0x7F	; 127
    4af0:	57 e4       	ldi	r21, 0x47	; 71
    4af2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4af6:	18 16       	cp	r1, r24
    4af8:	4c f5       	brge	.+82     	; 0x4b4c <HLCD_init+0xc1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4afa:	6f a1       	ldd	r22, Y+39	; 0x27
    4afc:	78 a5       	ldd	r23, Y+40	; 0x28
    4afe:	89 a5       	ldd	r24, Y+41	; 0x29
    4b00:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b02:	20 e0       	ldi	r18, 0x00	; 0
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e2       	ldi	r20, 0x20	; 32
    4b08:	51 e4       	ldi	r21, 0x41	; 65
    4b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b0e:	dc 01       	movw	r26, r24
    4b10:	cb 01       	movw	r24, r22
    4b12:	bc 01       	movw	r22, r24
    4b14:	cd 01       	movw	r24, r26
    4b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b1a:	dc 01       	movw	r26, r24
    4b1c:	cb 01       	movw	r24, r22
    4b1e:	9a a3       	std	Y+34, r25	; 0x22
    4b20:	89 a3       	std	Y+33, r24	; 0x21
    4b22:	0f c0       	rjmp	.+30     	; 0x4b42 <HLCD_init+0xc10>
    4b24:	88 ec       	ldi	r24, 0xC8	; 200
    4b26:	90 e0       	ldi	r25, 0x00	; 0
    4b28:	98 a3       	std	Y+32, r25	; 0x20
    4b2a:	8f 8f       	std	Y+31, r24	; 0x1f
    4b2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b2e:	98 a1       	ldd	r25, Y+32	; 0x20
    4b30:	01 97       	sbiw	r24, 0x01	; 1
    4b32:	f1 f7       	brne	.-4      	; 0x4b30 <HLCD_init+0xbfe>
    4b34:	98 a3       	std	Y+32, r25	; 0x20
    4b36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b38:	89 a1       	ldd	r24, Y+33	; 0x21
    4b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    4b3c:	01 97       	sbiw	r24, 0x01	; 1
    4b3e:	9a a3       	std	Y+34, r25	; 0x22
    4b40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b42:	89 a1       	ldd	r24, Y+33	; 0x21
    4b44:	9a a1       	ldd	r25, Y+34	; 0x22
    4b46:	00 97       	sbiw	r24, 0x00	; 0
    4b48:	69 f7       	brne	.-38     	; 0x4b24 <HLCD_init+0xbf2>
    4b4a:	14 c0       	rjmp	.+40     	; 0x4b74 <HLCD_init+0xc42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b4c:	6b a1       	ldd	r22, Y+35	; 0x23
    4b4e:	7c a1       	ldd	r23, Y+36	; 0x24
    4b50:	8d a1       	ldd	r24, Y+37	; 0x25
    4b52:	9e a1       	ldd	r25, Y+38	; 0x26
    4b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	9a a3       	std	Y+34, r25	; 0x22
    4b5e:	89 a3       	std	Y+33, r24	; 0x21
    4b60:	89 a1       	ldd	r24, Y+33	; 0x21
    4b62:	9a a1       	ldd	r25, Y+34	; 0x22
    4b64:	9e 8f       	std	Y+30, r25	; 0x1e
    4b66:	8d 8f       	std	Y+29, r24	; 0x1d
    4b68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b6c:	01 97       	sbiw	r24, 0x01	; 1
    4b6e:	f1 f7       	brne	.-4      	; 0x4b6c <HLCD_init+0xc3a>
    4b70:	9e 8f       	std	Y+30, r25	; 0x1e
    4b72:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CURSOR_ON);
    4b74:	fe 01       	movw	r30, r28
    4b76:	e0 58       	subi	r30, 0x80	; 128
    4b78:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7a:	80 81       	ld	r24, Z
    4b7c:	88 23       	and	r24, r24
    4b7e:	69 f4       	brne	.+26     	; 0x4b9a <HLCD_init+0xc68>
    4b80:	fe 01       	movw	r30, r28
    4b82:	e3 56       	subi	r30, 0x63	; 99
    4b84:	ff 4f       	sbci	r31, 0xFF	; 255
    4b86:	80 81       	ld	r24, Z
    4b88:	91 81       	ldd	r25, Z+1	; 0x01
    4b8a:	6e e0       	ldi	r22, 0x0E	; 14
    4b8c:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    4b90:	fe 01       	movw	r30, r28
    4b92:	e0 58       	subi	r30, 0x80	; 128
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	80 83       	st	Z, r24
    4b98:	05 c0       	rjmp	.+10     	; 0x4ba4 <HLCD_init+0xc72>
			else lcdRet = HLCD_NOK;
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e0 58       	subi	r30, 0x80	; 128
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	80 83       	st	Z, r24
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	a0 e8       	ldi	r26, 0x80	; 128
    4baa:	bf e3       	ldi	r27, 0x3F	; 63
    4bac:	89 8f       	std	Y+25, r24	; 0x19
    4bae:	9a 8f       	std	Y+26, r25	; 0x1a
    4bb0:	ab 8f       	std	Y+27, r26	; 0x1b
    4bb2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    4bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bbc:	20 e0       	ldi	r18, 0x00	; 0
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	4a ef       	ldi	r20, 0xFA	; 250
    4bc2:	54 e4       	ldi	r21, 0x44	; 68
    4bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc8:	dc 01       	movw	r26, r24
    4bca:	cb 01       	movw	r24, r22
    4bcc:	8d 8b       	std	Y+21, r24	; 0x15
    4bce:	9e 8b       	std	Y+22, r25	; 0x16
    4bd0:	af 8b       	std	Y+23, r26	; 0x17
    4bd2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4bd4:	6d 89       	ldd	r22, Y+21	; 0x15
    4bd6:	7e 89       	ldd	r23, Y+22	; 0x16
    4bd8:	8f 89       	ldd	r24, Y+23	; 0x17
    4bda:	98 8d       	ldd	r25, Y+24	; 0x18
    4bdc:	20 e0       	ldi	r18, 0x00	; 0
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	40 e8       	ldi	r20, 0x80	; 128
    4be2:	5f e3       	ldi	r21, 0x3F	; 63
    4be4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4be8:	88 23       	and	r24, r24
    4bea:	2c f4       	brge	.+10     	; 0x4bf6 <HLCD_init+0xcc4>
		__ticks = 1;
    4bec:	81 e0       	ldi	r24, 0x01	; 1
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	9c 8b       	std	Y+20, r25	; 0x14
    4bf2:	8b 8b       	std	Y+19, r24	; 0x13
    4bf4:	3f c0       	rjmp	.+126    	; 0x4c74 <HLCD_init+0xd42>
	else if (__tmp > 65535)
    4bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    4bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    4bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    4bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    4bfe:	20 e0       	ldi	r18, 0x00	; 0
    4c00:	3f ef       	ldi	r19, 0xFF	; 255
    4c02:	4f e7       	ldi	r20, 0x7F	; 127
    4c04:	57 e4       	ldi	r21, 0x47	; 71
    4c06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c0a:	18 16       	cp	r1, r24
    4c0c:	4c f5       	brge	.+82     	; 0x4c60 <HLCD_init+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c0e:	69 8d       	ldd	r22, Y+25	; 0x19
    4c10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4c12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	40 e2       	ldi	r20, 0x20	; 32
    4c1c:	51 e4       	ldi	r21, 0x41	; 65
    4c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c22:	dc 01       	movw	r26, r24
    4c24:	cb 01       	movw	r24, r22
    4c26:	bc 01       	movw	r22, r24
    4c28:	cd 01       	movw	r24, r26
    4c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2e:	dc 01       	movw	r26, r24
    4c30:	cb 01       	movw	r24, r22
    4c32:	9c 8b       	std	Y+20, r25	; 0x14
    4c34:	8b 8b       	std	Y+19, r24	; 0x13
    4c36:	0f c0       	rjmp	.+30     	; 0x4c56 <HLCD_init+0xd24>
    4c38:	88 ec       	ldi	r24, 0xC8	; 200
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	9a 8b       	std	Y+18, r25	; 0x12
    4c3e:	89 8b       	std	Y+17, r24	; 0x11
    4c40:	89 89       	ldd	r24, Y+17	; 0x11
    4c42:	9a 89       	ldd	r25, Y+18	; 0x12
    4c44:	01 97       	sbiw	r24, 0x01	; 1
    4c46:	f1 f7       	brne	.-4      	; 0x4c44 <HLCD_init+0xd12>
    4c48:	9a 8b       	std	Y+18, r25	; 0x12
    4c4a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c50:	01 97       	sbiw	r24, 0x01	; 1
    4c52:	9c 8b       	std	Y+20, r25	; 0x14
    4c54:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c56:	8b 89       	ldd	r24, Y+19	; 0x13
    4c58:	9c 89       	ldd	r25, Y+20	; 0x14
    4c5a:	00 97       	sbiw	r24, 0x00	; 0
    4c5c:	69 f7       	brne	.-38     	; 0x4c38 <HLCD_init+0xd06>
    4c5e:	14 c0       	rjmp	.+40     	; 0x4c88 <HLCD_init+0xd56>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c60:	6d 89       	ldd	r22, Y+21	; 0x15
    4c62:	7e 89       	ldd	r23, Y+22	; 0x16
    4c64:	8f 89       	ldd	r24, Y+23	; 0x17
    4c66:	98 8d       	ldd	r25, Y+24	; 0x18
    4c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c6c:	dc 01       	movw	r26, r24
    4c6e:	cb 01       	movw	r24, r22
    4c70:	9c 8b       	std	Y+20, r25	; 0x14
    4c72:	8b 8b       	std	Y+19, r24	; 0x13
    4c74:	8b 89       	ldd	r24, Y+19	; 0x13
    4c76:	9c 89       	ldd	r25, Y+20	; 0x14
    4c78:	98 8b       	std	Y+16, r25	; 0x10
    4c7a:	8f 87       	std	Y+15, r24	; 0x0f
    4c7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c7e:	98 89       	ldd	r25, Y+16	; 0x10
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	f1 f7       	brne	.-4      	; 0x4c80 <HLCD_init+0xd4e>
    4c84:	98 8b       	std	Y+16, r25	; 0x10
    4c86:	8f 87       	std	Y+15, r24	; 0x0f

			_delay_ms(1);

			if(lcdRet == HLCD_OK)lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance,CLEAR_COMMAND);
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e0 58       	subi	r30, 0x80	; 128
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	80 81       	ld	r24, Z
    4c90:	88 23       	and	r24, r24
    4c92:	69 f4       	brne	.+26     	; 0x4cae <HLCD_init+0xd7c>
    4c94:	fe 01       	movw	r30, r28
    4c96:	e3 56       	subi	r30, 0x63	; 99
    4c98:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9a:	80 81       	ld	r24, Z
    4c9c:	91 81       	ldd	r25, Z+1	; 0x01
    4c9e:	61 e0       	ldi	r22, 0x01	; 1
    4ca0:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    4ca4:	fe 01       	movw	r30, r28
    4ca6:	e0 58       	subi	r30, 0x80	; 128
    4ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    4caa:	80 83       	st	Z, r24
    4cac:	05 c0       	rjmp	.+10     	; 0x4cb8 <HLCD_init+0xd86>
			else lcdRet = HLCD_NOK;
    4cae:	fe 01       	movw	r30, r28
    4cb0:	e0 58       	subi	r30, 0x80	; 128
    4cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb4:	81 e0       	ldi	r24, 0x01	; 1
    4cb6:	80 83       	st	Z, r24
    4cb8:	80 e0       	ldi	r24, 0x00	; 0
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	a0 e8       	ldi	r26, 0x80	; 128
    4cbe:	bf e3       	ldi	r27, 0x3F	; 63
    4cc0:	8b 87       	std	Y+11, r24	; 0x0b
    4cc2:	9c 87       	std	Y+12, r25	; 0x0c
    4cc4:	ad 87       	std	Y+13, r26	; 0x0d
    4cc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cd0:	20 e0       	ldi	r18, 0x00	; 0
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	4a ef       	ldi	r20, 0xFA	; 250
    4cd6:	54 e4       	ldi	r21, 0x44	; 68
    4cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cdc:	dc 01       	movw	r26, r24
    4cde:	cb 01       	movw	r24, r22
    4ce0:	8f 83       	std	Y+7, r24	; 0x07
    4ce2:	98 87       	std	Y+8, r25	; 0x08
    4ce4:	a9 87       	std	Y+9, r26	; 0x09
    4ce6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    4cea:	78 85       	ldd	r23, Y+8	; 0x08
    4cec:	89 85       	ldd	r24, Y+9	; 0x09
    4cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf0:	20 e0       	ldi	r18, 0x00	; 0
    4cf2:	30 e0       	ldi	r19, 0x00	; 0
    4cf4:	40 e8       	ldi	r20, 0x80	; 128
    4cf6:	5f e3       	ldi	r21, 0x3F	; 63
    4cf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cfc:	88 23       	and	r24, r24
    4cfe:	2c f4       	brge	.+10     	; 0x4d0a <HLCD_init+0xdd8>
		__ticks = 1;
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	9e 83       	std	Y+6, r25	; 0x06
    4d06:	8d 83       	std	Y+5, r24	; 0x05
    4d08:	3f c0       	rjmp	.+126    	; 0x4d88 <HLCD_init+0xe56>
	else if (__tmp > 65535)
    4d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4d0c:	78 85       	ldd	r23, Y+8	; 0x08
    4d0e:	89 85       	ldd	r24, Y+9	; 0x09
    4d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d12:	20 e0       	ldi	r18, 0x00	; 0
    4d14:	3f ef       	ldi	r19, 0xFF	; 255
    4d16:	4f e7       	ldi	r20, 0x7F	; 127
    4d18:	57 e4       	ldi	r21, 0x47	; 71
    4d1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d1e:	18 16       	cp	r1, r24
    4d20:	4c f5       	brge	.+82     	; 0x4d74 <HLCD_init+0xe42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d2a:	20 e0       	ldi	r18, 0x00	; 0
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	40 e2       	ldi	r20, 0x20	; 32
    4d30:	51 e4       	ldi	r21, 0x41	; 65
    4d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	bc 01       	movw	r22, r24
    4d3c:	cd 01       	movw	r24, r26
    4d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d42:	dc 01       	movw	r26, r24
    4d44:	cb 01       	movw	r24, r22
    4d46:	9e 83       	std	Y+6, r25	; 0x06
    4d48:	8d 83       	std	Y+5, r24	; 0x05
    4d4a:	0f c0       	rjmp	.+30     	; 0x4d6a <HLCD_init+0xe38>
    4d4c:	88 ec       	ldi	r24, 0xC8	; 200
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	9c 83       	std	Y+4, r25	; 0x04
    4d52:	8b 83       	std	Y+3, r24	; 0x03
    4d54:	8b 81       	ldd	r24, Y+3	; 0x03
    4d56:	9c 81       	ldd	r25, Y+4	; 0x04
    4d58:	01 97       	sbiw	r24, 0x01	; 1
    4d5a:	f1 f7       	brne	.-4      	; 0x4d58 <HLCD_init+0xe26>
    4d5c:	9c 83       	std	Y+4, r25	; 0x04
    4d5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d60:	8d 81       	ldd	r24, Y+5	; 0x05
    4d62:	9e 81       	ldd	r25, Y+6	; 0x06
    4d64:	01 97       	sbiw	r24, 0x01	; 1
    4d66:	9e 83       	std	Y+6, r25	; 0x06
    4d68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6e:	00 97       	sbiw	r24, 0x00	; 0
    4d70:	69 f7       	brne	.-38     	; 0x4d4c <HLCD_init+0xe1a>
    4d72:	20 c0       	rjmp	.+64     	; 0x4db4 <HLCD_init+0xe82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d74:	6f 81       	ldd	r22, Y+7	; 0x07
    4d76:	78 85       	ldd	r23, Y+8	; 0x08
    4d78:	89 85       	ldd	r24, Y+9	; 0x09
    4d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d80:	dc 01       	movw	r26, r24
    4d82:	cb 01       	movw	r24, r22
    4d84:	9e 83       	std	Y+6, r25	; 0x06
    4d86:	8d 83       	std	Y+5, r24	; 0x05
    4d88:	8d 81       	ldd	r24, Y+5	; 0x05
    4d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d8c:	9a 83       	std	Y+2, r25	; 0x02
    4d8e:	89 83       	std	Y+1, r24	; 0x01
    4d90:	89 81       	ldd	r24, Y+1	; 0x01
    4d92:	9a 81       	ldd	r25, Y+2	; 0x02
    4d94:	01 97       	sbiw	r24, 0x01	; 1
    4d96:	f1 f7       	brne	.-4      	; 0x4d94 <HLCD_init+0xe62>
    4d98:	9a 83       	std	Y+2, r25	; 0x02
    4d9a:	89 83       	std	Y+1, r24	; 0x01
    4d9c:	0b c0       	rjmp	.+22     	; 0x4db4 <HLCD_init+0xe82>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    4d9e:	fe 01       	movw	r30, r28
    4da0:	e0 58       	subi	r30, 0x80	; 128
    4da2:	ff 4f       	sbci	r31, 0xFF	; 255
    4da4:	83 e0       	ldi	r24, 0x03	; 3
    4da6:	80 83       	st	Z, r24
    4da8:	05 c0       	rjmp	.+10     	; 0x4db4 <HLCD_init+0xe82>


	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    4daa:	fe 01       	movw	r30, r28
    4dac:	e0 58       	subi	r30, 0x80	; 128
    4dae:	ff 4f       	sbci	r31, 0xFF	; 255
    4db0:	82 e0       	ldi	r24, 0x02	; 2
    4db2:	80 83       	st	Z, r24
	}

	return lcdRet;
    4db4:	fe 01       	movw	r30, r28
    4db6:	e0 58       	subi	r30, 0x80	; 128
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	80 81       	ld	r24, Z
}
    4dbc:	c2 56       	subi	r28, 0x62	; 98
    4dbe:	df 4f       	sbci	r29, 0xFF	; 255
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	f8 94       	cli
    4dc4:	de bf       	out	0x3e, r29	; 62
    4dc6:	0f be       	out	0x3f, r0	; 63
    4dc8:	cd bf       	out	0x3d, r28	; 61
    4dca:	cf 91       	pop	r28
    4dcc:	df 91       	pop	r29
    4dce:	1f 91       	pop	r17
    4dd0:	0f 91       	pop	r16
    4dd2:	08 95       	ret

00004dd4 <HLCD_sendCmd>:

EN_HLCD_systemState_t HLCD_sendCmd(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Command)
{
    4dd4:	0f 93       	push	r16
    4dd6:	1f 93       	push	r17
    4dd8:	df 93       	push	r29
    4dda:	cf 93       	push	r28
    4ddc:	cd b7       	in	r28, 0x3d	; 61
    4dde:	de b7       	in	r29, 0x3e	; 62
    4de0:	cd 59       	subi	r28, 0x9D	; 157
    4de2:	d0 40       	sbci	r29, 0x00	; 0
    4de4:	0f b6       	in	r0, 0x3f	; 63
    4de6:	f8 94       	cli
    4de8:	de bf       	out	0x3e, r29	; 62
    4dea:	0f be       	out	0x3f, r0	; 63
    4dec:	cd bf       	out	0x3d, r28	; 61
    4dee:	fe 01       	movw	r30, r28
    4df0:	e5 56       	subi	r30, 0x65	; 101
    4df2:	ff 4f       	sbci	r31, 0xFF	; 255
    4df4:	91 83       	std	Z+1, r25	; 0x01
    4df6:	80 83       	st	Z, r24
    4df8:	fe 01       	movw	r30, r28
    4dfa:	e3 56       	subi	r30, 0x63	; 99
    4dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfe:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    4e00:	fe 01       	movw	r30, r28
    4e02:	e2 57       	subi	r30, 0x72	; 114
    4e04:	ff 4f       	sbci	r31, 0xFF	; 255
    4e06:	81 e0       	ldi	r24, 0x01	; 1
    4e08:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    4e0a:	fe 01       	movw	r30, r28
    4e0c:	e3 57       	subi	r30, 0x73	; 115
    4e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e10:	81 e0       	ldi	r24, 0x01	; 1
    4e12:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    4e14:	fe 01       	movw	r30, r28
    4e16:	e5 56       	subi	r30, 0x65	; 101
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	80 81       	ld	r24, Z
    4e1c:	91 81       	ldd	r25, Z+1	; 0x01
    4e1e:	00 97       	sbiw	r24, 0x00	; 0
    4e20:	09 f4       	brne	.+2      	; 0x4e24 <HLCD_sendCmd+0x50>
    4e22:	2f c7       	rjmp	.+3678   	; 0x5c82 <HLCD_sendCmd+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    4e24:	fe 01       	movw	r30, r28
    4e26:	e5 56       	subi	r30, 0x65	; 101
    4e28:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2a:	01 90       	ld	r0, Z+
    4e2c:	f0 81       	ld	r31, Z
    4e2e:	e0 2d       	mov	r30, r0
    4e30:	81 81       	ldd	r24, Z+1	; 0x01
    4e32:	fe 01       	movw	r30, r28
    4e34:	e5 56       	subi	r30, 0x65	; 101
    4e36:	ff 4f       	sbci	r31, 0xFF	; 255
    4e38:	01 90       	ld	r0, Z+
    4e3a:	f0 81       	ld	r31, Z
    4e3c:	e0 2d       	mov	r30, r0
    4e3e:	93 81       	ldd	r25, Z+3	; 0x03
    4e40:	fe 01       	movw	r30, r28
    4e42:	e1 57       	subi	r30, 0x71	; 113
    4e44:	ff 4f       	sbci	r31, 0xFF	; 255
    4e46:	80 83       	st	Z, r24
    4e48:	fe 01       	movw	r30, r28
    4e4a:	e1 57       	subi	r30, 0x71	; 113
    4e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e4e:	91 83       	std	Z+1, r25	; 0x01
    4e50:	fe 01       	movw	r30, r28
    4e52:	e1 57       	subi	r30, 0x71	; 113
    4e54:	ff 4f       	sbci	r31, 0xFF	; 255
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	82 83       	std	Z+2, r24	; 0x02
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	e1 57       	subi	r30, 0x71	; 113
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    4e62:	fe 01       	movw	r30, r28
    4e64:	e5 56       	subi	r30, 0x65	; 101
    4e66:	ff 4f       	sbci	r31, 0xFF	; 255
    4e68:	01 90       	ld	r0, Z+
    4e6a:	f0 81       	ld	r31, Z
    4e6c:	e0 2d       	mov	r30, r0
    4e6e:	81 81       	ldd	r24, Z+1	; 0x01
    4e70:	fe 01       	movw	r30, r28
    4e72:	e5 56       	subi	r30, 0x65	; 101
    4e74:	ff 4f       	sbci	r31, 0xFF	; 255
    4e76:	01 90       	ld	r0, Z+
    4e78:	f0 81       	ld	r31, Z
    4e7a:	e0 2d       	mov	r30, r0
    4e7c:	94 81       	ldd	r25, Z+4	; 0x04
    4e7e:	fe 01       	movw	r30, r28
    4e80:	ed 56       	subi	r30, 0x6D	; 109
    4e82:	ff 4f       	sbci	r31, 0xFF	; 255
    4e84:	80 83       	st	Z, r24
    4e86:	fe 01       	movw	r30, r28
    4e88:	ed 56       	subi	r30, 0x6D	; 109
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	91 83       	std	Z+1, r25	; 0x01
    4e8e:	fe 01       	movw	r30, r28
    4e90:	ed 56       	subi	r30, 0x6D	; 109
    4e92:	ff 4f       	sbci	r31, 0xFF	; 255
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	82 83       	std	Z+2, r24	; 0x02
    4e98:	fe 01       	movw	r30, r28
    4e9a:	ed 56       	subi	r30, 0x6D	; 109
    4e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e9e:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    4ea0:	fe 01       	movw	r30, r28
    4ea2:	e5 56       	subi	r30, 0x65	; 101
    4ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea6:	01 90       	ld	r0, Z+
    4ea8:	f0 81       	ld	r31, Z
    4eaa:	e0 2d       	mov	r30, r0
    4eac:	81 81       	ldd	r24, Z+1	; 0x01
    4eae:	fe 01       	movw	r30, r28
    4eb0:	e5 56       	subi	r30, 0x65	; 101
    4eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb4:	01 90       	ld	r0, Z+
    4eb6:	f0 81       	ld	r31, Z
    4eb8:	e0 2d       	mov	r30, r0
    4eba:	95 81       	ldd	r25, Z+5	; 0x05
    4ebc:	fe 01       	movw	r30, r28
    4ebe:	e9 56       	subi	r30, 0x69	; 105
    4ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec2:	80 83       	st	Z, r24
    4ec4:	fe 01       	movw	r30, r28
    4ec6:	e9 56       	subi	r30, 0x69	; 105
    4ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eca:	91 83       	std	Z+1, r25	; 0x01
    4ecc:	fe 01       	movw	r30, r28
    4ece:	e9 56       	subi	r30, 0x69	; 105
    4ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	82 83       	std	Z+2, r24	; 0x02
    4ed6:	fe 01       	movw	r30, r28
    4ed8:	e9 56       	subi	r30, 0x69	; 105
    4eda:	ff 4f       	sbci	r31, 0xFF	; 255
    4edc:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_LOW);
    4ede:	ce 01       	movw	r24, r28
    4ee0:	81 57       	subi	r24, 0x71	; 113
    4ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee4:	60 e0       	ldi	r22, 0x00	; 0
    4ee6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    4eea:	fe 01       	movw	r30, r28
    4eec:	e3 57       	subi	r30, 0x73	; 115
    4eee:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef0:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	e3 57       	subi	r30, 0x73	; 115
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	80 81       	ld	r24, Z
    4efa:	88 23       	and	r24, r24
    4efc:	59 f4       	brne	.+22     	; 0x4f14 <HLCD_sendCmd+0x140>
    4efe:	ce 01       	movw	r24, r28
    4f00:	8d 56       	subi	r24, 0x6D	; 109
    4f02:	9f 4f       	sbci	r25, 0xFF	; 255
    4f04:	60 e0       	ldi	r22, 0x00	; 0
    4f06:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	e3 57       	subi	r30, 0x73	; 115
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	80 83       	st	Z, r24
    4f12:	05 c0       	rjmp	.+10     	; 0x4f1e <HLCD_sendCmd+0x14a>
		else lcdRet = HLCD_NOK;
    4f14:	fe 01       	movw	r30, r28
    4f16:	e2 57       	subi	r30, 0x72	; 114
    4f18:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	80 83       	st	Z, r24
    4f1e:	fe 01       	movw	r30, r28
    4f20:	e7 57       	subi	r30, 0x77	; 119
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	80 e0       	ldi	r24, 0x00	; 0
    4f26:	90 e0       	ldi	r25, 0x00	; 0
    4f28:	a0 ef       	ldi	r26, 0xF0	; 240
    4f2a:	b1 e4       	ldi	r27, 0x41	; 65
    4f2c:	80 83       	st	Z, r24
    4f2e:	91 83       	std	Z+1, r25	; 0x01
    4f30:	a2 83       	std	Z+2, r26	; 0x02
    4f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f34:	8e 01       	movw	r16, r28
    4f36:	0b 57       	subi	r16, 0x7B	; 123
    4f38:	1f 4f       	sbci	r17, 0xFF	; 255
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	e7 57       	subi	r30, 0x77	; 119
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	60 81       	ld	r22, Z
    4f42:	71 81       	ldd	r23, Z+1	; 0x01
    4f44:	82 81       	ldd	r24, Z+2	; 0x02
    4f46:	93 81       	ldd	r25, Z+3	; 0x03
    4f48:	20 e0       	ldi	r18, 0x00	; 0
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	4a ef       	ldi	r20, 0xFA	; 250
    4f4e:	54 e4       	ldi	r21, 0x44	; 68
    4f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f54:	dc 01       	movw	r26, r24
    4f56:	cb 01       	movw	r24, r22
    4f58:	f8 01       	movw	r30, r16
    4f5a:	80 83       	st	Z, r24
    4f5c:	91 83       	std	Z+1, r25	; 0x01
    4f5e:	a2 83       	std	Z+2, r26	; 0x02
    4f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f62:	fe 01       	movw	r30, r28
    4f64:	eb 57       	subi	r30, 0x7B	; 123
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	60 81       	ld	r22, Z
    4f6a:	71 81       	ldd	r23, Z+1	; 0x01
    4f6c:	82 81       	ldd	r24, Z+2	; 0x02
    4f6e:	93 81       	ldd	r25, Z+3	; 0x03
    4f70:	20 e0       	ldi	r18, 0x00	; 0
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	40 e8       	ldi	r20, 0x80	; 128
    4f76:	5f e3       	ldi	r21, 0x3F	; 63
    4f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f7c:	88 23       	and	r24, r24
    4f7e:	44 f4       	brge	.+16     	; 0x4f90 <HLCD_sendCmd+0x1bc>
		__ticks = 1;
    4f80:	fe 01       	movw	r30, r28
    4f82:	ed 57       	subi	r30, 0x7D	; 125
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	81 e0       	ldi	r24, 0x01	; 1
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	91 83       	std	Z+1, r25	; 0x01
    4f8c:	80 83       	st	Z, r24
    4f8e:	64 c0       	rjmp	.+200    	; 0x5058 <HLCD_sendCmd+0x284>
	else if (__tmp > 65535)
    4f90:	fe 01       	movw	r30, r28
    4f92:	eb 57       	subi	r30, 0x7B	; 123
    4f94:	ff 4f       	sbci	r31, 0xFF	; 255
    4f96:	60 81       	ld	r22, Z
    4f98:	71 81       	ldd	r23, Z+1	; 0x01
    4f9a:	82 81       	ldd	r24, Z+2	; 0x02
    4f9c:	93 81       	ldd	r25, Z+3	; 0x03
    4f9e:	20 e0       	ldi	r18, 0x00	; 0
    4fa0:	3f ef       	ldi	r19, 0xFF	; 255
    4fa2:	4f e7       	ldi	r20, 0x7F	; 127
    4fa4:	57 e4       	ldi	r21, 0x47	; 71
    4fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4faa:	18 16       	cp	r1, r24
    4fac:	0c f0       	brlt	.+2      	; 0x4fb0 <HLCD_sendCmd+0x1dc>
    4fae:	43 c0       	rjmp	.+134    	; 0x5036 <HLCD_sendCmd+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb0:	fe 01       	movw	r30, r28
    4fb2:	e7 57       	subi	r30, 0x77	; 119
    4fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb6:	60 81       	ld	r22, Z
    4fb8:	71 81       	ldd	r23, Z+1	; 0x01
    4fba:	82 81       	ldd	r24, Z+2	; 0x02
    4fbc:	93 81       	ldd	r25, Z+3	; 0x03
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e2       	ldi	r20, 0x20	; 32
    4fc4:	51 e4       	ldi	r21, 0x41	; 65
    4fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	8e 01       	movw	r16, r28
    4fd0:	0d 57       	subi	r16, 0x7D	; 125
    4fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd4:	bc 01       	movw	r22, r24
    4fd6:	cd 01       	movw	r24, r26
    4fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	f8 01       	movw	r30, r16
    4fe2:	91 83       	std	Z+1, r25	; 0x01
    4fe4:	80 83       	st	Z, r24
    4fe6:	1f c0       	rjmp	.+62     	; 0x5026 <HLCD_sendCmd+0x252>
    4fe8:	fe 01       	movw	r30, r28
    4fea:	ef 57       	subi	r30, 0x7F	; 127
    4fec:	ff 4f       	sbci	r31, 0xFF	; 255
    4fee:	88 ec       	ldi	r24, 0xC8	; 200
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	91 83       	std	Z+1, r25	; 0x01
    4ff4:	80 83       	st	Z, r24
    4ff6:	fe 01       	movw	r30, r28
    4ff8:	ef 57       	subi	r30, 0x7F	; 127
    4ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    4ffc:	80 81       	ld	r24, Z
    4ffe:	91 81       	ldd	r25, Z+1	; 0x01
    5000:	01 97       	sbiw	r24, 0x01	; 1
    5002:	f1 f7       	brne	.-4      	; 0x5000 <HLCD_sendCmd+0x22c>
    5004:	fe 01       	movw	r30, r28
    5006:	ef 57       	subi	r30, 0x7F	; 127
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	91 83       	std	Z+1, r25	; 0x01
    500c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    500e:	de 01       	movw	r26, r28
    5010:	ad 57       	subi	r26, 0x7D	; 125
    5012:	bf 4f       	sbci	r27, 0xFF	; 255
    5014:	fe 01       	movw	r30, r28
    5016:	ed 57       	subi	r30, 0x7D	; 125
    5018:	ff 4f       	sbci	r31, 0xFF	; 255
    501a:	80 81       	ld	r24, Z
    501c:	91 81       	ldd	r25, Z+1	; 0x01
    501e:	01 97       	sbiw	r24, 0x01	; 1
    5020:	11 96       	adiw	r26, 0x01	; 1
    5022:	9c 93       	st	X, r25
    5024:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5026:	fe 01       	movw	r30, r28
    5028:	ed 57       	subi	r30, 0x7D	; 125
    502a:	ff 4f       	sbci	r31, 0xFF	; 255
    502c:	80 81       	ld	r24, Z
    502e:	91 81       	ldd	r25, Z+1	; 0x01
    5030:	00 97       	sbiw	r24, 0x00	; 0
    5032:	d1 f6       	brne	.-76     	; 0x4fe8 <HLCD_sendCmd+0x214>
    5034:	28 c0       	rjmp	.+80     	; 0x5086 <HLCD_sendCmd+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5036:	8e 01       	movw	r16, r28
    5038:	0d 57       	subi	r16, 0x7D	; 125
    503a:	1f 4f       	sbci	r17, 0xFF	; 255
    503c:	fe 01       	movw	r30, r28
    503e:	eb 57       	subi	r30, 0x7B	; 123
    5040:	ff 4f       	sbci	r31, 0xFF	; 255
    5042:	60 81       	ld	r22, Z
    5044:	71 81       	ldd	r23, Z+1	; 0x01
    5046:	82 81       	ldd	r24, Z+2	; 0x02
    5048:	93 81       	ldd	r25, Z+3	; 0x03
    504a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    504e:	dc 01       	movw	r26, r24
    5050:	cb 01       	movw	r24, r22
    5052:	f8 01       	movw	r30, r16
    5054:	91 83       	std	Z+1, r25	; 0x01
    5056:	80 83       	st	Z, r24
    5058:	de 01       	movw	r26, r28
    505a:	a1 58       	subi	r26, 0x81	; 129
    505c:	bf 4f       	sbci	r27, 0xFF	; 255
    505e:	fe 01       	movw	r30, r28
    5060:	ed 57       	subi	r30, 0x7D	; 125
    5062:	ff 4f       	sbci	r31, 0xFF	; 255
    5064:	80 81       	ld	r24, Z
    5066:	91 81       	ldd	r25, Z+1	; 0x01
    5068:	11 96       	adiw	r26, 0x01	; 1
    506a:	9c 93       	st	X, r25
    506c:	8e 93       	st	-X, r24
    506e:	fe 01       	movw	r30, r28
    5070:	e1 58       	subi	r30, 0x81	; 129
    5072:	ff 4f       	sbci	r31, 0xFF	; 255
    5074:	80 81       	ld	r24, Z
    5076:	91 81       	ldd	r25, Z+1	; 0x01
    5078:	01 97       	sbiw	r24, 0x01	; 1
    507a:	f1 f7       	brne	.-4      	; 0x5078 <HLCD_sendCmd+0x2a4>
    507c:	fe 01       	movw	r30, r28
    507e:	e1 58       	subi	r30, 0x81	; 129
    5080:	ff 4f       	sbci	r31, 0xFF	; 255
    5082:	91 83       	std	Z+1, r25	; 0x01
    5084:	80 83       	st	Z, r24

		_delay_ms(30);


		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5086:	fe 01       	movw	r30, r28
    5088:	e5 56       	subi	r30, 0x65	; 101
    508a:	ff 4f       	sbci	r31, 0xFF	; 255
    508c:	01 90       	ld	r0, Z+
    508e:	f0 81       	ld	r31, Z
    5090:	e0 2d       	mov	r30, r0
    5092:	80 81       	ld	r24, Z
    5094:	88 23       	and	r24, r24
    5096:	09 f0       	breq	.+2      	; 0x509a <HLCD_sendCmd+0x2c6>
    5098:	3d c4       	rjmp	.+2170   	; 0x5914 <HLCD_sendCmd+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    509a:	fe 01       	movw	r30, r28
    509c:	e3 57       	subi	r30, 0x73	; 115
    509e:	ff 4f       	sbci	r31, 0xFF	; 255
    50a0:	80 81       	ld	r24, Z
    50a2:	88 23       	and	r24, r24
    50a4:	59 f4       	brne	.+22     	; 0x50bc <HLCD_sendCmd+0x2e8>
    50a6:	ce 01       	movw	r24, r28
    50a8:	89 56       	subi	r24, 0x69	; 105
    50aa:	9f 4f       	sbci	r25, 0xFF	; 255
    50ac:	61 e0       	ldi	r22, 0x01	; 1
    50ae:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    50b2:	fe 01       	movw	r30, r28
    50b4:	e3 57       	subi	r30, 0x73	; 115
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	80 83       	st	Z, r24
    50ba:	05 c0       	rjmp	.+10     	; 0x50c6 <HLCD_sendCmd+0x2f2>
			else lcdRet = HLCD_NOK;
    50bc:	fe 01       	movw	r30, r28
    50be:	e2 57       	subi	r30, 0x72	; 114
    50c0:	ff 4f       	sbci	r31, 0xFF	; 255
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	80 83       	st	Z, r24
    50c6:	fe 01       	movw	r30, r28
    50c8:	e5 58       	subi	r30, 0x85	; 133
    50ca:	ff 4f       	sbci	r31, 0xFF	; 255
    50cc:	80 e0       	ldi	r24, 0x00	; 0
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	a8 e4       	ldi	r26, 0x48	; 72
    50d2:	b2 e4       	ldi	r27, 0x42	; 66
    50d4:	80 83       	st	Z, r24
    50d6:	91 83       	std	Z+1, r25	; 0x01
    50d8:	a2 83       	std	Z+2, r26	; 0x02
    50da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50dc:	8e 01       	movw	r16, r28
    50de:	09 58       	subi	r16, 0x89	; 137
    50e0:	1f 4f       	sbci	r17, 0xFF	; 255
    50e2:	fe 01       	movw	r30, r28
    50e4:	e5 58       	subi	r30, 0x85	; 133
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	60 81       	ld	r22, Z
    50ea:	71 81       	ldd	r23, Z+1	; 0x01
    50ec:	82 81       	ldd	r24, Z+2	; 0x02
    50ee:	93 81       	ldd	r25, Z+3	; 0x03
    50f0:	20 e0       	ldi	r18, 0x00	; 0
    50f2:	30 e0       	ldi	r19, 0x00	; 0
    50f4:	4a ef       	ldi	r20, 0xFA	; 250
    50f6:	54 e4       	ldi	r21, 0x44	; 68
    50f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50fc:	dc 01       	movw	r26, r24
    50fe:	cb 01       	movw	r24, r22
    5100:	f8 01       	movw	r30, r16
    5102:	80 83       	st	Z, r24
    5104:	91 83       	std	Z+1, r25	; 0x01
    5106:	a2 83       	std	Z+2, r26	; 0x02
    5108:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    510a:	fe 01       	movw	r30, r28
    510c:	e9 58       	subi	r30, 0x89	; 137
    510e:	ff 4f       	sbci	r31, 0xFF	; 255
    5110:	60 81       	ld	r22, Z
    5112:	71 81       	ldd	r23, Z+1	; 0x01
    5114:	82 81       	ldd	r24, Z+2	; 0x02
    5116:	93 81       	ldd	r25, Z+3	; 0x03
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	40 e8       	ldi	r20, 0x80	; 128
    511e:	5f e3       	ldi	r21, 0x3F	; 63
    5120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5124:	88 23       	and	r24, r24
    5126:	44 f4       	brge	.+16     	; 0x5138 <HLCD_sendCmd+0x364>
		__ticks = 1;
    5128:	fe 01       	movw	r30, r28
    512a:	eb 58       	subi	r30, 0x8B	; 139
    512c:	ff 4f       	sbci	r31, 0xFF	; 255
    512e:	81 e0       	ldi	r24, 0x01	; 1
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	91 83       	std	Z+1, r25	; 0x01
    5134:	80 83       	st	Z, r24
    5136:	64 c0       	rjmp	.+200    	; 0x5200 <HLCD_sendCmd+0x42c>
	else if (__tmp > 65535)
    5138:	fe 01       	movw	r30, r28
    513a:	e9 58       	subi	r30, 0x89	; 137
    513c:	ff 4f       	sbci	r31, 0xFF	; 255
    513e:	60 81       	ld	r22, Z
    5140:	71 81       	ldd	r23, Z+1	; 0x01
    5142:	82 81       	ldd	r24, Z+2	; 0x02
    5144:	93 81       	ldd	r25, Z+3	; 0x03
    5146:	20 e0       	ldi	r18, 0x00	; 0
    5148:	3f ef       	ldi	r19, 0xFF	; 255
    514a:	4f e7       	ldi	r20, 0x7F	; 127
    514c:	57 e4       	ldi	r21, 0x47	; 71
    514e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5152:	18 16       	cp	r1, r24
    5154:	0c f0       	brlt	.+2      	; 0x5158 <HLCD_sendCmd+0x384>
    5156:	43 c0       	rjmp	.+134    	; 0x51de <HLCD_sendCmd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5158:	fe 01       	movw	r30, r28
    515a:	e5 58       	subi	r30, 0x85	; 133
    515c:	ff 4f       	sbci	r31, 0xFF	; 255
    515e:	60 81       	ld	r22, Z
    5160:	71 81       	ldd	r23, Z+1	; 0x01
    5162:	82 81       	ldd	r24, Z+2	; 0x02
    5164:	93 81       	ldd	r25, Z+3	; 0x03
    5166:	20 e0       	ldi	r18, 0x00	; 0
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	40 e2       	ldi	r20, 0x20	; 32
    516c:	51 e4       	ldi	r21, 0x41	; 65
    516e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5172:	dc 01       	movw	r26, r24
    5174:	cb 01       	movw	r24, r22
    5176:	8e 01       	movw	r16, r28
    5178:	0b 58       	subi	r16, 0x8B	; 139
    517a:	1f 4f       	sbci	r17, 0xFF	; 255
    517c:	bc 01       	movw	r22, r24
    517e:	cd 01       	movw	r24, r26
    5180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5184:	dc 01       	movw	r26, r24
    5186:	cb 01       	movw	r24, r22
    5188:	f8 01       	movw	r30, r16
    518a:	91 83       	std	Z+1, r25	; 0x01
    518c:	80 83       	st	Z, r24
    518e:	1f c0       	rjmp	.+62     	; 0x51ce <HLCD_sendCmd+0x3fa>
    5190:	fe 01       	movw	r30, r28
    5192:	ed 58       	subi	r30, 0x8D	; 141
    5194:	ff 4f       	sbci	r31, 0xFF	; 255
    5196:	88 ec       	ldi	r24, 0xC8	; 200
    5198:	90 e0       	ldi	r25, 0x00	; 0
    519a:	91 83       	std	Z+1, r25	; 0x01
    519c:	80 83       	st	Z, r24
    519e:	fe 01       	movw	r30, r28
    51a0:	ed 58       	subi	r30, 0x8D	; 141
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	80 81       	ld	r24, Z
    51a6:	91 81       	ldd	r25, Z+1	; 0x01
    51a8:	01 97       	sbiw	r24, 0x01	; 1
    51aa:	f1 f7       	brne	.-4      	; 0x51a8 <HLCD_sendCmd+0x3d4>
    51ac:	fe 01       	movw	r30, r28
    51ae:	ed 58       	subi	r30, 0x8D	; 141
    51b0:	ff 4f       	sbci	r31, 0xFF	; 255
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51b6:	de 01       	movw	r26, r28
    51b8:	ab 58       	subi	r26, 0x8B	; 139
    51ba:	bf 4f       	sbci	r27, 0xFF	; 255
    51bc:	fe 01       	movw	r30, r28
    51be:	eb 58       	subi	r30, 0x8B	; 139
    51c0:	ff 4f       	sbci	r31, 0xFF	; 255
    51c2:	80 81       	ld	r24, Z
    51c4:	91 81       	ldd	r25, Z+1	; 0x01
    51c6:	01 97       	sbiw	r24, 0x01	; 1
    51c8:	11 96       	adiw	r26, 0x01	; 1
    51ca:	9c 93       	st	X, r25
    51cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ce:	fe 01       	movw	r30, r28
    51d0:	eb 58       	subi	r30, 0x8B	; 139
    51d2:	ff 4f       	sbci	r31, 0xFF	; 255
    51d4:	80 81       	ld	r24, Z
    51d6:	91 81       	ldd	r25, Z+1	; 0x01
    51d8:	00 97       	sbiw	r24, 0x00	; 0
    51da:	d1 f6       	brne	.-76     	; 0x5190 <HLCD_sendCmd+0x3bc>
    51dc:	27 c0       	rjmp	.+78     	; 0x522c <HLCD_sendCmd+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51de:	8e 01       	movw	r16, r28
    51e0:	0b 58       	subi	r16, 0x8B	; 139
    51e2:	1f 4f       	sbci	r17, 0xFF	; 255
    51e4:	fe 01       	movw	r30, r28
    51e6:	e9 58       	subi	r30, 0x89	; 137
    51e8:	ff 4f       	sbci	r31, 0xFF	; 255
    51ea:	60 81       	ld	r22, Z
    51ec:	71 81       	ldd	r23, Z+1	; 0x01
    51ee:	82 81       	ldd	r24, Z+2	; 0x02
    51f0:	93 81       	ldd	r25, Z+3	; 0x03
    51f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f6:	dc 01       	movw	r26, r24
    51f8:	cb 01       	movw	r24, r22
    51fa:	f8 01       	movw	r30, r16
    51fc:	91 83       	std	Z+1, r25	; 0x01
    51fe:	80 83       	st	Z, r24
    5200:	de 01       	movw	r26, r28
    5202:	af 58       	subi	r26, 0x8F	; 143
    5204:	bf 4f       	sbci	r27, 0xFF	; 255
    5206:	fe 01       	movw	r30, r28
    5208:	eb 58       	subi	r30, 0x8B	; 139
    520a:	ff 4f       	sbci	r31, 0xFF	; 255
    520c:	80 81       	ld	r24, Z
    520e:	91 81       	ldd	r25, Z+1	; 0x01
    5210:	8d 93       	st	X+, r24
    5212:	9c 93       	st	X, r25
    5214:	fe 01       	movw	r30, r28
    5216:	ef 58       	subi	r30, 0x8F	; 143
    5218:	ff 4f       	sbci	r31, 0xFF	; 255
    521a:	80 81       	ld	r24, Z
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	01 97       	sbiw	r24, 0x01	; 1
    5220:	f1 f7       	brne	.-4      	; 0x521e <HLCD_sendCmd+0x44a>
    5222:	fe 01       	movw	r30, r28
    5224:	ef 58       	subi	r30, 0x8F	; 143
    5226:	ff 4f       	sbci	r31, 0xFF	; 255
    5228:	91 83       	std	Z+1, r25	; 0x01
    522a:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Command;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Command & 0xF0);
			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command>>4);
    522c:	fe 01       	movw	r30, r28
    522e:	e5 56       	subi	r30, 0x65	; 101
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	01 90       	ld	r0, Z+
    5234:	f0 81       	ld	r31, Z
    5236:	e0 2d       	mov	r30, r0
    5238:	22 81       	ldd	r18, Z+2	; 0x02
    523a:	fe 01       	movw	r30, r28
    523c:	e3 56       	subi	r30, 0x63	; 99
    523e:	ff 4f       	sbci	r31, 0xFF	; 255
    5240:	80 81       	ld	r24, Z
    5242:	98 2f       	mov	r25, r24
    5244:	92 95       	swap	r25
    5246:	9f 70       	andi	r25, 0x0F	; 15
    5248:	82 2f       	mov	r24, r18
    524a:	69 2f       	mov	r22, r25
    524c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <GPIO_set4msbValue>
    5250:	fe 01       	movw	r30, r28
    5252:	e3 59       	subi	r30, 0x93	; 147
    5254:	ff 4f       	sbci	r31, 0xFF	; 255
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	90 e0       	ldi	r25, 0x00	; 0
    525a:	a8 e4       	ldi	r26, 0x48	; 72
    525c:	b2 e4       	ldi	r27, 0x42	; 66
    525e:	80 83       	st	Z, r24
    5260:	91 83       	std	Z+1, r25	; 0x01
    5262:	a2 83       	std	Z+2, r26	; 0x02
    5264:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5266:	8e 01       	movw	r16, r28
    5268:	07 59       	subi	r16, 0x97	; 151
    526a:	1f 4f       	sbci	r17, 0xFF	; 255
    526c:	fe 01       	movw	r30, r28
    526e:	e3 59       	subi	r30, 0x93	; 147
    5270:	ff 4f       	sbci	r31, 0xFF	; 255
    5272:	60 81       	ld	r22, Z
    5274:	71 81       	ldd	r23, Z+1	; 0x01
    5276:	82 81       	ldd	r24, Z+2	; 0x02
    5278:	93 81       	ldd	r25, Z+3	; 0x03
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	30 e0       	ldi	r19, 0x00	; 0
    527e:	4a ef       	ldi	r20, 0xFA	; 250
    5280:	54 e4       	ldi	r21, 0x44	; 68
    5282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	f8 01       	movw	r30, r16
    528c:	80 83       	st	Z, r24
    528e:	91 83       	std	Z+1, r25	; 0x01
    5290:	a2 83       	std	Z+2, r26	; 0x02
    5292:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5294:	fe 01       	movw	r30, r28
    5296:	e7 59       	subi	r30, 0x97	; 151
    5298:	ff 4f       	sbci	r31, 0xFF	; 255
    529a:	60 81       	ld	r22, Z
    529c:	71 81       	ldd	r23, Z+1	; 0x01
    529e:	82 81       	ldd	r24, Z+2	; 0x02
    52a0:	93 81       	ldd	r25, Z+3	; 0x03
    52a2:	20 e0       	ldi	r18, 0x00	; 0
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	40 e8       	ldi	r20, 0x80	; 128
    52a8:	5f e3       	ldi	r21, 0x3F	; 63
    52aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52ae:	88 23       	and	r24, r24
    52b0:	44 f4       	brge	.+16     	; 0x52c2 <HLCD_sendCmd+0x4ee>
		__ticks = 1;
    52b2:	fe 01       	movw	r30, r28
    52b4:	e9 59       	subi	r30, 0x99	; 153
    52b6:	ff 4f       	sbci	r31, 0xFF	; 255
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	91 83       	std	Z+1, r25	; 0x01
    52be:	80 83       	st	Z, r24
    52c0:	64 c0       	rjmp	.+200    	; 0x538a <HLCD_sendCmd+0x5b6>
	else if (__tmp > 65535)
    52c2:	fe 01       	movw	r30, r28
    52c4:	e7 59       	subi	r30, 0x97	; 151
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	60 81       	ld	r22, Z
    52ca:	71 81       	ldd	r23, Z+1	; 0x01
    52cc:	82 81       	ldd	r24, Z+2	; 0x02
    52ce:	93 81       	ldd	r25, Z+3	; 0x03
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	3f ef       	ldi	r19, 0xFF	; 255
    52d4:	4f e7       	ldi	r20, 0x7F	; 127
    52d6:	57 e4       	ldi	r21, 0x47	; 71
    52d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52dc:	18 16       	cp	r1, r24
    52de:	0c f0       	brlt	.+2      	; 0x52e2 <HLCD_sendCmd+0x50e>
    52e0:	43 c0       	rjmp	.+134    	; 0x5368 <HLCD_sendCmd+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52e2:	fe 01       	movw	r30, r28
    52e4:	e3 59       	subi	r30, 0x93	; 147
    52e6:	ff 4f       	sbci	r31, 0xFF	; 255
    52e8:	60 81       	ld	r22, Z
    52ea:	71 81       	ldd	r23, Z+1	; 0x01
    52ec:	82 81       	ldd	r24, Z+2	; 0x02
    52ee:	93 81       	ldd	r25, Z+3	; 0x03
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	40 e2       	ldi	r20, 0x20	; 32
    52f6:	51 e4       	ldi	r21, 0x41	; 65
    52f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	8e 01       	movw	r16, r28
    5302:	09 59       	subi	r16, 0x99	; 153
    5304:	1f 4f       	sbci	r17, 0xFF	; 255
    5306:	bc 01       	movw	r22, r24
    5308:	cd 01       	movw	r24, r26
    530a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    530e:	dc 01       	movw	r26, r24
    5310:	cb 01       	movw	r24, r22
    5312:	f8 01       	movw	r30, r16
    5314:	91 83       	std	Z+1, r25	; 0x01
    5316:	80 83       	st	Z, r24
    5318:	1f c0       	rjmp	.+62     	; 0x5358 <HLCD_sendCmd+0x584>
    531a:	fe 01       	movw	r30, r28
    531c:	eb 59       	subi	r30, 0x9B	; 155
    531e:	ff 4f       	sbci	r31, 0xFF	; 255
    5320:	88 ec       	ldi	r24, 0xC8	; 200
    5322:	90 e0       	ldi	r25, 0x00	; 0
    5324:	91 83       	std	Z+1, r25	; 0x01
    5326:	80 83       	st	Z, r24
    5328:	fe 01       	movw	r30, r28
    532a:	eb 59       	subi	r30, 0x9B	; 155
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	80 81       	ld	r24, Z
    5330:	91 81       	ldd	r25, Z+1	; 0x01
    5332:	01 97       	sbiw	r24, 0x01	; 1
    5334:	f1 f7       	brne	.-4      	; 0x5332 <HLCD_sendCmd+0x55e>
    5336:	fe 01       	movw	r30, r28
    5338:	eb 59       	subi	r30, 0x9B	; 155
    533a:	ff 4f       	sbci	r31, 0xFF	; 255
    533c:	91 83       	std	Z+1, r25	; 0x01
    533e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5340:	de 01       	movw	r26, r28
    5342:	a9 59       	subi	r26, 0x99	; 153
    5344:	bf 4f       	sbci	r27, 0xFF	; 255
    5346:	fe 01       	movw	r30, r28
    5348:	e9 59       	subi	r30, 0x99	; 153
    534a:	ff 4f       	sbci	r31, 0xFF	; 255
    534c:	80 81       	ld	r24, Z
    534e:	91 81       	ldd	r25, Z+1	; 0x01
    5350:	01 97       	sbiw	r24, 0x01	; 1
    5352:	11 96       	adiw	r26, 0x01	; 1
    5354:	9c 93       	st	X, r25
    5356:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5358:	fe 01       	movw	r30, r28
    535a:	e9 59       	subi	r30, 0x99	; 153
    535c:	ff 4f       	sbci	r31, 0xFF	; 255
    535e:	80 81       	ld	r24, Z
    5360:	91 81       	ldd	r25, Z+1	; 0x01
    5362:	00 97       	sbiw	r24, 0x00	; 0
    5364:	d1 f6       	brne	.-76     	; 0x531a <HLCD_sendCmd+0x546>
    5366:	28 c0       	rjmp	.+80     	; 0x53b8 <HLCD_sendCmd+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5368:	8e 01       	movw	r16, r28
    536a:	09 59       	subi	r16, 0x99	; 153
    536c:	1f 4f       	sbci	r17, 0xFF	; 255
    536e:	fe 01       	movw	r30, r28
    5370:	e7 59       	subi	r30, 0x97	; 151
    5372:	ff 4f       	sbci	r31, 0xFF	; 255
    5374:	60 81       	ld	r22, Z
    5376:	71 81       	ldd	r23, Z+1	; 0x01
    5378:	82 81       	ldd	r24, Z+2	; 0x02
    537a:	93 81       	ldd	r25, Z+3	; 0x03
    537c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5380:	dc 01       	movw	r26, r24
    5382:	cb 01       	movw	r24, r22
    5384:	f8 01       	movw	r30, r16
    5386:	91 83       	std	Z+1, r25	; 0x01
    5388:	80 83       	st	Z, r24
    538a:	de 01       	movw	r26, r28
    538c:	ad 59       	subi	r26, 0x9D	; 157
    538e:	bf 4f       	sbci	r27, 0xFF	; 255
    5390:	fe 01       	movw	r30, r28
    5392:	e9 59       	subi	r30, 0x99	; 153
    5394:	ff 4f       	sbci	r31, 0xFF	; 255
    5396:	80 81       	ld	r24, Z
    5398:	91 81       	ldd	r25, Z+1	; 0x01
    539a:	11 96       	adiw	r26, 0x01	; 1
    539c:	9c 93       	st	X, r25
    539e:	8e 93       	st	-X, r24
    53a0:	fe 01       	movw	r30, r28
    53a2:	ed 59       	subi	r30, 0x9D	; 157
    53a4:	ff 4f       	sbci	r31, 0xFF	; 255
    53a6:	80 81       	ld	r24, Z
    53a8:	91 81       	ldd	r25, Z+1	; 0x01
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	f1 f7       	brne	.-4      	; 0x53aa <HLCD_sendCmd+0x5d6>
    53ae:	fe 01       	movw	r30, r28
    53b0:	ed 59       	subi	r30, 0x9D	; 157
    53b2:	ff 4f       	sbci	r31, 0xFF	; 255
    53b4:	91 83       	std	Z+1, r25	; 0x01
    53b6:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    53b8:	fe 01       	movw	r30, r28
    53ba:	e3 57       	subi	r30, 0x73	; 115
    53bc:	ff 4f       	sbci	r31, 0xFF	; 255
    53be:	80 81       	ld	r24, Z
    53c0:	88 23       	and	r24, r24
    53c2:	59 f4       	brne	.+22     	; 0x53da <HLCD_sendCmd+0x606>
    53c4:	ce 01       	movw	r24, r28
    53c6:	89 56       	subi	r24, 0x69	; 105
    53c8:	9f 4f       	sbci	r25, 0xFF	; 255
    53ca:	60 e0       	ldi	r22, 0x00	; 0
    53cc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    53d0:	fe 01       	movw	r30, r28
    53d2:	e3 57       	subi	r30, 0x73	; 115
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	80 83       	st	Z, r24
    53d8:	05 c0       	rjmp	.+10     	; 0x53e4 <HLCD_sendCmd+0x610>
			else lcdRet = HLCD_NOK;
    53da:	fe 01       	movw	r30, r28
    53dc:	e2 57       	subi	r30, 0x72	; 114
    53de:	ff 4f       	sbci	r31, 0xFF	; 255
    53e0:	81 e0       	ldi	r24, 0x01	; 1
    53e2:	80 83       	st	Z, r24
    53e4:	fe 01       	movw	r30, r28
    53e6:	e1 5a       	subi	r30, 0xA1	; 161
    53e8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	90 e0       	ldi	r25, 0x00	; 0
    53ee:	a8 e4       	ldi	r26, 0x48	; 72
    53f0:	b2 e4       	ldi	r27, 0x42	; 66
    53f2:	80 83       	st	Z, r24
    53f4:	91 83       	std	Z+1, r25	; 0x01
    53f6:	a2 83       	std	Z+2, r26	; 0x02
    53f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53fa:	8e 01       	movw	r16, r28
    53fc:	05 5a       	subi	r16, 0xA5	; 165
    53fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5400:	fe 01       	movw	r30, r28
    5402:	e1 5a       	subi	r30, 0xA1	; 161
    5404:	ff 4f       	sbci	r31, 0xFF	; 255
    5406:	60 81       	ld	r22, Z
    5408:	71 81       	ldd	r23, Z+1	; 0x01
    540a:	82 81       	ldd	r24, Z+2	; 0x02
    540c:	93 81       	ldd	r25, Z+3	; 0x03
    540e:	20 e0       	ldi	r18, 0x00	; 0
    5410:	30 e0       	ldi	r19, 0x00	; 0
    5412:	4a ef       	ldi	r20, 0xFA	; 250
    5414:	54 e4       	ldi	r21, 0x44	; 68
    5416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    541a:	dc 01       	movw	r26, r24
    541c:	cb 01       	movw	r24, r22
    541e:	f8 01       	movw	r30, r16
    5420:	80 83       	st	Z, r24
    5422:	91 83       	std	Z+1, r25	; 0x01
    5424:	a2 83       	std	Z+2, r26	; 0x02
    5426:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5428:	fe 01       	movw	r30, r28
    542a:	e5 5a       	subi	r30, 0xA5	; 165
    542c:	ff 4f       	sbci	r31, 0xFF	; 255
    542e:	60 81       	ld	r22, Z
    5430:	71 81       	ldd	r23, Z+1	; 0x01
    5432:	82 81       	ldd	r24, Z+2	; 0x02
    5434:	93 81       	ldd	r25, Z+3	; 0x03
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	30 e0       	ldi	r19, 0x00	; 0
    543a:	40 e8       	ldi	r20, 0x80	; 128
    543c:	5f e3       	ldi	r21, 0x3F	; 63
    543e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5442:	88 23       	and	r24, r24
    5444:	44 f4       	brge	.+16     	; 0x5456 <HLCD_sendCmd+0x682>
		__ticks = 1;
    5446:	fe 01       	movw	r30, r28
    5448:	e7 5a       	subi	r30, 0xA7	; 167
    544a:	ff 4f       	sbci	r31, 0xFF	; 255
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	91 83       	std	Z+1, r25	; 0x01
    5452:	80 83       	st	Z, r24
    5454:	64 c0       	rjmp	.+200    	; 0x551e <HLCD_sendCmd+0x74a>
	else if (__tmp > 65535)
    5456:	fe 01       	movw	r30, r28
    5458:	e5 5a       	subi	r30, 0xA5	; 165
    545a:	ff 4f       	sbci	r31, 0xFF	; 255
    545c:	60 81       	ld	r22, Z
    545e:	71 81       	ldd	r23, Z+1	; 0x01
    5460:	82 81       	ldd	r24, Z+2	; 0x02
    5462:	93 81       	ldd	r25, Z+3	; 0x03
    5464:	20 e0       	ldi	r18, 0x00	; 0
    5466:	3f ef       	ldi	r19, 0xFF	; 255
    5468:	4f e7       	ldi	r20, 0x7F	; 127
    546a:	57 e4       	ldi	r21, 0x47	; 71
    546c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5470:	18 16       	cp	r1, r24
    5472:	0c f0       	brlt	.+2      	; 0x5476 <HLCD_sendCmd+0x6a2>
    5474:	43 c0       	rjmp	.+134    	; 0x54fc <HLCD_sendCmd+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5476:	fe 01       	movw	r30, r28
    5478:	e1 5a       	subi	r30, 0xA1	; 161
    547a:	ff 4f       	sbci	r31, 0xFF	; 255
    547c:	60 81       	ld	r22, Z
    547e:	71 81       	ldd	r23, Z+1	; 0x01
    5480:	82 81       	ldd	r24, Z+2	; 0x02
    5482:	93 81       	ldd	r25, Z+3	; 0x03
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	40 e2       	ldi	r20, 0x20	; 32
    548a:	51 e4       	ldi	r21, 0x41	; 65
    548c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5490:	dc 01       	movw	r26, r24
    5492:	cb 01       	movw	r24, r22
    5494:	8e 01       	movw	r16, r28
    5496:	07 5a       	subi	r16, 0xA7	; 167
    5498:	1f 4f       	sbci	r17, 0xFF	; 255
    549a:	bc 01       	movw	r22, r24
    549c:	cd 01       	movw	r24, r26
    549e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	f8 01       	movw	r30, r16
    54a8:	91 83       	std	Z+1, r25	; 0x01
    54aa:	80 83       	st	Z, r24
    54ac:	1f c0       	rjmp	.+62     	; 0x54ec <HLCD_sendCmd+0x718>
    54ae:	fe 01       	movw	r30, r28
    54b0:	e9 5a       	subi	r30, 0xA9	; 169
    54b2:	ff 4f       	sbci	r31, 0xFF	; 255
    54b4:	88 ec       	ldi	r24, 0xC8	; 200
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	91 83       	std	Z+1, r25	; 0x01
    54ba:	80 83       	st	Z, r24
    54bc:	fe 01       	movw	r30, r28
    54be:	e9 5a       	subi	r30, 0xA9	; 169
    54c0:	ff 4f       	sbci	r31, 0xFF	; 255
    54c2:	80 81       	ld	r24, Z
    54c4:	91 81       	ldd	r25, Z+1	; 0x01
    54c6:	01 97       	sbiw	r24, 0x01	; 1
    54c8:	f1 f7       	brne	.-4      	; 0x54c6 <HLCD_sendCmd+0x6f2>
    54ca:	fe 01       	movw	r30, r28
    54cc:	e9 5a       	subi	r30, 0xA9	; 169
    54ce:	ff 4f       	sbci	r31, 0xFF	; 255
    54d0:	91 83       	std	Z+1, r25	; 0x01
    54d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54d4:	de 01       	movw	r26, r28
    54d6:	a7 5a       	subi	r26, 0xA7	; 167
    54d8:	bf 4f       	sbci	r27, 0xFF	; 255
    54da:	fe 01       	movw	r30, r28
    54dc:	e7 5a       	subi	r30, 0xA7	; 167
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	80 81       	ld	r24, Z
    54e2:	91 81       	ldd	r25, Z+1	; 0x01
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	11 96       	adiw	r26, 0x01	; 1
    54e8:	9c 93       	st	X, r25
    54ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54ec:	fe 01       	movw	r30, r28
    54ee:	e7 5a       	subi	r30, 0xA7	; 167
    54f0:	ff 4f       	sbci	r31, 0xFF	; 255
    54f2:	80 81       	ld	r24, Z
    54f4:	91 81       	ldd	r25, Z+1	; 0x01
    54f6:	00 97       	sbiw	r24, 0x00	; 0
    54f8:	d1 f6       	brne	.-76     	; 0x54ae <HLCD_sendCmd+0x6da>
    54fa:	28 c0       	rjmp	.+80     	; 0x554c <HLCD_sendCmd+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54fc:	8e 01       	movw	r16, r28
    54fe:	07 5a       	subi	r16, 0xA7	; 167
    5500:	1f 4f       	sbci	r17, 0xFF	; 255
    5502:	fe 01       	movw	r30, r28
    5504:	e5 5a       	subi	r30, 0xA5	; 165
    5506:	ff 4f       	sbci	r31, 0xFF	; 255
    5508:	60 81       	ld	r22, Z
    550a:	71 81       	ldd	r23, Z+1	; 0x01
    550c:	82 81       	ldd	r24, Z+2	; 0x02
    550e:	93 81       	ldd	r25, Z+3	; 0x03
    5510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5514:	dc 01       	movw	r26, r24
    5516:	cb 01       	movw	r24, r22
    5518:	f8 01       	movw	r30, r16
    551a:	91 83       	std	Z+1, r25	; 0x01
    551c:	80 83       	st	Z, r24
    551e:	de 01       	movw	r26, r28
    5520:	ab 5a       	subi	r26, 0xAB	; 171
    5522:	bf 4f       	sbci	r27, 0xFF	; 255
    5524:	fe 01       	movw	r30, r28
    5526:	e7 5a       	subi	r30, 0xA7	; 167
    5528:	ff 4f       	sbci	r31, 0xFF	; 255
    552a:	80 81       	ld	r24, Z
    552c:	91 81       	ldd	r25, Z+1	; 0x01
    552e:	11 96       	adiw	r26, 0x01	; 1
    5530:	9c 93       	st	X, r25
    5532:	8e 93       	st	-X, r24
    5534:	fe 01       	movw	r30, r28
    5536:	eb 5a       	subi	r30, 0xAB	; 171
    5538:	ff 4f       	sbci	r31, 0xFF	; 255
    553a:	80 81       	ld	r24, Z
    553c:	91 81       	ldd	r25, Z+1	; 0x01
    553e:	01 97       	sbiw	r24, 0x01	; 1
    5540:	f1 f7       	brne	.-4      	; 0x553e <HLCD_sendCmd+0x76a>
    5542:	fe 01       	movw	r30, r28
    5544:	eb 5a       	subi	r30, 0xAB	; 171
    5546:	ff 4f       	sbci	r31, 0xFF	; 255
    5548:	91 83       	std	Z+1, r25	; 0x01
    554a:	80 83       	st	Z, r24

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    554c:	fe 01       	movw	r30, r28
    554e:	e3 57       	subi	r30, 0x73	; 115
    5550:	ff 4f       	sbci	r31, 0xFF	; 255
    5552:	80 81       	ld	r24, Z
    5554:	88 23       	and	r24, r24
    5556:	59 f4       	brne	.+22     	; 0x556e <HLCD_sendCmd+0x79a>
    5558:	ce 01       	movw	r24, r28
    555a:	89 56       	subi	r24, 0x69	; 105
    555c:	9f 4f       	sbci	r25, 0xFF	; 255
    555e:	61 e0       	ldi	r22, 0x01	; 1
    5560:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    5564:	fe 01       	movw	r30, r28
    5566:	e3 57       	subi	r30, 0x73	; 115
    5568:	ff 4f       	sbci	r31, 0xFF	; 255
    556a:	80 83       	st	Z, r24
    556c:	05 c0       	rjmp	.+10     	; 0x5578 <HLCD_sendCmd+0x7a4>
			else lcdRet = HLCD_NOK;
    556e:	fe 01       	movw	r30, r28
    5570:	e2 57       	subi	r30, 0x72	; 114
    5572:	ff 4f       	sbci	r31, 0xFF	; 255
    5574:	81 e0       	ldi	r24, 0x01	; 1
    5576:	80 83       	st	Z, r24
    5578:	fe 01       	movw	r30, r28
    557a:	ef 5a       	subi	r30, 0xAF	; 175
    557c:	ff 4f       	sbci	r31, 0xFF	; 255
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	a8 e4       	ldi	r26, 0x48	; 72
    5584:	b2 e4       	ldi	r27, 0x42	; 66
    5586:	80 83       	st	Z, r24
    5588:	91 83       	std	Z+1, r25	; 0x01
    558a:	a2 83       	std	Z+2, r26	; 0x02
    558c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    558e:	8e 01       	movw	r16, r28
    5590:	03 5b       	subi	r16, 0xB3	; 179
    5592:	1f 4f       	sbci	r17, 0xFF	; 255
    5594:	fe 01       	movw	r30, r28
    5596:	ef 5a       	subi	r30, 0xAF	; 175
    5598:	ff 4f       	sbci	r31, 0xFF	; 255
    559a:	60 81       	ld	r22, Z
    559c:	71 81       	ldd	r23, Z+1	; 0x01
    559e:	82 81       	ldd	r24, Z+2	; 0x02
    55a0:	93 81       	ldd	r25, Z+3	; 0x03
    55a2:	20 e0       	ldi	r18, 0x00	; 0
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	4a ef       	ldi	r20, 0xFA	; 250
    55a8:	54 e4       	ldi	r21, 0x44	; 68
    55aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ae:	dc 01       	movw	r26, r24
    55b0:	cb 01       	movw	r24, r22
    55b2:	f8 01       	movw	r30, r16
    55b4:	80 83       	st	Z, r24
    55b6:	91 83       	std	Z+1, r25	; 0x01
    55b8:	a2 83       	std	Z+2, r26	; 0x02
    55ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55bc:	fe 01       	movw	r30, r28
    55be:	e3 5b       	subi	r30, 0xB3	; 179
    55c0:	ff 4f       	sbci	r31, 0xFF	; 255
    55c2:	60 81       	ld	r22, Z
    55c4:	71 81       	ldd	r23, Z+1	; 0x01
    55c6:	82 81       	ldd	r24, Z+2	; 0x02
    55c8:	93 81       	ldd	r25, Z+3	; 0x03
    55ca:	20 e0       	ldi	r18, 0x00	; 0
    55cc:	30 e0       	ldi	r19, 0x00	; 0
    55ce:	40 e8       	ldi	r20, 0x80	; 128
    55d0:	5f e3       	ldi	r21, 0x3F	; 63
    55d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    55d6:	88 23       	and	r24, r24
    55d8:	44 f4       	brge	.+16     	; 0x55ea <HLCD_sendCmd+0x816>
		__ticks = 1;
    55da:	fe 01       	movw	r30, r28
    55dc:	e5 5b       	subi	r30, 0xB5	; 181
    55de:	ff 4f       	sbci	r31, 0xFF	; 255
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	91 83       	std	Z+1, r25	; 0x01
    55e6:	80 83       	st	Z, r24
    55e8:	64 c0       	rjmp	.+200    	; 0x56b2 <HLCD_sendCmd+0x8de>
	else if (__tmp > 65535)
    55ea:	fe 01       	movw	r30, r28
    55ec:	e3 5b       	subi	r30, 0xB3	; 179
    55ee:	ff 4f       	sbci	r31, 0xFF	; 255
    55f0:	60 81       	ld	r22, Z
    55f2:	71 81       	ldd	r23, Z+1	; 0x01
    55f4:	82 81       	ldd	r24, Z+2	; 0x02
    55f6:	93 81       	ldd	r25, Z+3	; 0x03
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	3f ef       	ldi	r19, 0xFF	; 255
    55fc:	4f e7       	ldi	r20, 0x7F	; 127
    55fe:	57 e4       	ldi	r21, 0x47	; 71
    5600:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5604:	18 16       	cp	r1, r24
    5606:	0c f0       	brlt	.+2      	; 0x560a <HLCD_sendCmd+0x836>
    5608:	43 c0       	rjmp	.+134    	; 0x5690 <HLCD_sendCmd+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    560a:	fe 01       	movw	r30, r28
    560c:	ef 5a       	subi	r30, 0xAF	; 175
    560e:	ff 4f       	sbci	r31, 0xFF	; 255
    5610:	60 81       	ld	r22, Z
    5612:	71 81       	ldd	r23, Z+1	; 0x01
    5614:	82 81       	ldd	r24, Z+2	; 0x02
    5616:	93 81       	ldd	r25, Z+3	; 0x03
    5618:	20 e0       	ldi	r18, 0x00	; 0
    561a:	30 e0       	ldi	r19, 0x00	; 0
    561c:	40 e2       	ldi	r20, 0x20	; 32
    561e:	51 e4       	ldi	r21, 0x41	; 65
    5620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5624:	dc 01       	movw	r26, r24
    5626:	cb 01       	movw	r24, r22
    5628:	8e 01       	movw	r16, r28
    562a:	05 5b       	subi	r16, 0xB5	; 181
    562c:	1f 4f       	sbci	r17, 0xFF	; 255
    562e:	bc 01       	movw	r22, r24
    5630:	cd 01       	movw	r24, r26
    5632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22
    563a:	f8 01       	movw	r30, r16
    563c:	91 83       	std	Z+1, r25	; 0x01
    563e:	80 83       	st	Z, r24
    5640:	1f c0       	rjmp	.+62     	; 0x5680 <HLCD_sendCmd+0x8ac>
    5642:	fe 01       	movw	r30, r28
    5644:	e7 5b       	subi	r30, 0xB7	; 183
    5646:	ff 4f       	sbci	r31, 0xFF	; 255
    5648:	88 ec       	ldi	r24, 0xC8	; 200
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	91 83       	std	Z+1, r25	; 0x01
    564e:	80 83       	st	Z, r24
    5650:	fe 01       	movw	r30, r28
    5652:	e7 5b       	subi	r30, 0xB7	; 183
    5654:	ff 4f       	sbci	r31, 0xFF	; 255
    5656:	80 81       	ld	r24, Z
    5658:	91 81       	ldd	r25, Z+1	; 0x01
    565a:	01 97       	sbiw	r24, 0x01	; 1
    565c:	f1 f7       	brne	.-4      	; 0x565a <HLCD_sendCmd+0x886>
    565e:	fe 01       	movw	r30, r28
    5660:	e7 5b       	subi	r30, 0xB7	; 183
    5662:	ff 4f       	sbci	r31, 0xFF	; 255
    5664:	91 83       	std	Z+1, r25	; 0x01
    5666:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5668:	de 01       	movw	r26, r28
    566a:	a5 5b       	subi	r26, 0xB5	; 181
    566c:	bf 4f       	sbci	r27, 0xFF	; 255
    566e:	fe 01       	movw	r30, r28
    5670:	e5 5b       	subi	r30, 0xB5	; 181
    5672:	ff 4f       	sbci	r31, 0xFF	; 255
    5674:	80 81       	ld	r24, Z
    5676:	91 81       	ldd	r25, Z+1	; 0x01
    5678:	01 97       	sbiw	r24, 0x01	; 1
    567a:	11 96       	adiw	r26, 0x01	; 1
    567c:	9c 93       	st	X, r25
    567e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5680:	fe 01       	movw	r30, r28
    5682:	e5 5b       	subi	r30, 0xB5	; 181
    5684:	ff 4f       	sbci	r31, 0xFF	; 255
    5686:	80 81       	ld	r24, Z
    5688:	91 81       	ldd	r25, Z+1	; 0x01
    568a:	00 97       	sbiw	r24, 0x00	; 0
    568c:	d1 f6       	brne	.-76     	; 0x5642 <HLCD_sendCmd+0x86e>
    568e:	27 c0       	rjmp	.+78     	; 0x56de <HLCD_sendCmd+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5690:	8e 01       	movw	r16, r28
    5692:	05 5b       	subi	r16, 0xB5	; 181
    5694:	1f 4f       	sbci	r17, 0xFF	; 255
    5696:	fe 01       	movw	r30, r28
    5698:	e3 5b       	subi	r30, 0xB3	; 179
    569a:	ff 4f       	sbci	r31, 0xFF	; 255
    569c:	60 81       	ld	r22, Z
    569e:	71 81       	ldd	r23, Z+1	; 0x01
    56a0:	82 81       	ldd	r24, Z+2	; 0x02
    56a2:	93 81       	ldd	r25, Z+3	; 0x03
    56a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56a8:	dc 01       	movw	r26, r24
    56aa:	cb 01       	movw	r24, r22
    56ac:	f8 01       	movw	r30, r16
    56ae:	91 83       	std	Z+1, r25	; 0x01
    56b0:	80 83       	st	Z, r24
    56b2:	de 01       	movw	r26, r28
    56b4:	a9 5b       	subi	r26, 0xB9	; 185
    56b6:	bf 4f       	sbci	r27, 0xFF	; 255
    56b8:	fe 01       	movw	r30, r28
    56ba:	e5 5b       	subi	r30, 0xB5	; 181
    56bc:	ff 4f       	sbci	r31, 0xFF	; 255
    56be:	80 81       	ld	r24, Z
    56c0:	91 81       	ldd	r25, Z+1	; 0x01
    56c2:	8d 93       	st	X+, r24
    56c4:	9c 93       	st	X, r25
    56c6:	fe 01       	movw	r30, r28
    56c8:	e9 5b       	subi	r30, 0xB9	; 185
    56ca:	ff 4f       	sbci	r31, 0xFF	; 255
    56cc:	80 81       	ld	r24, Z
    56ce:	91 81       	ldd	r25, Z+1	; 0x01
    56d0:	01 97       	sbiw	r24, 0x01	; 1
    56d2:	f1 f7       	brne	.-4      	; 0x56d0 <HLCD_sendCmd+0x8fc>
    56d4:	fe 01       	movw	r30, r28
    56d6:	e9 5b       	subi	r30, 0xB9	; 185
    56d8:	ff 4f       	sbci	r31, 0xFF	; 255
    56da:	91 83       	std	Z+1, r25	; 0x01
    56dc:	80 83       	st	Z, r24
			_delay_ms(50);
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Command<<4);
			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Command& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Command);
    56de:	fe 01       	movw	r30, r28
    56e0:	e5 56       	subi	r30, 0x65	; 101
    56e2:	ff 4f       	sbci	r31, 0xFF	; 255
    56e4:	01 90       	ld	r0, Z+
    56e6:	f0 81       	ld	r31, Z
    56e8:	e0 2d       	mov	r30, r0
    56ea:	82 81       	ldd	r24, Z+2	; 0x02
    56ec:	fe 01       	movw	r30, r28
    56ee:	e3 56       	subi	r30, 0x63	; 99
    56f0:	ff 4f       	sbci	r31, 0xFF	; 255
    56f2:	60 81       	ld	r22, Z
    56f4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <GPIO_set4msbValue>
    56f8:	fe 01       	movw	r30, r28
    56fa:	ed 5b       	subi	r30, 0xBD	; 189
    56fc:	ff 4f       	sbci	r31, 0xFF	; 255
    56fe:	80 e0       	ldi	r24, 0x00	; 0
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	a8 e4       	ldi	r26, 0x48	; 72
    5704:	b2 e4       	ldi	r27, 0x42	; 66
    5706:	80 83       	st	Z, r24
    5708:	91 83       	std	Z+1, r25	; 0x01
    570a:	a2 83       	std	Z+2, r26	; 0x02
    570c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    570e:	8e 01       	movw	r16, r28
    5710:	01 5c       	subi	r16, 0xC1	; 193
    5712:	1f 4f       	sbci	r17, 0xFF	; 255
    5714:	fe 01       	movw	r30, r28
    5716:	ed 5b       	subi	r30, 0xBD	; 189
    5718:	ff 4f       	sbci	r31, 0xFF	; 255
    571a:	60 81       	ld	r22, Z
    571c:	71 81       	ldd	r23, Z+1	; 0x01
    571e:	82 81       	ldd	r24, Z+2	; 0x02
    5720:	93 81       	ldd	r25, Z+3	; 0x03
    5722:	20 e0       	ldi	r18, 0x00	; 0
    5724:	30 e0       	ldi	r19, 0x00	; 0
    5726:	4a ef       	ldi	r20, 0xFA	; 250
    5728:	54 e4       	ldi	r21, 0x44	; 68
    572a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572e:	dc 01       	movw	r26, r24
    5730:	cb 01       	movw	r24, r22
    5732:	f8 01       	movw	r30, r16
    5734:	80 83       	st	Z, r24
    5736:	91 83       	std	Z+1, r25	; 0x01
    5738:	a2 83       	std	Z+2, r26	; 0x02
    573a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    573c:	fe 01       	movw	r30, r28
    573e:	ff 96       	adiw	r30, 0x3f	; 63
    5740:	60 81       	ld	r22, Z
    5742:	71 81       	ldd	r23, Z+1	; 0x01
    5744:	82 81       	ldd	r24, Z+2	; 0x02
    5746:	93 81       	ldd	r25, Z+3	; 0x03
    5748:	20 e0       	ldi	r18, 0x00	; 0
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	40 e8       	ldi	r20, 0x80	; 128
    574e:	5f e3       	ldi	r21, 0x3F	; 63
    5750:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5754:	88 23       	and	r24, r24
    5756:	2c f4       	brge	.+10     	; 0x5762 <HLCD_sendCmd+0x98e>
		__ticks = 1;
    5758:	81 e0       	ldi	r24, 0x01	; 1
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	9e af       	std	Y+62, r25	; 0x3e
    575e:	8d af       	std	Y+61, r24	; 0x3d
    5760:	46 c0       	rjmp	.+140    	; 0x57ee <HLCD_sendCmd+0xa1a>
	else if (__tmp > 65535)
    5762:	fe 01       	movw	r30, r28
    5764:	ff 96       	adiw	r30, 0x3f	; 63
    5766:	60 81       	ld	r22, Z
    5768:	71 81       	ldd	r23, Z+1	; 0x01
    576a:	82 81       	ldd	r24, Z+2	; 0x02
    576c:	93 81       	ldd	r25, Z+3	; 0x03
    576e:	20 e0       	ldi	r18, 0x00	; 0
    5770:	3f ef       	ldi	r19, 0xFF	; 255
    5772:	4f e7       	ldi	r20, 0x7F	; 127
    5774:	57 e4       	ldi	r21, 0x47	; 71
    5776:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    577a:	18 16       	cp	r1, r24
    577c:	64 f5       	brge	.+88     	; 0x57d6 <HLCD_sendCmd+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    577e:	fe 01       	movw	r30, r28
    5780:	ed 5b       	subi	r30, 0xBD	; 189
    5782:	ff 4f       	sbci	r31, 0xFF	; 255
    5784:	60 81       	ld	r22, Z
    5786:	71 81       	ldd	r23, Z+1	; 0x01
    5788:	82 81       	ldd	r24, Z+2	; 0x02
    578a:	93 81       	ldd	r25, Z+3	; 0x03
    578c:	20 e0       	ldi	r18, 0x00	; 0
    578e:	30 e0       	ldi	r19, 0x00	; 0
    5790:	40 e2       	ldi	r20, 0x20	; 32
    5792:	51 e4       	ldi	r21, 0x41	; 65
    5794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5798:	dc 01       	movw	r26, r24
    579a:	cb 01       	movw	r24, r22
    579c:	bc 01       	movw	r22, r24
    579e:	cd 01       	movw	r24, r26
    57a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57a4:	dc 01       	movw	r26, r24
    57a6:	cb 01       	movw	r24, r22
    57a8:	9e af       	std	Y+62, r25	; 0x3e
    57aa:	8d af       	std	Y+61, r24	; 0x3d
    57ac:	0f c0       	rjmp	.+30     	; 0x57cc <HLCD_sendCmd+0x9f8>
    57ae:	88 ec       	ldi	r24, 0xC8	; 200
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	9c af       	std	Y+60, r25	; 0x3c
    57b4:	8b af       	std	Y+59, r24	; 0x3b
    57b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    57b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    57ba:	01 97       	sbiw	r24, 0x01	; 1
    57bc:	f1 f7       	brne	.-4      	; 0x57ba <HLCD_sendCmd+0x9e6>
    57be:	9c af       	std	Y+60, r25	; 0x3c
    57c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    57c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    57c6:	01 97       	sbiw	r24, 0x01	; 1
    57c8:	9e af       	std	Y+62, r25	; 0x3e
    57ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    57ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    57d0:	00 97       	sbiw	r24, 0x00	; 0
    57d2:	69 f7       	brne	.-38     	; 0x57ae <HLCD_sendCmd+0x9da>
    57d4:	16 c0       	rjmp	.+44     	; 0x5802 <HLCD_sendCmd+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57d6:	fe 01       	movw	r30, r28
    57d8:	ff 96       	adiw	r30, 0x3f	; 63
    57da:	60 81       	ld	r22, Z
    57dc:	71 81       	ldd	r23, Z+1	; 0x01
    57de:	82 81       	ldd	r24, Z+2	; 0x02
    57e0:	93 81       	ldd	r25, Z+3	; 0x03
    57e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57e6:	dc 01       	movw	r26, r24
    57e8:	cb 01       	movw	r24, r22
    57ea:	9e af       	std	Y+62, r25	; 0x3e
    57ec:	8d af       	std	Y+61, r24	; 0x3d
    57ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    57f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    57f2:	9a af       	std	Y+58, r25	; 0x3a
    57f4:	89 af       	std	Y+57, r24	; 0x39
    57f6:	89 ad       	ldd	r24, Y+57	; 0x39
    57f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    57fa:	01 97       	sbiw	r24, 0x01	; 1
    57fc:	f1 f7       	brne	.-4      	; 0x57fa <HLCD_sendCmd+0xa26>
    57fe:	9a af       	std	Y+58, r25	; 0x3a
    5800:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(50);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    5802:	fe 01       	movw	r30, r28
    5804:	e3 57       	subi	r30, 0x73	; 115
    5806:	ff 4f       	sbci	r31, 0xFF	; 255
    5808:	80 81       	ld	r24, Z
    580a:	88 23       	and	r24, r24
    580c:	59 f4       	brne	.+22     	; 0x5824 <HLCD_sendCmd+0xa50>
    580e:	ce 01       	movw	r24, r28
    5810:	89 56       	subi	r24, 0x69	; 105
    5812:	9f 4f       	sbci	r25, 0xFF	; 255
    5814:	60 e0       	ldi	r22, 0x00	; 0
    5816:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    581a:	fe 01       	movw	r30, r28
    581c:	e3 57       	subi	r30, 0x73	; 115
    581e:	ff 4f       	sbci	r31, 0xFF	; 255
    5820:	80 83       	st	Z, r24
    5822:	05 c0       	rjmp	.+10     	; 0x582e <HLCD_sendCmd+0xa5a>
			else lcdRet = HLCD_NOK;
    5824:	fe 01       	movw	r30, r28
    5826:	e2 57       	subi	r30, 0x72	; 114
    5828:	ff 4f       	sbci	r31, 0xFF	; 255
    582a:	81 e0       	ldi	r24, 0x01	; 1
    582c:	80 83       	st	Z, r24
    582e:	80 e0       	ldi	r24, 0x00	; 0
    5830:	90 e0       	ldi	r25, 0x00	; 0
    5832:	a8 e4       	ldi	r26, 0x48	; 72
    5834:	b2 e4       	ldi	r27, 0x42	; 66
    5836:	8d ab       	std	Y+53, r24	; 0x35
    5838:	9e ab       	std	Y+54, r25	; 0x36
    583a:	af ab       	std	Y+55, r26	; 0x37
    583c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    583e:	6d a9       	ldd	r22, Y+53	; 0x35
    5840:	7e a9       	ldd	r23, Y+54	; 0x36
    5842:	8f a9       	ldd	r24, Y+55	; 0x37
    5844:	98 ad       	ldd	r25, Y+56	; 0x38
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	30 e0       	ldi	r19, 0x00	; 0
    584a:	4a ef       	ldi	r20, 0xFA	; 250
    584c:	54 e4       	ldi	r21, 0x44	; 68
    584e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5852:	dc 01       	movw	r26, r24
    5854:	cb 01       	movw	r24, r22
    5856:	89 ab       	std	Y+49, r24	; 0x31
    5858:	9a ab       	std	Y+50, r25	; 0x32
    585a:	ab ab       	std	Y+51, r26	; 0x33
    585c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    585e:	69 a9       	ldd	r22, Y+49	; 0x31
    5860:	7a a9       	ldd	r23, Y+50	; 0x32
    5862:	8b a9       	ldd	r24, Y+51	; 0x33
    5864:	9c a9       	ldd	r25, Y+52	; 0x34
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	40 e8       	ldi	r20, 0x80	; 128
    586c:	5f e3       	ldi	r21, 0x3F	; 63
    586e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5872:	88 23       	and	r24, r24
    5874:	2c f4       	brge	.+10     	; 0x5880 <HLCD_sendCmd+0xaac>
		__ticks = 1;
    5876:	81 e0       	ldi	r24, 0x01	; 1
    5878:	90 e0       	ldi	r25, 0x00	; 0
    587a:	98 ab       	std	Y+48, r25	; 0x30
    587c:	8f a7       	std	Y+47, r24	; 0x2f
    587e:	3f c0       	rjmp	.+126    	; 0x58fe <HLCD_sendCmd+0xb2a>
	else if (__tmp > 65535)
    5880:	69 a9       	ldd	r22, Y+49	; 0x31
    5882:	7a a9       	ldd	r23, Y+50	; 0x32
    5884:	8b a9       	ldd	r24, Y+51	; 0x33
    5886:	9c a9       	ldd	r25, Y+52	; 0x34
    5888:	20 e0       	ldi	r18, 0x00	; 0
    588a:	3f ef       	ldi	r19, 0xFF	; 255
    588c:	4f e7       	ldi	r20, 0x7F	; 127
    588e:	57 e4       	ldi	r21, 0x47	; 71
    5890:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5894:	18 16       	cp	r1, r24
    5896:	4c f5       	brge	.+82     	; 0x58ea <HLCD_sendCmd+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5898:	6d a9       	ldd	r22, Y+53	; 0x35
    589a:	7e a9       	ldd	r23, Y+54	; 0x36
    589c:	8f a9       	ldd	r24, Y+55	; 0x37
    589e:	98 ad       	ldd	r25, Y+56	; 0x38
    58a0:	20 e0       	ldi	r18, 0x00	; 0
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	40 e2       	ldi	r20, 0x20	; 32
    58a6:	51 e4       	ldi	r21, 0x41	; 65
    58a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ac:	dc 01       	movw	r26, r24
    58ae:	cb 01       	movw	r24, r22
    58b0:	bc 01       	movw	r22, r24
    58b2:	cd 01       	movw	r24, r26
    58b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58b8:	dc 01       	movw	r26, r24
    58ba:	cb 01       	movw	r24, r22
    58bc:	98 ab       	std	Y+48, r25	; 0x30
    58be:	8f a7       	std	Y+47, r24	; 0x2f
    58c0:	0f c0       	rjmp	.+30     	; 0x58e0 <HLCD_sendCmd+0xb0c>
    58c2:	88 ec       	ldi	r24, 0xC8	; 200
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	9e a7       	std	Y+46, r25	; 0x2e
    58c8:	8d a7       	std	Y+45, r24	; 0x2d
    58ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    58cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    58ce:	01 97       	sbiw	r24, 0x01	; 1
    58d0:	f1 f7       	brne	.-4      	; 0x58ce <HLCD_sendCmd+0xafa>
    58d2:	9e a7       	std	Y+46, r25	; 0x2e
    58d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    58d8:	98 a9       	ldd	r25, Y+48	; 0x30
    58da:	01 97       	sbiw	r24, 0x01	; 1
    58dc:	98 ab       	std	Y+48, r25	; 0x30
    58de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    58e2:	98 a9       	ldd	r25, Y+48	; 0x30
    58e4:	00 97       	sbiw	r24, 0x00	; 0
    58e6:	69 f7       	brne	.-38     	; 0x58c2 <HLCD_sendCmd+0xaee>
    58e8:	bb c1       	rjmp	.+886    	; 0x5c60 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58ea:	69 a9       	ldd	r22, Y+49	; 0x31
    58ec:	7a a9       	ldd	r23, Y+50	; 0x32
    58ee:	8b a9       	ldd	r24, Y+51	; 0x33
    58f0:	9c a9       	ldd	r25, Y+52	; 0x34
    58f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58f6:	dc 01       	movw	r26, r24
    58f8:	cb 01       	movw	r24, r22
    58fa:	98 ab       	std	Y+48, r25	; 0x30
    58fc:	8f a7       	std	Y+47, r24	; 0x2f
    58fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    5900:	98 a9       	ldd	r25, Y+48	; 0x30
    5902:	9c a7       	std	Y+44, r25	; 0x2c
    5904:	8b a7       	std	Y+43, r24	; 0x2b
    5906:	8b a5       	ldd	r24, Y+43	; 0x2b
    5908:	9c a5       	ldd	r25, Y+44	; 0x2c
    590a:	01 97       	sbiw	r24, 0x01	; 1
    590c:	f1 f7       	brne	.-4      	; 0x590a <HLCD_sendCmd+0xb36>
    590e:	9c a7       	std	Y+44, r25	; 0x2c
    5910:	8b a7       	std	Y+43, r24	; 0x2b
    5912:	a6 c1       	rjmp	.+844    	; 0x5c60 <HLCD_sendCmd+0xe8c>

			_delay_ms(50);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    5914:	fe 01       	movw	r30, r28
    5916:	e5 56       	subi	r30, 0x65	; 101
    5918:	ff 4f       	sbci	r31, 0xFF	; 255
    591a:	01 90       	ld	r0, Z+
    591c:	f0 81       	ld	r31, Z
    591e:	e0 2d       	mov	r30, r0
    5920:	80 81       	ld	r24, Z
    5922:	81 30       	cpi	r24, 0x01	; 1
    5924:	09 f0       	breq	.+2      	; 0x5928 <HLCD_sendCmd+0xb54>
    5926:	97 c1       	rjmp	.+814    	; 0x5c56 <HLCD_sendCmd+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    5928:	fe 01       	movw	r30, r28
    592a:	e3 57       	subi	r30, 0x73	; 115
    592c:	ff 4f       	sbci	r31, 0xFF	; 255
    592e:	80 81       	ld	r24, Z
    5930:	88 23       	and	r24, r24
    5932:	59 f4       	brne	.+22     	; 0x594a <HLCD_sendCmd+0xb76>
    5934:	ce 01       	movw	r24, r28
    5936:	89 56       	subi	r24, 0x69	; 105
    5938:	9f 4f       	sbci	r25, 0xFF	; 255
    593a:	61 e0       	ldi	r22, 0x01	; 1
    593c:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    5940:	fe 01       	movw	r30, r28
    5942:	e3 57       	subi	r30, 0x73	; 115
    5944:	ff 4f       	sbci	r31, 0xFF	; 255
    5946:	80 83       	st	Z, r24
    5948:	05 c0       	rjmp	.+10     	; 0x5954 <HLCD_sendCmd+0xb80>
			else lcdRet = HLCD_NOK;
    594a:	fe 01       	movw	r30, r28
    594c:	e2 57       	subi	r30, 0x72	; 114
    594e:	ff 4f       	sbci	r31, 0xFF	; 255
    5950:	81 e0       	ldi	r24, 0x01	; 1
    5952:	80 83       	st	Z, r24
    5954:	80 e0       	ldi	r24, 0x00	; 0
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	a0 e8       	ldi	r26, 0x80	; 128
    595a:	bf e3       	ldi	r27, 0x3F	; 63
    595c:	8f a3       	std	Y+39, r24	; 0x27
    595e:	98 a7       	std	Y+40, r25	; 0x28
    5960:	a9 a7       	std	Y+41, r26	; 0x29
    5962:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5964:	6f a1       	ldd	r22, Y+39	; 0x27
    5966:	78 a5       	ldd	r23, Y+40	; 0x28
    5968:	89 a5       	ldd	r24, Y+41	; 0x29
    596a:	9a a5       	ldd	r25, Y+42	; 0x2a
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	30 e0       	ldi	r19, 0x00	; 0
    5970:	4a ef       	ldi	r20, 0xFA	; 250
    5972:	54 e4       	ldi	r21, 0x44	; 68
    5974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5978:	dc 01       	movw	r26, r24
    597a:	cb 01       	movw	r24, r22
    597c:	8b a3       	std	Y+35, r24	; 0x23
    597e:	9c a3       	std	Y+36, r25	; 0x24
    5980:	ad a3       	std	Y+37, r26	; 0x25
    5982:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5984:	6b a1       	ldd	r22, Y+35	; 0x23
    5986:	7c a1       	ldd	r23, Y+36	; 0x24
    5988:	8d a1       	ldd	r24, Y+37	; 0x25
    598a:	9e a1       	ldd	r25, Y+38	; 0x26
    598c:	20 e0       	ldi	r18, 0x00	; 0
    598e:	30 e0       	ldi	r19, 0x00	; 0
    5990:	40 e8       	ldi	r20, 0x80	; 128
    5992:	5f e3       	ldi	r21, 0x3F	; 63
    5994:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5998:	88 23       	and	r24, r24
    599a:	2c f4       	brge	.+10     	; 0x59a6 <HLCD_sendCmd+0xbd2>
		__ticks = 1;
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	9a a3       	std	Y+34, r25	; 0x22
    59a2:	89 a3       	std	Y+33, r24	; 0x21
    59a4:	3f c0       	rjmp	.+126    	; 0x5a24 <HLCD_sendCmd+0xc50>
	else if (__tmp > 65535)
    59a6:	6b a1       	ldd	r22, Y+35	; 0x23
    59a8:	7c a1       	ldd	r23, Y+36	; 0x24
    59aa:	8d a1       	ldd	r24, Y+37	; 0x25
    59ac:	9e a1       	ldd	r25, Y+38	; 0x26
    59ae:	20 e0       	ldi	r18, 0x00	; 0
    59b0:	3f ef       	ldi	r19, 0xFF	; 255
    59b2:	4f e7       	ldi	r20, 0x7F	; 127
    59b4:	57 e4       	ldi	r21, 0x47	; 71
    59b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    59ba:	18 16       	cp	r1, r24
    59bc:	4c f5       	brge	.+82     	; 0x5a10 <HLCD_sendCmd+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59be:	6f a1       	ldd	r22, Y+39	; 0x27
    59c0:	78 a5       	ldd	r23, Y+40	; 0x28
    59c2:	89 a5       	ldd	r24, Y+41	; 0x29
    59c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    59c6:	20 e0       	ldi	r18, 0x00	; 0
    59c8:	30 e0       	ldi	r19, 0x00	; 0
    59ca:	40 e2       	ldi	r20, 0x20	; 32
    59cc:	51 e4       	ldi	r21, 0x41	; 65
    59ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59d2:	dc 01       	movw	r26, r24
    59d4:	cb 01       	movw	r24, r22
    59d6:	bc 01       	movw	r22, r24
    59d8:	cd 01       	movw	r24, r26
    59da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59de:	dc 01       	movw	r26, r24
    59e0:	cb 01       	movw	r24, r22
    59e2:	9a a3       	std	Y+34, r25	; 0x22
    59e4:	89 a3       	std	Y+33, r24	; 0x21
    59e6:	0f c0       	rjmp	.+30     	; 0x5a06 <HLCD_sendCmd+0xc32>
    59e8:	88 ec       	ldi	r24, 0xC8	; 200
    59ea:	90 e0       	ldi	r25, 0x00	; 0
    59ec:	98 a3       	std	Y+32, r25	; 0x20
    59ee:	8f 8f       	std	Y+31, r24	; 0x1f
    59f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    59f2:	98 a1       	ldd	r25, Y+32	; 0x20
    59f4:	01 97       	sbiw	r24, 0x01	; 1
    59f6:	f1 f7       	brne	.-4      	; 0x59f4 <HLCD_sendCmd+0xc20>
    59f8:	98 a3       	std	Y+32, r25	; 0x20
    59fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59fc:	89 a1       	ldd	r24, Y+33	; 0x21
    59fe:	9a a1       	ldd	r25, Y+34	; 0x22
    5a00:	01 97       	sbiw	r24, 0x01	; 1
    5a02:	9a a3       	std	Y+34, r25	; 0x22
    5a04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a06:	89 a1       	ldd	r24, Y+33	; 0x21
    5a08:	9a a1       	ldd	r25, Y+34	; 0x22
    5a0a:	00 97       	sbiw	r24, 0x00	; 0
    5a0c:	69 f7       	brne	.-38     	; 0x59e8 <HLCD_sendCmd+0xc14>
    5a0e:	14 c0       	rjmp	.+40     	; 0x5a38 <HLCD_sendCmd+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a10:	6b a1       	ldd	r22, Y+35	; 0x23
    5a12:	7c a1       	ldd	r23, Y+36	; 0x24
    5a14:	8d a1       	ldd	r24, Y+37	; 0x25
    5a16:	9e a1       	ldd	r25, Y+38	; 0x26
    5a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	cb 01       	movw	r24, r22
    5a20:	9a a3       	std	Y+34, r25	; 0x22
    5a22:	89 a3       	std	Y+33, r24	; 0x21
    5a24:	89 a1       	ldd	r24, Y+33	; 0x21
    5a26:	9a a1       	ldd	r25, Y+34	; 0x22
    5a28:	9e 8f       	std	Y+30, r25	; 0x1e
    5a2a:	8d 8f       	std	Y+29, r24	; 0x1d
    5a2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a30:	01 97       	sbiw	r24, 0x01	; 1
    5a32:	f1 f7       	brne	.-4      	; 0x5a30 <HLCD_sendCmd+0xc5c>
    5a34:	9e 8f       	std	Y+30, r25	; 0x1e
    5a36:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);
			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Command);
    5a38:	fe 01       	movw	r30, r28
    5a3a:	e5 56       	subi	r30, 0x65	; 101
    5a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a3e:	01 90       	ld	r0, Z+
    5a40:	f0 81       	ld	r31, Z
    5a42:	e0 2d       	mov	r30, r0
    5a44:	92 81       	ldd	r25, Z+2	; 0x02
    5a46:	fe 01       	movw	r30, r28
    5a48:	e3 56       	subi	r30, 0x63	; 99
    5a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4c:	80 81       	ld	r24, Z
    5a4e:	28 2f       	mov	r18, r24
    5a50:	30 e0       	ldi	r19, 0x00	; 0
    5a52:	40 e0       	ldi	r20, 0x00	; 0
    5a54:	50 e0       	ldi	r21, 0x00	; 0
    5a56:	89 2f       	mov	r24, r25
    5a58:	ba 01       	movw	r22, r20
    5a5a:	a9 01       	movw	r20, r18
    5a5c:	0e 94 cb 11 	call	0x2396	; 0x2396 <GPIO_SetPortValue>
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	a0 e8       	ldi	r26, 0x80	; 128
    5a66:	bf e3       	ldi	r27, 0x3F	; 63
    5a68:	89 8f       	std	Y+25, r24	; 0x19
    5a6a:	9a 8f       	std	Y+26, r25	; 0x1a
    5a6c:	ab 8f       	std	Y+27, r26	; 0x1b
    5a6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a70:	69 8d       	ldd	r22, Y+25	; 0x19
    5a72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	4a ef       	ldi	r20, 0xFA	; 250
    5a7e:	54 e4       	ldi	r21, 0x44	; 68
    5a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a84:	dc 01       	movw	r26, r24
    5a86:	cb 01       	movw	r24, r22
    5a88:	8d 8b       	std	Y+21, r24	; 0x15
    5a8a:	9e 8b       	std	Y+22, r25	; 0x16
    5a8c:	af 8b       	std	Y+23, r26	; 0x17
    5a8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5a90:	6d 89       	ldd	r22, Y+21	; 0x15
    5a92:	7e 89       	ldd	r23, Y+22	; 0x16
    5a94:	8f 89       	ldd	r24, Y+23	; 0x17
    5a96:	98 8d       	ldd	r25, Y+24	; 0x18
    5a98:	20 e0       	ldi	r18, 0x00	; 0
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	40 e8       	ldi	r20, 0x80	; 128
    5a9e:	5f e3       	ldi	r21, 0x3F	; 63
    5aa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5aa4:	88 23       	and	r24, r24
    5aa6:	2c f4       	brge	.+10     	; 0x5ab2 <HLCD_sendCmd+0xcde>
		__ticks = 1;
    5aa8:	81 e0       	ldi	r24, 0x01	; 1
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	9c 8b       	std	Y+20, r25	; 0x14
    5aae:	8b 8b       	std	Y+19, r24	; 0x13
    5ab0:	3f c0       	rjmp	.+126    	; 0x5b30 <HLCD_sendCmd+0xd5c>
	else if (__tmp > 65535)
    5ab2:	6d 89       	ldd	r22, Y+21	; 0x15
    5ab4:	7e 89       	ldd	r23, Y+22	; 0x16
    5ab6:	8f 89       	ldd	r24, Y+23	; 0x17
    5ab8:	98 8d       	ldd	r25, Y+24	; 0x18
    5aba:	20 e0       	ldi	r18, 0x00	; 0
    5abc:	3f ef       	ldi	r19, 0xFF	; 255
    5abe:	4f e7       	ldi	r20, 0x7F	; 127
    5ac0:	57 e4       	ldi	r21, 0x47	; 71
    5ac2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5ac6:	18 16       	cp	r1, r24
    5ac8:	4c f5       	brge	.+82     	; 0x5b1c <HLCD_sendCmd+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aca:	69 8d       	ldd	r22, Y+25	; 0x19
    5acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5ad2:	20 e0       	ldi	r18, 0x00	; 0
    5ad4:	30 e0       	ldi	r19, 0x00	; 0
    5ad6:	40 e2       	ldi	r20, 0x20	; 32
    5ad8:	51 e4       	ldi	r21, 0x41	; 65
    5ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ade:	dc 01       	movw	r26, r24
    5ae0:	cb 01       	movw	r24, r22
    5ae2:	bc 01       	movw	r22, r24
    5ae4:	cd 01       	movw	r24, r26
    5ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aea:	dc 01       	movw	r26, r24
    5aec:	cb 01       	movw	r24, r22
    5aee:	9c 8b       	std	Y+20, r25	; 0x14
    5af0:	8b 8b       	std	Y+19, r24	; 0x13
    5af2:	0f c0       	rjmp	.+30     	; 0x5b12 <HLCD_sendCmd+0xd3e>
    5af4:	88 ec       	ldi	r24, 0xC8	; 200
    5af6:	90 e0       	ldi	r25, 0x00	; 0
    5af8:	9a 8b       	std	Y+18, r25	; 0x12
    5afa:	89 8b       	std	Y+17, r24	; 0x11
    5afc:	89 89       	ldd	r24, Y+17	; 0x11
    5afe:	9a 89       	ldd	r25, Y+18	; 0x12
    5b00:	01 97       	sbiw	r24, 0x01	; 1
    5b02:	f1 f7       	brne	.-4      	; 0x5b00 <HLCD_sendCmd+0xd2c>
    5b04:	9a 8b       	std	Y+18, r25	; 0x12
    5b06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b08:	8b 89       	ldd	r24, Y+19	; 0x13
    5b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    5b0c:	01 97       	sbiw	r24, 0x01	; 1
    5b0e:	9c 8b       	std	Y+20, r25	; 0x14
    5b10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b12:	8b 89       	ldd	r24, Y+19	; 0x13
    5b14:	9c 89       	ldd	r25, Y+20	; 0x14
    5b16:	00 97       	sbiw	r24, 0x00	; 0
    5b18:	69 f7       	brne	.-38     	; 0x5af4 <HLCD_sendCmd+0xd20>
    5b1a:	14 c0       	rjmp	.+40     	; 0x5b44 <HLCD_sendCmd+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    5b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    5b20:	8f 89       	ldd	r24, Y+23	; 0x17
    5b22:	98 8d       	ldd	r25, Y+24	; 0x18
    5b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	9c 8b       	std	Y+20, r25	; 0x14
    5b2e:	8b 8b       	std	Y+19, r24	; 0x13
    5b30:	8b 89       	ldd	r24, Y+19	; 0x13
    5b32:	9c 89       	ldd	r25, Y+20	; 0x14
    5b34:	98 8b       	std	Y+16, r25	; 0x10
    5b36:	8f 87       	std	Y+15, r24	; 0x0f
    5b38:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b3a:	98 89       	ldd	r25, Y+16	; 0x10
    5b3c:	01 97       	sbiw	r24, 0x01	; 1
    5b3e:	f1 f7       	brne	.-4      	; 0x5b3c <HLCD_sendCmd+0xd68>
    5b40:	98 8b       	std	Y+16, r25	; 0x10
    5b42:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    5b44:	fe 01       	movw	r30, r28
    5b46:	e3 57       	subi	r30, 0x73	; 115
    5b48:	ff 4f       	sbci	r31, 0xFF	; 255
    5b4a:	80 81       	ld	r24, Z
    5b4c:	88 23       	and	r24, r24
    5b4e:	59 f4       	brne	.+22     	; 0x5b66 <HLCD_sendCmd+0xd92>
    5b50:	ce 01       	movw	r24, r28
    5b52:	89 56       	subi	r24, 0x69	; 105
    5b54:	9f 4f       	sbci	r25, 0xFF	; 255
    5b56:	60 e0       	ldi	r22, 0x00	; 0
    5b58:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    5b5c:	fe 01       	movw	r30, r28
    5b5e:	e3 57       	subi	r30, 0x73	; 115
    5b60:	ff 4f       	sbci	r31, 0xFF	; 255
    5b62:	80 83       	st	Z, r24
    5b64:	05 c0       	rjmp	.+10     	; 0x5b70 <HLCD_sendCmd+0xd9c>
			else lcdRet = HLCD_NOK;
    5b66:	fe 01       	movw	r30, r28
    5b68:	e2 57       	subi	r30, 0x72	; 114
    5b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	80 83       	st	Z, r24
    5b70:	80 e0       	ldi	r24, 0x00	; 0
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	a0 e8       	ldi	r26, 0x80	; 128
    5b76:	bf e3       	ldi	r27, 0x3F	; 63
    5b78:	8b 87       	std	Y+11, r24	; 0x0b
    5b7a:	9c 87       	std	Y+12, r25	; 0x0c
    5b7c:	ad 87       	std	Y+13, r26	; 0x0d
    5b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b88:	20 e0       	ldi	r18, 0x00	; 0
    5b8a:	30 e0       	ldi	r19, 0x00	; 0
    5b8c:	4a ef       	ldi	r20, 0xFA	; 250
    5b8e:	54 e4       	ldi	r21, 0x44	; 68
    5b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b94:	dc 01       	movw	r26, r24
    5b96:	cb 01       	movw	r24, r22
    5b98:	8f 83       	std	Y+7, r24	; 0x07
    5b9a:	98 87       	std	Y+8, r25	; 0x08
    5b9c:	a9 87       	std	Y+9, r26	; 0x09
    5b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    5ba2:	78 85       	ldd	r23, Y+8	; 0x08
    5ba4:	89 85       	ldd	r24, Y+9	; 0x09
    5ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ba8:	20 e0       	ldi	r18, 0x00	; 0
    5baa:	30 e0       	ldi	r19, 0x00	; 0
    5bac:	40 e8       	ldi	r20, 0x80	; 128
    5bae:	5f e3       	ldi	r21, 0x3F	; 63
    5bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5bb4:	88 23       	and	r24, r24
    5bb6:	2c f4       	brge	.+10     	; 0x5bc2 <HLCD_sendCmd+0xdee>
		__ticks = 1;
    5bb8:	81 e0       	ldi	r24, 0x01	; 1
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	9e 83       	std	Y+6, r25	; 0x06
    5bbe:	8d 83       	std	Y+5, r24	; 0x05
    5bc0:	3f c0       	rjmp	.+126    	; 0x5c40 <HLCD_sendCmd+0xe6c>
	else if (__tmp > 65535)
    5bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    5bc4:	78 85       	ldd	r23, Y+8	; 0x08
    5bc6:	89 85       	ldd	r24, Y+9	; 0x09
    5bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5bca:	20 e0       	ldi	r18, 0x00	; 0
    5bcc:	3f ef       	ldi	r19, 0xFF	; 255
    5bce:	4f e7       	ldi	r20, 0x7F	; 127
    5bd0:	57 e4       	ldi	r21, 0x47	; 71
    5bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5bd6:	18 16       	cp	r1, r24
    5bd8:	4c f5       	brge	.+82     	; 0x5c2c <HLCD_sendCmd+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    5bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    5bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    5be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5be2:	20 e0       	ldi	r18, 0x00	; 0
    5be4:	30 e0       	ldi	r19, 0x00	; 0
    5be6:	40 e2       	ldi	r20, 0x20	; 32
    5be8:	51 e4       	ldi	r21, 0x41	; 65
    5bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bee:	dc 01       	movw	r26, r24
    5bf0:	cb 01       	movw	r24, r22
    5bf2:	bc 01       	movw	r22, r24
    5bf4:	cd 01       	movw	r24, r26
    5bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bfa:	dc 01       	movw	r26, r24
    5bfc:	cb 01       	movw	r24, r22
    5bfe:	9e 83       	std	Y+6, r25	; 0x06
    5c00:	8d 83       	std	Y+5, r24	; 0x05
    5c02:	0f c0       	rjmp	.+30     	; 0x5c22 <HLCD_sendCmd+0xe4e>
    5c04:	88 ec       	ldi	r24, 0xC8	; 200
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	9c 83       	std	Y+4, r25	; 0x04
    5c0a:	8b 83       	std	Y+3, r24	; 0x03
    5c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c10:	01 97       	sbiw	r24, 0x01	; 1
    5c12:	f1 f7       	brne	.-4      	; 0x5c10 <HLCD_sendCmd+0xe3c>
    5c14:	9c 83       	std	Y+4, r25	; 0x04
    5c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5c18:	8d 81       	ldd	r24, Y+5	; 0x05
    5c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    5c1c:	01 97       	sbiw	r24, 0x01	; 1
    5c1e:	9e 83       	std	Y+6, r25	; 0x06
    5c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5c22:	8d 81       	ldd	r24, Y+5	; 0x05
    5c24:	9e 81       	ldd	r25, Y+6	; 0x06
    5c26:	00 97       	sbiw	r24, 0x00	; 0
    5c28:	69 f7       	brne	.-38     	; 0x5c04 <HLCD_sendCmd+0xe30>
    5c2a:	1a c0       	rjmp	.+52     	; 0x5c60 <HLCD_sendCmd+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    5c2e:	78 85       	ldd	r23, Y+8	; 0x08
    5c30:	89 85       	ldd	r24, Y+9	; 0x09
    5c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c38:	dc 01       	movw	r26, r24
    5c3a:	cb 01       	movw	r24, r22
    5c3c:	9e 83       	std	Y+6, r25	; 0x06
    5c3e:	8d 83       	std	Y+5, r24	; 0x05
    5c40:	8d 81       	ldd	r24, Y+5	; 0x05
    5c42:	9e 81       	ldd	r25, Y+6	; 0x06
    5c44:	9a 83       	std	Y+2, r25	; 0x02
    5c46:	89 83       	std	Y+1, r24	; 0x01
    5c48:	89 81       	ldd	r24, Y+1	; 0x01
    5c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c4c:	01 97       	sbiw	r24, 0x01	; 1
    5c4e:	f1 f7       	brne	.-4      	; 0x5c4c <HLCD_sendCmd+0xe78>
    5c50:	9a 83       	std	Y+2, r25	; 0x02
    5c52:	89 83       	std	Y+1, r24	; 0x01
    5c54:	05 c0       	rjmp	.+10     	; 0x5c60 <HLCD_sendCmd+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    5c56:	fe 01       	movw	r30, r28
    5c58:	e2 57       	subi	r30, 0x72	; 114
    5c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5c:	83 e0       	ldi	r24, 0x03	; 3
    5c5e:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    5c60:	fe 01       	movw	r30, r28
    5c62:	e3 57       	subi	r30, 0x73	; 115
    5c64:	ff 4f       	sbci	r31, 0xFF	; 255
    5c66:	80 81       	ld	r24, Z
    5c68:	88 23       	and	r24, r24
    5c6a:	29 f4       	brne	.+10     	; 0x5c76 <HLCD_sendCmd+0xea2>
    5c6c:	fe 01       	movw	r30, r28
    5c6e:	e2 57       	subi	r30, 0x72	; 114
    5c70:	ff 4f       	sbci	r31, 0xFF	; 255
    5c72:	10 82       	st	Z, r1
    5c74:	0b c0       	rjmp	.+22     	; 0x5c8c <HLCD_sendCmd+0xeb8>
		else lcdRet = HLCD_NOK;
    5c76:	fe 01       	movw	r30, r28
    5c78:	e2 57       	subi	r30, 0x72	; 114
    5c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c7c:	81 e0       	ldi	r24, 0x01	; 1
    5c7e:	80 83       	st	Z, r24
    5c80:	05 c0       	rjmp	.+10     	; 0x5c8c <HLCD_sendCmd+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    5c82:	fe 01       	movw	r30, r28
    5c84:	e2 57       	subi	r30, 0x72	; 114
    5c86:	ff 4f       	sbci	r31, 0xFF	; 255
    5c88:	81 e0       	ldi	r24, 0x01	; 1
    5c8a:	80 83       	st	Z, r24
	}

	return lcdRet;
    5c8c:	fe 01       	movw	r30, r28
    5c8e:	e2 57       	subi	r30, 0x72	; 114
    5c90:	ff 4f       	sbci	r31, 0xFF	; 255
    5c92:	80 81       	ld	r24, Z
}
    5c94:	c3 56       	subi	r28, 0x63	; 99
    5c96:	df 4f       	sbci	r29, 0xFF	; 255
    5c98:	0f b6       	in	r0, 0x3f	; 63
    5c9a:	f8 94       	cli
    5c9c:	de bf       	out	0x3e, r29	; 62
    5c9e:	0f be       	out	0x3f, r0	; 63
    5ca0:	cd bf       	out	0x3d, r28	; 61
    5ca2:	cf 91       	pop	r28
    5ca4:	df 91       	pop	r29
    5ca6:	1f 91       	pop	r17
    5ca8:	0f 91       	pop	r16
    5caa:	08 95       	ret

00005cac <HLCD_displayChar>:

EN_HLCD_systemState_t HLCD_displayChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Char)
{
    5cac:	0f 93       	push	r16
    5cae:	1f 93       	push	r17
    5cb0:	df 93       	push	r29
    5cb2:	cf 93       	push	r28
    5cb4:	cd b7       	in	r28, 0x3d	; 61
    5cb6:	de b7       	in	r29, 0x3e	; 62
    5cb8:	cd 59       	subi	r28, 0x9D	; 157
    5cba:	d0 40       	sbci	r29, 0x00	; 0
    5cbc:	0f b6       	in	r0, 0x3f	; 63
    5cbe:	f8 94       	cli
    5cc0:	de bf       	out	0x3e, r29	; 62
    5cc2:	0f be       	out	0x3f, r0	; 63
    5cc4:	cd bf       	out	0x3d, r28	; 61
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	e5 56       	subi	r30, 0x65	; 101
    5cca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ccc:	91 83       	std	Z+1, r25	; 0x01
    5cce:	80 83       	st	Z, r24
    5cd0:	fe 01       	movw	r30, r28
    5cd2:	e3 56       	subi	r30, 0x63	; 99
    5cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd6:	60 83       	st	Z, r22
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    5cd8:	fe 01       	movw	r30, r28
    5cda:	e2 57       	subi	r30, 0x72	; 114
    5cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cde:	81 e0       	ldi	r24, 0x01	; 1
    5ce0:	80 83       	st	Z, r24
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    5ce2:	fe 01       	movw	r30, r28
    5ce4:	e3 57       	subi	r30, 0x73	; 115
    5ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce8:	81 e0       	ldi	r24, 0x01	; 1
    5cea:	80 83       	st	Z, r24

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    5cec:	fe 01       	movw	r30, r28
    5cee:	e5 56       	subi	r30, 0x65	; 101
    5cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf2:	80 81       	ld	r24, Z
    5cf4:	91 81       	ldd	r25, Z+1	; 0x01
    5cf6:	00 97       	sbiw	r24, 0x00	; 0
    5cf8:	09 f4       	brne	.+2      	; 0x5cfc <HLCD_displayChar+0x50>
    5cfa:	2f c7       	rjmp	.+3678   	; 0x6b5a <HLCD_displayChar+0xeae>
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rsPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    5cfc:	fe 01       	movw	r30, r28
    5cfe:	e5 56       	subi	r30, 0x65	; 101
    5d00:	ff 4f       	sbci	r31, 0xFF	; 255
    5d02:	01 90       	ld	r0, Z+
    5d04:	f0 81       	ld	r31, Z
    5d06:	e0 2d       	mov	r30, r0
    5d08:	81 81       	ldd	r24, Z+1	; 0x01
    5d0a:	fe 01       	movw	r30, r28
    5d0c:	e5 56       	subi	r30, 0x65	; 101
    5d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d10:	01 90       	ld	r0, Z+
    5d12:	f0 81       	ld	r31, Z
    5d14:	e0 2d       	mov	r30, r0
    5d16:	93 81       	ldd	r25, Z+3	; 0x03
    5d18:	fe 01       	movw	r30, r28
    5d1a:	e1 57       	subi	r30, 0x71	; 113
    5d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d1e:	80 83       	st	Z, r24
    5d20:	fe 01       	movw	r30, r28
    5d22:	e1 57       	subi	r30, 0x71	; 113
    5d24:	ff 4f       	sbci	r31, 0xFF	; 255
    5d26:	91 83       	std	Z+1, r25	; 0x01
    5d28:	fe 01       	movw	r30, r28
    5d2a:	e1 57       	subi	r30, 0x71	; 113
    5d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d2e:	81 e0       	ldi	r24, 0x01	; 1
    5d30:	82 83       	std	Z+2, r24	; 0x02
    5d32:	fe 01       	movw	r30, r28
    5d34:	e1 57       	subi	r30, 0x71	; 113
    5d36:	ff 4f       	sbci	r31, 0xFF	; 255
    5d38:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->rwPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    5d3a:	fe 01       	movw	r30, r28
    5d3c:	e5 56       	subi	r30, 0x65	; 101
    5d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d40:	01 90       	ld	r0, Z+
    5d42:	f0 81       	ld	r31, Z
    5d44:	e0 2d       	mov	r30, r0
    5d46:	81 81       	ldd	r24, Z+1	; 0x01
    5d48:	fe 01       	movw	r30, r28
    5d4a:	e5 56       	subi	r30, 0x65	; 101
    5d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d4e:	01 90       	ld	r0, Z+
    5d50:	f0 81       	ld	r31, Z
    5d52:	e0 2d       	mov	r30, r0
    5d54:	94 81       	ldd	r25, Z+4	; 0x04
    5d56:	fe 01       	movw	r30, r28
    5d58:	ed 56       	subi	r30, 0x6D	; 109
    5d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d5c:	80 83       	st	Z, r24
    5d5e:	fe 01       	movw	r30, r28
    5d60:	ed 56       	subi	r30, 0x6D	; 109
    5d62:	ff 4f       	sbci	r31, 0xFF	; 255
    5d64:	91 83       	std	Z+1, r25	; 0x01
    5d66:	fe 01       	movw	r30, r28
    5d68:	ed 56       	subi	r30, 0x6D	; 109
    5d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	82 83       	std	Z+2, r24	; 0x02
    5d70:	fe 01       	movw	r30, r28
    5d72:	ed 56       	subi	r30, 0x6D	; 109
    5d74:	ff 4f       	sbci	r31, 0xFF	; 255
    5d76:	13 82       	std	Z+3, r1	; 0x03
		{
				.portName = ST_ptrLcdCfgInstance->controlPort,
				.pinNumber = ST_ptrLcdCfgInstance->enPin,
				.logicOnPin = GPIO_LOW,
				.pinDirection = GPIO_OUTPUT
		};
    5d78:	fe 01       	movw	r30, r28
    5d7a:	e5 56       	subi	r30, 0x65	; 101
    5d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d7e:	01 90       	ld	r0, Z+
    5d80:	f0 81       	ld	r31, Z
    5d82:	e0 2d       	mov	r30, r0
    5d84:	81 81       	ldd	r24, Z+1	; 0x01
    5d86:	fe 01       	movw	r30, r28
    5d88:	e5 56       	subi	r30, 0x65	; 101
    5d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    5d8c:	01 90       	ld	r0, Z+
    5d8e:	f0 81       	ld	r31, Z
    5d90:	e0 2d       	mov	r30, r0
    5d92:	95 81       	ldd	r25, Z+5	; 0x05
    5d94:	fe 01       	movw	r30, r28
    5d96:	e9 56       	subi	r30, 0x69	; 105
    5d98:	ff 4f       	sbci	r31, 0xFF	; 255
    5d9a:	80 83       	st	Z, r24
    5d9c:	fe 01       	movw	r30, r28
    5d9e:	e9 56       	subi	r30, 0x69	; 105
    5da0:	ff 4f       	sbci	r31, 0xFF	; 255
    5da2:	91 83       	std	Z+1, r25	; 0x01
    5da4:	fe 01       	movw	r30, r28
    5da6:	e9 56       	subi	r30, 0x69	; 105
    5da8:	ff 4f       	sbci	r31, 0xFF	; 255
    5daa:	81 e0       	ldi	r24, 0x01	; 1
    5dac:	82 83       	std	Z+2, r24	; 0x02
    5dae:	fe 01       	movw	r30, r28
    5db0:	e9 56       	subi	r30, 0x69	; 105
    5db2:	ff 4f       	sbci	r31, 0xFF	; 255
    5db4:	13 82       	std	Z+3, r1	; 0x03

		gpioRet = GPIO_writePinLogic(&rsPin,GPIO_HIGH);
    5db6:	ce 01       	movw	r24, r28
    5db8:	81 57       	subi	r24, 0x71	; 113
    5dba:	9f 4f       	sbci	r25, 0xFF	; 255
    5dbc:	61 e0       	ldi	r22, 0x01	; 1
    5dbe:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    5dc2:	fe 01       	movw	r30, r28
    5dc4:	e3 57       	subi	r30, 0x73	; 115
    5dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc8:	80 83       	st	Z, r24
		if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&rwPin,GPIO_LOW);
    5dca:	fe 01       	movw	r30, r28
    5dcc:	e3 57       	subi	r30, 0x73	; 115
    5dce:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd0:	80 81       	ld	r24, Z
    5dd2:	88 23       	and	r24, r24
    5dd4:	59 f4       	brne	.+22     	; 0x5dec <HLCD_displayChar+0x140>
    5dd6:	ce 01       	movw	r24, r28
    5dd8:	8d 56       	subi	r24, 0x6D	; 109
    5dda:	9f 4f       	sbci	r25, 0xFF	; 255
    5ddc:	60 e0       	ldi	r22, 0x00	; 0
    5dde:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    5de2:	fe 01       	movw	r30, r28
    5de4:	e3 57       	subi	r30, 0x73	; 115
    5de6:	ff 4f       	sbci	r31, 0xFF	; 255
    5de8:	80 83       	st	Z, r24
    5dea:	05 c0       	rjmp	.+10     	; 0x5df6 <HLCD_displayChar+0x14a>
		else lcdRet = HLCD_NOK;
    5dec:	fe 01       	movw	r30, r28
    5dee:	e2 57       	subi	r30, 0x72	; 114
    5df0:	ff 4f       	sbci	r31, 0xFF	; 255
    5df2:	81 e0       	ldi	r24, 0x01	; 1
    5df4:	80 83       	st	Z, r24
    5df6:	fe 01       	movw	r30, r28
    5df8:	e7 57       	subi	r30, 0x77	; 119
    5dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfc:	80 e0       	ldi	r24, 0x00	; 0
    5dfe:	90 e0       	ldi	r25, 0x00	; 0
    5e00:	a0 ef       	ldi	r26, 0xF0	; 240
    5e02:	b1 e4       	ldi	r27, 0x41	; 65
    5e04:	80 83       	st	Z, r24
    5e06:	91 83       	std	Z+1, r25	; 0x01
    5e08:	a2 83       	std	Z+2, r26	; 0x02
    5e0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e0c:	8e 01       	movw	r16, r28
    5e0e:	0b 57       	subi	r16, 0x7B	; 123
    5e10:	1f 4f       	sbci	r17, 0xFF	; 255
    5e12:	fe 01       	movw	r30, r28
    5e14:	e7 57       	subi	r30, 0x77	; 119
    5e16:	ff 4f       	sbci	r31, 0xFF	; 255
    5e18:	60 81       	ld	r22, Z
    5e1a:	71 81       	ldd	r23, Z+1	; 0x01
    5e1c:	82 81       	ldd	r24, Z+2	; 0x02
    5e1e:	93 81       	ldd	r25, Z+3	; 0x03
    5e20:	20 e0       	ldi	r18, 0x00	; 0
    5e22:	30 e0       	ldi	r19, 0x00	; 0
    5e24:	4a ef       	ldi	r20, 0xFA	; 250
    5e26:	54 e4       	ldi	r21, 0x44	; 68
    5e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e2c:	dc 01       	movw	r26, r24
    5e2e:	cb 01       	movw	r24, r22
    5e30:	f8 01       	movw	r30, r16
    5e32:	80 83       	st	Z, r24
    5e34:	91 83       	std	Z+1, r25	; 0x01
    5e36:	a2 83       	std	Z+2, r26	; 0x02
    5e38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e3a:	fe 01       	movw	r30, r28
    5e3c:	eb 57       	subi	r30, 0x7B	; 123
    5e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e40:	60 81       	ld	r22, Z
    5e42:	71 81       	ldd	r23, Z+1	; 0x01
    5e44:	82 81       	ldd	r24, Z+2	; 0x02
    5e46:	93 81       	ldd	r25, Z+3	; 0x03
    5e48:	20 e0       	ldi	r18, 0x00	; 0
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	40 e8       	ldi	r20, 0x80	; 128
    5e4e:	5f e3       	ldi	r21, 0x3F	; 63
    5e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5e54:	88 23       	and	r24, r24
    5e56:	44 f4       	brge	.+16     	; 0x5e68 <HLCD_displayChar+0x1bc>
		__ticks = 1;
    5e58:	fe 01       	movw	r30, r28
    5e5a:	ed 57       	subi	r30, 0x7D	; 125
    5e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
    5e60:	90 e0       	ldi	r25, 0x00	; 0
    5e62:	91 83       	std	Z+1, r25	; 0x01
    5e64:	80 83       	st	Z, r24
    5e66:	64 c0       	rjmp	.+200    	; 0x5f30 <HLCD_displayChar+0x284>
	else if (__tmp > 65535)
    5e68:	fe 01       	movw	r30, r28
    5e6a:	eb 57       	subi	r30, 0x7B	; 123
    5e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6e:	60 81       	ld	r22, Z
    5e70:	71 81       	ldd	r23, Z+1	; 0x01
    5e72:	82 81       	ldd	r24, Z+2	; 0x02
    5e74:	93 81       	ldd	r25, Z+3	; 0x03
    5e76:	20 e0       	ldi	r18, 0x00	; 0
    5e78:	3f ef       	ldi	r19, 0xFF	; 255
    5e7a:	4f e7       	ldi	r20, 0x7F	; 127
    5e7c:	57 e4       	ldi	r21, 0x47	; 71
    5e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5e82:	18 16       	cp	r1, r24
    5e84:	0c f0       	brlt	.+2      	; 0x5e88 <HLCD_displayChar+0x1dc>
    5e86:	43 c0       	rjmp	.+134    	; 0x5f0e <HLCD_displayChar+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e88:	fe 01       	movw	r30, r28
    5e8a:	e7 57       	subi	r30, 0x77	; 119
    5e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e8e:	60 81       	ld	r22, Z
    5e90:	71 81       	ldd	r23, Z+1	; 0x01
    5e92:	82 81       	ldd	r24, Z+2	; 0x02
    5e94:	93 81       	ldd	r25, Z+3	; 0x03
    5e96:	20 e0       	ldi	r18, 0x00	; 0
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	40 e2       	ldi	r20, 0x20	; 32
    5e9c:	51 e4       	ldi	r21, 0x41	; 65
    5e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ea2:	dc 01       	movw	r26, r24
    5ea4:	cb 01       	movw	r24, r22
    5ea6:	8e 01       	movw	r16, r28
    5ea8:	0d 57       	subi	r16, 0x7D	; 125
    5eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    5eac:	bc 01       	movw	r22, r24
    5eae:	cd 01       	movw	r24, r26
    5eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eb4:	dc 01       	movw	r26, r24
    5eb6:	cb 01       	movw	r24, r22
    5eb8:	f8 01       	movw	r30, r16
    5eba:	91 83       	std	Z+1, r25	; 0x01
    5ebc:	80 83       	st	Z, r24
    5ebe:	1f c0       	rjmp	.+62     	; 0x5efe <HLCD_displayChar+0x252>
    5ec0:	fe 01       	movw	r30, r28
    5ec2:	ef 57       	subi	r30, 0x7F	; 127
    5ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec6:	88 ec       	ldi	r24, 0xC8	; 200
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	91 83       	std	Z+1, r25	; 0x01
    5ecc:	80 83       	st	Z, r24
    5ece:	fe 01       	movw	r30, r28
    5ed0:	ef 57       	subi	r30, 0x7F	; 127
    5ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed4:	80 81       	ld	r24, Z
    5ed6:	91 81       	ldd	r25, Z+1	; 0x01
    5ed8:	01 97       	sbiw	r24, 0x01	; 1
    5eda:	f1 f7       	brne	.-4      	; 0x5ed8 <HLCD_displayChar+0x22c>
    5edc:	fe 01       	movw	r30, r28
    5ede:	ef 57       	subi	r30, 0x7F	; 127
    5ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee2:	91 83       	std	Z+1, r25	; 0x01
    5ee4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ee6:	de 01       	movw	r26, r28
    5ee8:	ad 57       	subi	r26, 0x7D	; 125
    5eea:	bf 4f       	sbci	r27, 0xFF	; 255
    5eec:	fe 01       	movw	r30, r28
    5eee:	ed 57       	subi	r30, 0x7D	; 125
    5ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ef2:	80 81       	ld	r24, Z
    5ef4:	91 81       	ldd	r25, Z+1	; 0x01
    5ef6:	01 97       	sbiw	r24, 0x01	; 1
    5ef8:	11 96       	adiw	r26, 0x01	; 1
    5efa:	9c 93       	st	X, r25
    5efc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5efe:	fe 01       	movw	r30, r28
    5f00:	ed 57       	subi	r30, 0x7D	; 125
    5f02:	ff 4f       	sbci	r31, 0xFF	; 255
    5f04:	80 81       	ld	r24, Z
    5f06:	91 81       	ldd	r25, Z+1	; 0x01
    5f08:	00 97       	sbiw	r24, 0x00	; 0
    5f0a:	d1 f6       	brne	.-76     	; 0x5ec0 <HLCD_displayChar+0x214>
    5f0c:	28 c0       	rjmp	.+80     	; 0x5f5e <HLCD_displayChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f0e:	8e 01       	movw	r16, r28
    5f10:	0d 57       	subi	r16, 0x7D	; 125
    5f12:	1f 4f       	sbci	r17, 0xFF	; 255
    5f14:	fe 01       	movw	r30, r28
    5f16:	eb 57       	subi	r30, 0x7B	; 123
    5f18:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1a:	60 81       	ld	r22, Z
    5f1c:	71 81       	ldd	r23, Z+1	; 0x01
    5f1e:	82 81       	ldd	r24, Z+2	; 0x02
    5f20:	93 81       	ldd	r25, Z+3	; 0x03
    5f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	f8 01       	movw	r30, r16
    5f2c:	91 83       	std	Z+1, r25	; 0x01
    5f2e:	80 83       	st	Z, r24
    5f30:	de 01       	movw	r26, r28
    5f32:	a1 58       	subi	r26, 0x81	; 129
    5f34:	bf 4f       	sbci	r27, 0xFF	; 255
    5f36:	fe 01       	movw	r30, r28
    5f38:	ed 57       	subi	r30, 0x7D	; 125
    5f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f3c:	80 81       	ld	r24, Z
    5f3e:	91 81       	ldd	r25, Z+1	; 0x01
    5f40:	11 96       	adiw	r26, 0x01	; 1
    5f42:	9c 93       	st	X, r25
    5f44:	8e 93       	st	-X, r24
    5f46:	fe 01       	movw	r30, r28
    5f48:	e1 58       	subi	r30, 0x81	; 129
    5f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4c:	80 81       	ld	r24, Z
    5f4e:	91 81       	ldd	r25, Z+1	; 0x01
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	f1 f7       	brne	.-4      	; 0x5f50 <HLCD_displayChar+0x2a4>
    5f54:	fe 01       	movw	r30, r28
    5f56:	e1 58       	subi	r30, 0x81	; 129
    5f58:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5a:	91 83       	std	Z+1, r25	; 0x01
    5f5c:	80 83       	st	Z, r24

		_delay_ms(30);

		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    5f5e:	fe 01       	movw	r30, r28
    5f60:	e5 56       	subi	r30, 0x65	; 101
    5f62:	ff 4f       	sbci	r31, 0xFF	; 255
    5f64:	01 90       	ld	r0, Z+
    5f66:	f0 81       	ld	r31, Z
    5f68:	e0 2d       	mov	r30, r0
    5f6a:	80 81       	ld	r24, Z
    5f6c:	88 23       	and	r24, r24
    5f6e:	09 f0       	breq	.+2      	; 0x5f72 <HLCD_displayChar+0x2c6>
    5f70:	3d c4       	rjmp	.+2170   	; 0x67ec <HLCD_displayChar+0xb40>
		{
			/* TODO : Handling The 4bit Mode */

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    5f72:	fe 01       	movw	r30, r28
    5f74:	e3 57       	subi	r30, 0x73	; 115
    5f76:	ff 4f       	sbci	r31, 0xFF	; 255
    5f78:	80 81       	ld	r24, Z
    5f7a:	88 23       	and	r24, r24
    5f7c:	59 f4       	brne	.+22     	; 0x5f94 <HLCD_displayChar+0x2e8>
    5f7e:	ce 01       	movw	r24, r28
    5f80:	89 56       	subi	r24, 0x69	; 105
    5f82:	9f 4f       	sbci	r25, 0xFF	; 255
    5f84:	61 e0       	ldi	r22, 0x01	; 1
    5f86:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    5f8a:	fe 01       	movw	r30, r28
    5f8c:	e3 57       	subi	r30, 0x73	; 115
    5f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f90:	80 83       	st	Z, r24
    5f92:	05 c0       	rjmp	.+10     	; 0x5f9e <HLCD_displayChar+0x2f2>
			else lcdRet = HLCD_NOK;
    5f94:	fe 01       	movw	r30, r28
    5f96:	e2 57       	subi	r30, 0x72	; 114
    5f98:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9a:	81 e0       	ldi	r24, 0x01	; 1
    5f9c:	80 83       	st	Z, r24
    5f9e:	fe 01       	movw	r30, r28
    5fa0:	e5 58       	subi	r30, 0x85	; 133
    5fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa4:	80 e0       	ldi	r24, 0x00	; 0
    5fa6:	90 e0       	ldi	r25, 0x00	; 0
    5fa8:	a0 ef       	ldi	r26, 0xF0	; 240
    5faa:	b1 e4       	ldi	r27, 0x41	; 65
    5fac:	80 83       	st	Z, r24
    5fae:	91 83       	std	Z+1, r25	; 0x01
    5fb0:	a2 83       	std	Z+2, r26	; 0x02
    5fb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fb4:	8e 01       	movw	r16, r28
    5fb6:	09 58       	subi	r16, 0x89	; 137
    5fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    5fba:	fe 01       	movw	r30, r28
    5fbc:	e5 58       	subi	r30, 0x85	; 133
    5fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc0:	60 81       	ld	r22, Z
    5fc2:	71 81       	ldd	r23, Z+1	; 0x01
    5fc4:	82 81       	ldd	r24, Z+2	; 0x02
    5fc6:	93 81       	ldd	r25, Z+3	; 0x03
    5fc8:	20 e0       	ldi	r18, 0x00	; 0
    5fca:	30 e0       	ldi	r19, 0x00	; 0
    5fcc:	4a ef       	ldi	r20, 0xFA	; 250
    5fce:	54 e4       	ldi	r21, 0x44	; 68
    5fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fd4:	dc 01       	movw	r26, r24
    5fd6:	cb 01       	movw	r24, r22
    5fd8:	f8 01       	movw	r30, r16
    5fda:	80 83       	st	Z, r24
    5fdc:	91 83       	std	Z+1, r25	; 0x01
    5fde:	a2 83       	std	Z+2, r26	; 0x02
    5fe0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5fe2:	fe 01       	movw	r30, r28
    5fe4:	e9 58       	subi	r30, 0x89	; 137
    5fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    5fe8:	60 81       	ld	r22, Z
    5fea:	71 81       	ldd	r23, Z+1	; 0x01
    5fec:	82 81       	ldd	r24, Z+2	; 0x02
    5fee:	93 81       	ldd	r25, Z+3	; 0x03
    5ff0:	20 e0       	ldi	r18, 0x00	; 0
    5ff2:	30 e0       	ldi	r19, 0x00	; 0
    5ff4:	40 e8       	ldi	r20, 0x80	; 128
    5ff6:	5f e3       	ldi	r21, 0x3F	; 63
    5ff8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5ffc:	88 23       	and	r24, r24
    5ffe:	44 f4       	brge	.+16     	; 0x6010 <HLCD_displayChar+0x364>
		__ticks = 1;
    6000:	fe 01       	movw	r30, r28
    6002:	eb 58       	subi	r30, 0x8B	; 139
    6004:	ff 4f       	sbci	r31, 0xFF	; 255
    6006:	81 e0       	ldi	r24, 0x01	; 1
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	91 83       	std	Z+1, r25	; 0x01
    600c:	80 83       	st	Z, r24
    600e:	64 c0       	rjmp	.+200    	; 0x60d8 <HLCD_displayChar+0x42c>
	else if (__tmp > 65535)
    6010:	fe 01       	movw	r30, r28
    6012:	e9 58       	subi	r30, 0x89	; 137
    6014:	ff 4f       	sbci	r31, 0xFF	; 255
    6016:	60 81       	ld	r22, Z
    6018:	71 81       	ldd	r23, Z+1	; 0x01
    601a:	82 81       	ldd	r24, Z+2	; 0x02
    601c:	93 81       	ldd	r25, Z+3	; 0x03
    601e:	20 e0       	ldi	r18, 0x00	; 0
    6020:	3f ef       	ldi	r19, 0xFF	; 255
    6022:	4f e7       	ldi	r20, 0x7F	; 127
    6024:	57 e4       	ldi	r21, 0x47	; 71
    6026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    602a:	18 16       	cp	r1, r24
    602c:	0c f0       	brlt	.+2      	; 0x6030 <HLCD_displayChar+0x384>
    602e:	43 c0       	rjmp	.+134    	; 0x60b6 <HLCD_displayChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6030:	fe 01       	movw	r30, r28
    6032:	e5 58       	subi	r30, 0x85	; 133
    6034:	ff 4f       	sbci	r31, 0xFF	; 255
    6036:	60 81       	ld	r22, Z
    6038:	71 81       	ldd	r23, Z+1	; 0x01
    603a:	82 81       	ldd	r24, Z+2	; 0x02
    603c:	93 81       	ldd	r25, Z+3	; 0x03
    603e:	20 e0       	ldi	r18, 0x00	; 0
    6040:	30 e0       	ldi	r19, 0x00	; 0
    6042:	40 e2       	ldi	r20, 0x20	; 32
    6044:	51 e4       	ldi	r21, 0x41	; 65
    6046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    604a:	dc 01       	movw	r26, r24
    604c:	cb 01       	movw	r24, r22
    604e:	8e 01       	movw	r16, r28
    6050:	0b 58       	subi	r16, 0x8B	; 139
    6052:	1f 4f       	sbci	r17, 0xFF	; 255
    6054:	bc 01       	movw	r22, r24
    6056:	cd 01       	movw	r24, r26
    6058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    605c:	dc 01       	movw	r26, r24
    605e:	cb 01       	movw	r24, r22
    6060:	f8 01       	movw	r30, r16
    6062:	91 83       	std	Z+1, r25	; 0x01
    6064:	80 83       	st	Z, r24
    6066:	1f c0       	rjmp	.+62     	; 0x60a6 <HLCD_displayChar+0x3fa>
    6068:	fe 01       	movw	r30, r28
    606a:	ed 58       	subi	r30, 0x8D	; 141
    606c:	ff 4f       	sbci	r31, 0xFF	; 255
    606e:	88 ec       	ldi	r24, 0xC8	; 200
    6070:	90 e0       	ldi	r25, 0x00	; 0
    6072:	91 83       	std	Z+1, r25	; 0x01
    6074:	80 83       	st	Z, r24
    6076:	fe 01       	movw	r30, r28
    6078:	ed 58       	subi	r30, 0x8D	; 141
    607a:	ff 4f       	sbci	r31, 0xFF	; 255
    607c:	80 81       	ld	r24, Z
    607e:	91 81       	ldd	r25, Z+1	; 0x01
    6080:	01 97       	sbiw	r24, 0x01	; 1
    6082:	f1 f7       	brne	.-4      	; 0x6080 <HLCD_displayChar+0x3d4>
    6084:	fe 01       	movw	r30, r28
    6086:	ed 58       	subi	r30, 0x8D	; 141
    6088:	ff 4f       	sbci	r31, 0xFF	; 255
    608a:	91 83       	std	Z+1, r25	; 0x01
    608c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    608e:	de 01       	movw	r26, r28
    6090:	ab 58       	subi	r26, 0x8B	; 139
    6092:	bf 4f       	sbci	r27, 0xFF	; 255
    6094:	fe 01       	movw	r30, r28
    6096:	eb 58       	subi	r30, 0x8B	; 139
    6098:	ff 4f       	sbci	r31, 0xFF	; 255
    609a:	80 81       	ld	r24, Z
    609c:	91 81       	ldd	r25, Z+1	; 0x01
    609e:	01 97       	sbiw	r24, 0x01	; 1
    60a0:	11 96       	adiw	r26, 0x01	; 1
    60a2:	9c 93       	st	X, r25
    60a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60a6:	fe 01       	movw	r30, r28
    60a8:	eb 58       	subi	r30, 0x8B	; 139
    60aa:	ff 4f       	sbci	r31, 0xFF	; 255
    60ac:	80 81       	ld	r24, Z
    60ae:	91 81       	ldd	r25, Z+1	; 0x01
    60b0:	00 97       	sbiw	r24, 0x00	; 0
    60b2:	d1 f6       	brne	.-76     	; 0x6068 <HLCD_displayChar+0x3bc>
    60b4:	27 c0       	rjmp	.+78     	; 0x6104 <HLCD_displayChar+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60b6:	8e 01       	movw	r16, r28
    60b8:	0b 58       	subi	r16, 0x8B	; 139
    60ba:	1f 4f       	sbci	r17, 0xFF	; 255
    60bc:	fe 01       	movw	r30, r28
    60be:	e9 58       	subi	r30, 0x89	; 137
    60c0:	ff 4f       	sbci	r31, 0xFF	; 255
    60c2:	60 81       	ld	r22, Z
    60c4:	71 81       	ldd	r23, Z+1	; 0x01
    60c6:	82 81       	ldd	r24, Z+2	; 0x02
    60c8:	93 81       	ldd	r25, Z+3	; 0x03
    60ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ce:	dc 01       	movw	r26, r24
    60d0:	cb 01       	movw	r24, r22
    60d2:	f8 01       	movw	r30, r16
    60d4:	91 83       	std	Z+1, r25	; 0x01
    60d6:	80 83       	st	Z, r24
    60d8:	de 01       	movw	r26, r28
    60da:	af 58       	subi	r26, 0x8F	; 143
    60dc:	bf 4f       	sbci	r27, 0xFF	; 255
    60de:	fe 01       	movw	r30, r28
    60e0:	eb 58       	subi	r30, 0x8B	; 139
    60e2:	ff 4f       	sbci	r31, 0xFF	; 255
    60e4:	80 81       	ld	r24, Z
    60e6:	91 81       	ldd	r25, Z+1	; 0x01
    60e8:	8d 93       	st	X+, r24
    60ea:	9c 93       	st	X, r25
    60ec:	fe 01       	movw	r30, r28
    60ee:	ef 58       	subi	r30, 0x8F	; 143
    60f0:	ff 4f       	sbci	r31, 0xFF	; 255
    60f2:	80 81       	ld	r24, Z
    60f4:	91 81       	ldd	r25, Z+1	; 0x01
    60f6:	01 97       	sbiw	r24, 0x01	; 1
    60f8:	f1 f7       	brne	.-4      	; 0x60f6 <HLCD_displayChar+0x44a>
    60fa:	fe 01       	movw	r30, r28
    60fc:	ef 58       	subi	r30, 0x8F	; 143
    60fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6100:	91 83       	std	Z+1, r25	; 0x01
    6102:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= Copy_u8Char;

			//PORTB_REG = (PORTB_REG & 0x0F) | (Copy_u8Char & 0xF0);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char>>4);
    6104:	fe 01       	movw	r30, r28
    6106:	e5 56       	subi	r30, 0x65	; 101
    6108:	ff 4f       	sbci	r31, 0xFF	; 255
    610a:	01 90       	ld	r0, Z+
    610c:	f0 81       	ld	r31, Z
    610e:	e0 2d       	mov	r30, r0
    6110:	22 81       	ldd	r18, Z+2	; 0x02
    6112:	fe 01       	movw	r30, r28
    6114:	e3 56       	subi	r30, 0x63	; 99
    6116:	ff 4f       	sbci	r31, 0xFF	; 255
    6118:	80 81       	ld	r24, Z
    611a:	98 2f       	mov	r25, r24
    611c:	92 95       	swap	r25
    611e:	9f 70       	andi	r25, 0x0F	; 15
    6120:	82 2f       	mov	r24, r18
    6122:	69 2f       	mov	r22, r25
    6124:	0e 94 7f 11 	call	0x22fe	; 0x22fe <GPIO_set4msbValue>
    6128:	fe 01       	movw	r30, r28
    612a:	e3 59       	subi	r30, 0x93	; 147
    612c:	ff 4f       	sbci	r31, 0xFF	; 255
    612e:	80 e0       	ldi	r24, 0x00	; 0
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	a0 ef       	ldi	r26, 0xF0	; 240
    6134:	b1 e4       	ldi	r27, 0x41	; 65
    6136:	80 83       	st	Z, r24
    6138:	91 83       	std	Z+1, r25	; 0x01
    613a:	a2 83       	std	Z+2, r26	; 0x02
    613c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    613e:	8e 01       	movw	r16, r28
    6140:	07 59       	subi	r16, 0x97	; 151
    6142:	1f 4f       	sbci	r17, 0xFF	; 255
    6144:	fe 01       	movw	r30, r28
    6146:	e3 59       	subi	r30, 0x93	; 147
    6148:	ff 4f       	sbci	r31, 0xFF	; 255
    614a:	60 81       	ld	r22, Z
    614c:	71 81       	ldd	r23, Z+1	; 0x01
    614e:	82 81       	ldd	r24, Z+2	; 0x02
    6150:	93 81       	ldd	r25, Z+3	; 0x03
    6152:	20 e0       	ldi	r18, 0x00	; 0
    6154:	30 e0       	ldi	r19, 0x00	; 0
    6156:	4a ef       	ldi	r20, 0xFA	; 250
    6158:	54 e4       	ldi	r21, 0x44	; 68
    615a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    615e:	dc 01       	movw	r26, r24
    6160:	cb 01       	movw	r24, r22
    6162:	f8 01       	movw	r30, r16
    6164:	80 83       	st	Z, r24
    6166:	91 83       	std	Z+1, r25	; 0x01
    6168:	a2 83       	std	Z+2, r26	; 0x02
    616a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    616c:	fe 01       	movw	r30, r28
    616e:	e7 59       	subi	r30, 0x97	; 151
    6170:	ff 4f       	sbci	r31, 0xFF	; 255
    6172:	60 81       	ld	r22, Z
    6174:	71 81       	ldd	r23, Z+1	; 0x01
    6176:	82 81       	ldd	r24, Z+2	; 0x02
    6178:	93 81       	ldd	r25, Z+3	; 0x03
    617a:	20 e0       	ldi	r18, 0x00	; 0
    617c:	30 e0       	ldi	r19, 0x00	; 0
    617e:	40 e8       	ldi	r20, 0x80	; 128
    6180:	5f e3       	ldi	r21, 0x3F	; 63
    6182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6186:	88 23       	and	r24, r24
    6188:	44 f4       	brge	.+16     	; 0x619a <HLCD_displayChar+0x4ee>
		__ticks = 1;
    618a:	fe 01       	movw	r30, r28
    618c:	e9 59       	subi	r30, 0x99	; 153
    618e:	ff 4f       	sbci	r31, 0xFF	; 255
    6190:	81 e0       	ldi	r24, 0x01	; 1
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	91 83       	std	Z+1, r25	; 0x01
    6196:	80 83       	st	Z, r24
    6198:	64 c0       	rjmp	.+200    	; 0x6262 <HLCD_displayChar+0x5b6>
	else if (__tmp > 65535)
    619a:	fe 01       	movw	r30, r28
    619c:	e7 59       	subi	r30, 0x97	; 151
    619e:	ff 4f       	sbci	r31, 0xFF	; 255
    61a0:	60 81       	ld	r22, Z
    61a2:	71 81       	ldd	r23, Z+1	; 0x01
    61a4:	82 81       	ldd	r24, Z+2	; 0x02
    61a6:	93 81       	ldd	r25, Z+3	; 0x03
    61a8:	20 e0       	ldi	r18, 0x00	; 0
    61aa:	3f ef       	ldi	r19, 0xFF	; 255
    61ac:	4f e7       	ldi	r20, 0x7F	; 127
    61ae:	57 e4       	ldi	r21, 0x47	; 71
    61b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    61b4:	18 16       	cp	r1, r24
    61b6:	0c f0       	brlt	.+2      	; 0x61ba <HLCD_displayChar+0x50e>
    61b8:	43 c0       	rjmp	.+134    	; 0x6240 <HLCD_displayChar+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61ba:	fe 01       	movw	r30, r28
    61bc:	e3 59       	subi	r30, 0x93	; 147
    61be:	ff 4f       	sbci	r31, 0xFF	; 255
    61c0:	60 81       	ld	r22, Z
    61c2:	71 81       	ldd	r23, Z+1	; 0x01
    61c4:	82 81       	ldd	r24, Z+2	; 0x02
    61c6:	93 81       	ldd	r25, Z+3	; 0x03
    61c8:	20 e0       	ldi	r18, 0x00	; 0
    61ca:	30 e0       	ldi	r19, 0x00	; 0
    61cc:	40 e2       	ldi	r20, 0x20	; 32
    61ce:	51 e4       	ldi	r21, 0x41	; 65
    61d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61d4:	dc 01       	movw	r26, r24
    61d6:	cb 01       	movw	r24, r22
    61d8:	8e 01       	movw	r16, r28
    61da:	09 59       	subi	r16, 0x99	; 153
    61dc:	1f 4f       	sbci	r17, 0xFF	; 255
    61de:	bc 01       	movw	r22, r24
    61e0:	cd 01       	movw	r24, r26
    61e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61e6:	dc 01       	movw	r26, r24
    61e8:	cb 01       	movw	r24, r22
    61ea:	f8 01       	movw	r30, r16
    61ec:	91 83       	std	Z+1, r25	; 0x01
    61ee:	80 83       	st	Z, r24
    61f0:	1f c0       	rjmp	.+62     	; 0x6230 <HLCD_displayChar+0x584>
    61f2:	fe 01       	movw	r30, r28
    61f4:	eb 59       	subi	r30, 0x9B	; 155
    61f6:	ff 4f       	sbci	r31, 0xFF	; 255
    61f8:	88 ec       	ldi	r24, 0xC8	; 200
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	91 83       	std	Z+1, r25	; 0x01
    61fe:	80 83       	st	Z, r24
    6200:	fe 01       	movw	r30, r28
    6202:	eb 59       	subi	r30, 0x9B	; 155
    6204:	ff 4f       	sbci	r31, 0xFF	; 255
    6206:	80 81       	ld	r24, Z
    6208:	91 81       	ldd	r25, Z+1	; 0x01
    620a:	01 97       	sbiw	r24, 0x01	; 1
    620c:	f1 f7       	brne	.-4      	; 0x620a <HLCD_displayChar+0x55e>
    620e:	fe 01       	movw	r30, r28
    6210:	eb 59       	subi	r30, 0x9B	; 155
    6212:	ff 4f       	sbci	r31, 0xFF	; 255
    6214:	91 83       	std	Z+1, r25	; 0x01
    6216:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6218:	de 01       	movw	r26, r28
    621a:	a9 59       	subi	r26, 0x99	; 153
    621c:	bf 4f       	sbci	r27, 0xFF	; 255
    621e:	fe 01       	movw	r30, r28
    6220:	e9 59       	subi	r30, 0x99	; 153
    6222:	ff 4f       	sbci	r31, 0xFF	; 255
    6224:	80 81       	ld	r24, Z
    6226:	91 81       	ldd	r25, Z+1	; 0x01
    6228:	01 97       	sbiw	r24, 0x01	; 1
    622a:	11 96       	adiw	r26, 0x01	; 1
    622c:	9c 93       	st	X, r25
    622e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6230:	fe 01       	movw	r30, r28
    6232:	e9 59       	subi	r30, 0x99	; 153
    6234:	ff 4f       	sbci	r31, 0xFF	; 255
    6236:	80 81       	ld	r24, Z
    6238:	91 81       	ldd	r25, Z+1	; 0x01
    623a:	00 97       	sbiw	r24, 0x00	; 0
    623c:	d1 f6       	brne	.-76     	; 0x61f2 <HLCD_displayChar+0x546>
    623e:	28 c0       	rjmp	.+80     	; 0x6290 <HLCD_displayChar+0x5e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6240:	8e 01       	movw	r16, r28
    6242:	09 59       	subi	r16, 0x99	; 153
    6244:	1f 4f       	sbci	r17, 0xFF	; 255
    6246:	fe 01       	movw	r30, r28
    6248:	e7 59       	subi	r30, 0x97	; 151
    624a:	ff 4f       	sbci	r31, 0xFF	; 255
    624c:	60 81       	ld	r22, Z
    624e:	71 81       	ldd	r23, Z+1	; 0x01
    6250:	82 81       	ldd	r24, Z+2	; 0x02
    6252:	93 81       	ldd	r25, Z+3	; 0x03
    6254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6258:	dc 01       	movw	r26, r24
    625a:	cb 01       	movw	r24, r22
    625c:	f8 01       	movw	r30, r16
    625e:	91 83       	std	Z+1, r25	; 0x01
    6260:	80 83       	st	Z, r24
    6262:	de 01       	movw	r26, r28
    6264:	ad 59       	subi	r26, 0x9D	; 157
    6266:	bf 4f       	sbci	r27, 0xFF	; 255
    6268:	fe 01       	movw	r30, r28
    626a:	e9 59       	subi	r30, 0x99	; 153
    626c:	ff 4f       	sbci	r31, 0xFF	; 255
    626e:	80 81       	ld	r24, Z
    6270:	91 81       	ldd	r25, Z+1	; 0x01
    6272:	11 96       	adiw	r26, 0x01	; 1
    6274:	9c 93       	st	X, r25
    6276:	8e 93       	st	-X, r24
    6278:	fe 01       	movw	r30, r28
    627a:	ed 59       	subi	r30, 0x9D	; 157
    627c:	ff 4f       	sbci	r31, 0xFF	; 255
    627e:	80 81       	ld	r24, Z
    6280:	91 81       	ldd	r25, Z+1	; 0x01
    6282:	01 97       	sbiw	r24, 0x01	; 1
    6284:	f1 f7       	brne	.-4      	; 0x6282 <HLCD_displayChar+0x5d6>
    6286:	fe 01       	movw	r30, r28
    6288:	ed 59       	subi	r30, 0x9D	; 157
    628a:	ff 4f       	sbci	r31, 0xFF	; 255
    628c:	91 83       	std	Z+1, r25	; 0x01
    628e:	80 83       	st	Z, r24


			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    6290:	fe 01       	movw	r30, r28
    6292:	e3 57       	subi	r30, 0x73	; 115
    6294:	ff 4f       	sbci	r31, 0xFF	; 255
    6296:	80 81       	ld	r24, Z
    6298:	88 23       	and	r24, r24
    629a:	59 f4       	brne	.+22     	; 0x62b2 <HLCD_displayChar+0x606>
    629c:	ce 01       	movw	r24, r28
    629e:	89 56       	subi	r24, 0x69	; 105
    62a0:	9f 4f       	sbci	r25, 0xFF	; 255
    62a2:	60 e0       	ldi	r22, 0x00	; 0
    62a4:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    62a8:	fe 01       	movw	r30, r28
    62aa:	e3 57       	subi	r30, 0x73	; 115
    62ac:	ff 4f       	sbci	r31, 0xFF	; 255
    62ae:	80 83       	st	Z, r24
    62b0:	05 c0       	rjmp	.+10     	; 0x62bc <HLCD_displayChar+0x610>
			else lcdRet = HLCD_NOK;
    62b2:	fe 01       	movw	r30, r28
    62b4:	e2 57       	subi	r30, 0x72	; 114
    62b6:	ff 4f       	sbci	r31, 0xFF	; 255
    62b8:	81 e0       	ldi	r24, 0x01	; 1
    62ba:	80 83       	st	Z, r24
    62bc:	fe 01       	movw	r30, r28
    62be:	e1 5a       	subi	r30, 0xA1	; 161
    62c0:	ff 4f       	sbci	r31, 0xFF	; 255
    62c2:	80 e0       	ldi	r24, 0x00	; 0
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	a0 ef       	ldi	r26, 0xF0	; 240
    62c8:	b1 e4       	ldi	r27, 0x41	; 65
    62ca:	80 83       	st	Z, r24
    62cc:	91 83       	std	Z+1, r25	; 0x01
    62ce:	a2 83       	std	Z+2, r26	; 0x02
    62d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62d2:	8e 01       	movw	r16, r28
    62d4:	05 5a       	subi	r16, 0xA5	; 165
    62d6:	1f 4f       	sbci	r17, 0xFF	; 255
    62d8:	fe 01       	movw	r30, r28
    62da:	e1 5a       	subi	r30, 0xA1	; 161
    62dc:	ff 4f       	sbci	r31, 0xFF	; 255
    62de:	60 81       	ld	r22, Z
    62e0:	71 81       	ldd	r23, Z+1	; 0x01
    62e2:	82 81       	ldd	r24, Z+2	; 0x02
    62e4:	93 81       	ldd	r25, Z+3	; 0x03
    62e6:	20 e0       	ldi	r18, 0x00	; 0
    62e8:	30 e0       	ldi	r19, 0x00	; 0
    62ea:	4a ef       	ldi	r20, 0xFA	; 250
    62ec:	54 e4       	ldi	r21, 0x44	; 68
    62ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62f2:	dc 01       	movw	r26, r24
    62f4:	cb 01       	movw	r24, r22
    62f6:	f8 01       	movw	r30, r16
    62f8:	80 83       	st	Z, r24
    62fa:	91 83       	std	Z+1, r25	; 0x01
    62fc:	a2 83       	std	Z+2, r26	; 0x02
    62fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6300:	fe 01       	movw	r30, r28
    6302:	e5 5a       	subi	r30, 0xA5	; 165
    6304:	ff 4f       	sbci	r31, 0xFF	; 255
    6306:	60 81       	ld	r22, Z
    6308:	71 81       	ldd	r23, Z+1	; 0x01
    630a:	82 81       	ldd	r24, Z+2	; 0x02
    630c:	93 81       	ldd	r25, Z+3	; 0x03
    630e:	20 e0       	ldi	r18, 0x00	; 0
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	40 e8       	ldi	r20, 0x80	; 128
    6314:	5f e3       	ldi	r21, 0x3F	; 63
    6316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    631a:	88 23       	and	r24, r24
    631c:	44 f4       	brge	.+16     	; 0x632e <HLCD_displayChar+0x682>
		__ticks = 1;
    631e:	fe 01       	movw	r30, r28
    6320:	e7 5a       	subi	r30, 0xA7	; 167
    6322:	ff 4f       	sbci	r31, 0xFF	; 255
    6324:	81 e0       	ldi	r24, 0x01	; 1
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	91 83       	std	Z+1, r25	; 0x01
    632a:	80 83       	st	Z, r24
    632c:	64 c0       	rjmp	.+200    	; 0x63f6 <HLCD_displayChar+0x74a>
	else if (__tmp > 65535)
    632e:	fe 01       	movw	r30, r28
    6330:	e5 5a       	subi	r30, 0xA5	; 165
    6332:	ff 4f       	sbci	r31, 0xFF	; 255
    6334:	60 81       	ld	r22, Z
    6336:	71 81       	ldd	r23, Z+1	; 0x01
    6338:	82 81       	ldd	r24, Z+2	; 0x02
    633a:	93 81       	ldd	r25, Z+3	; 0x03
    633c:	20 e0       	ldi	r18, 0x00	; 0
    633e:	3f ef       	ldi	r19, 0xFF	; 255
    6340:	4f e7       	ldi	r20, 0x7F	; 127
    6342:	57 e4       	ldi	r21, 0x47	; 71
    6344:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6348:	18 16       	cp	r1, r24
    634a:	0c f0       	brlt	.+2      	; 0x634e <HLCD_displayChar+0x6a2>
    634c:	43 c0       	rjmp	.+134    	; 0x63d4 <HLCD_displayChar+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    634e:	fe 01       	movw	r30, r28
    6350:	e1 5a       	subi	r30, 0xA1	; 161
    6352:	ff 4f       	sbci	r31, 0xFF	; 255
    6354:	60 81       	ld	r22, Z
    6356:	71 81       	ldd	r23, Z+1	; 0x01
    6358:	82 81       	ldd	r24, Z+2	; 0x02
    635a:	93 81       	ldd	r25, Z+3	; 0x03
    635c:	20 e0       	ldi	r18, 0x00	; 0
    635e:	30 e0       	ldi	r19, 0x00	; 0
    6360:	40 e2       	ldi	r20, 0x20	; 32
    6362:	51 e4       	ldi	r21, 0x41	; 65
    6364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6368:	dc 01       	movw	r26, r24
    636a:	cb 01       	movw	r24, r22
    636c:	8e 01       	movw	r16, r28
    636e:	07 5a       	subi	r16, 0xA7	; 167
    6370:	1f 4f       	sbci	r17, 0xFF	; 255
    6372:	bc 01       	movw	r22, r24
    6374:	cd 01       	movw	r24, r26
    6376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    637a:	dc 01       	movw	r26, r24
    637c:	cb 01       	movw	r24, r22
    637e:	f8 01       	movw	r30, r16
    6380:	91 83       	std	Z+1, r25	; 0x01
    6382:	80 83       	st	Z, r24
    6384:	1f c0       	rjmp	.+62     	; 0x63c4 <HLCD_displayChar+0x718>
    6386:	fe 01       	movw	r30, r28
    6388:	e9 5a       	subi	r30, 0xA9	; 169
    638a:	ff 4f       	sbci	r31, 0xFF	; 255
    638c:	88 ec       	ldi	r24, 0xC8	; 200
    638e:	90 e0       	ldi	r25, 0x00	; 0
    6390:	91 83       	std	Z+1, r25	; 0x01
    6392:	80 83       	st	Z, r24
    6394:	fe 01       	movw	r30, r28
    6396:	e9 5a       	subi	r30, 0xA9	; 169
    6398:	ff 4f       	sbci	r31, 0xFF	; 255
    639a:	80 81       	ld	r24, Z
    639c:	91 81       	ldd	r25, Z+1	; 0x01
    639e:	01 97       	sbiw	r24, 0x01	; 1
    63a0:	f1 f7       	brne	.-4      	; 0x639e <HLCD_displayChar+0x6f2>
    63a2:	fe 01       	movw	r30, r28
    63a4:	e9 5a       	subi	r30, 0xA9	; 169
    63a6:	ff 4f       	sbci	r31, 0xFF	; 255
    63a8:	91 83       	std	Z+1, r25	; 0x01
    63aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63ac:	de 01       	movw	r26, r28
    63ae:	a7 5a       	subi	r26, 0xA7	; 167
    63b0:	bf 4f       	sbci	r27, 0xFF	; 255
    63b2:	fe 01       	movw	r30, r28
    63b4:	e7 5a       	subi	r30, 0xA7	; 167
    63b6:	ff 4f       	sbci	r31, 0xFF	; 255
    63b8:	80 81       	ld	r24, Z
    63ba:	91 81       	ldd	r25, Z+1	; 0x01
    63bc:	01 97       	sbiw	r24, 0x01	; 1
    63be:	11 96       	adiw	r26, 0x01	; 1
    63c0:	9c 93       	st	X, r25
    63c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63c4:	fe 01       	movw	r30, r28
    63c6:	e7 5a       	subi	r30, 0xA7	; 167
    63c8:	ff 4f       	sbci	r31, 0xFF	; 255
    63ca:	80 81       	ld	r24, Z
    63cc:	91 81       	ldd	r25, Z+1	; 0x01
    63ce:	00 97       	sbiw	r24, 0x00	; 0
    63d0:	d1 f6       	brne	.-76     	; 0x6386 <HLCD_displayChar+0x6da>
    63d2:	28 c0       	rjmp	.+80     	; 0x6424 <HLCD_displayChar+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63d4:	8e 01       	movw	r16, r28
    63d6:	07 5a       	subi	r16, 0xA7	; 167
    63d8:	1f 4f       	sbci	r17, 0xFF	; 255
    63da:	fe 01       	movw	r30, r28
    63dc:	e5 5a       	subi	r30, 0xA5	; 165
    63de:	ff 4f       	sbci	r31, 0xFF	; 255
    63e0:	60 81       	ld	r22, Z
    63e2:	71 81       	ldd	r23, Z+1	; 0x01
    63e4:	82 81       	ldd	r24, Z+2	; 0x02
    63e6:	93 81       	ldd	r25, Z+3	; 0x03
    63e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63ec:	dc 01       	movw	r26, r24
    63ee:	cb 01       	movw	r24, r22
    63f0:	f8 01       	movw	r30, r16
    63f2:	91 83       	std	Z+1, r25	; 0x01
    63f4:	80 83       	st	Z, r24
    63f6:	de 01       	movw	r26, r28
    63f8:	ab 5a       	subi	r26, 0xAB	; 171
    63fa:	bf 4f       	sbci	r27, 0xFF	; 255
    63fc:	fe 01       	movw	r30, r28
    63fe:	e7 5a       	subi	r30, 0xA7	; 167
    6400:	ff 4f       	sbci	r31, 0xFF	; 255
    6402:	80 81       	ld	r24, Z
    6404:	91 81       	ldd	r25, Z+1	; 0x01
    6406:	11 96       	adiw	r26, 0x01	; 1
    6408:	9c 93       	st	X, r25
    640a:	8e 93       	st	-X, r24
    640c:	fe 01       	movw	r30, r28
    640e:	eb 5a       	subi	r30, 0xAB	; 171
    6410:	ff 4f       	sbci	r31, 0xFF	; 255
    6412:	80 81       	ld	r24, Z
    6414:	91 81       	ldd	r25, Z+1	; 0x01
    6416:	01 97       	sbiw	r24, 0x01	; 1
    6418:	f1 f7       	brne	.-4      	; 0x6416 <HLCD_displayChar+0x76a>
    641a:	fe 01       	movw	r30, r28
    641c:	eb 5a       	subi	r30, 0xAB	; 171
    641e:	ff 4f       	sbci	r31, 0xFF	; 255
    6420:	91 83       	std	Z+1, r25	; 0x01
    6422:	80 83       	st	Z, r24

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    6424:	fe 01       	movw	r30, r28
    6426:	e3 57       	subi	r30, 0x73	; 115
    6428:	ff 4f       	sbci	r31, 0xFF	; 255
    642a:	80 81       	ld	r24, Z
    642c:	88 23       	and	r24, r24
    642e:	59 f4       	brne	.+22     	; 0x6446 <HLCD_displayChar+0x79a>
    6430:	ce 01       	movw	r24, r28
    6432:	89 56       	subi	r24, 0x69	; 105
    6434:	9f 4f       	sbci	r25, 0xFF	; 255
    6436:	61 e0       	ldi	r22, 0x01	; 1
    6438:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    643c:	fe 01       	movw	r30, r28
    643e:	e3 57       	subi	r30, 0x73	; 115
    6440:	ff 4f       	sbci	r31, 0xFF	; 255
    6442:	80 83       	st	Z, r24
    6444:	05 c0       	rjmp	.+10     	; 0x6450 <HLCD_displayChar+0x7a4>
			else lcdRet = HLCD_NOK;
    6446:	fe 01       	movw	r30, r28
    6448:	e2 57       	subi	r30, 0x72	; 114
    644a:	ff 4f       	sbci	r31, 0xFF	; 255
    644c:	81 e0       	ldi	r24, 0x01	; 1
    644e:	80 83       	st	Z, r24
    6450:	fe 01       	movw	r30, r28
    6452:	ef 5a       	subi	r30, 0xAF	; 175
    6454:	ff 4f       	sbci	r31, 0xFF	; 255
    6456:	80 e0       	ldi	r24, 0x00	; 0
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	a0 ef       	ldi	r26, 0xF0	; 240
    645c:	b1 e4       	ldi	r27, 0x41	; 65
    645e:	80 83       	st	Z, r24
    6460:	91 83       	std	Z+1, r25	; 0x01
    6462:	a2 83       	std	Z+2, r26	; 0x02
    6464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6466:	8e 01       	movw	r16, r28
    6468:	03 5b       	subi	r16, 0xB3	; 179
    646a:	1f 4f       	sbci	r17, 0xFF	; 255
    646c:	fe 01       	movw	r30, r28
    646e:	ef 5a       	subi	r30, 0xAF	; 175
    6470:	ff 4f       	sbci	r31, 0xFF	; 255
    6472:	60 81       	ld	r22, Z
    6474:	71 81       	ldd	r23, Z+1	; 0x01
    6476:	82 81       	ldd	r24, Z+2	; 0x02
    6478:	93 81       	ldd	r25, Z+3	; 0x03
    647a:	20 e0       	ldi	r18, 0x00	; 0
    647c:	30 e0       	ldi	r19, 0x00	; 0
    647e:	4a ef       	ldi	r20, 0xFA	; 250
    6480:	54 e4       	ldi	r21, 0x44	; 68
    6482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6486:	dc 01       	movw	r26, r24
    6488:	cb 01       	movw	r24, r22
    648a:	f8 01       	movw	r30, r16
    648c:	80 83       	st	Z, r24
    648e:	91 83       	std	Z+1, r25	; 0x01
    6490:	a2 83       	std	Z+2, r26	; 0x02
    6492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6494:	fe 01       	movw	r30, r28
    6496:	e3 5b       	subi	r30, 0xB3	; 179
    6498:	ff 4f       	sbci	r31, 0xFF	; 255
    649a:	60 81       	ld	r22, Z
    649c:	71 81       	ldd	r23, Z+1	; 0x01
    649e:	82 81       	ldd	r24, Z+2	; 0x02
    64a0:	93 81       	ldd	r25, Z+3	; 0x03
    64a2:	20 e0       	ldi	r18, 0x00	; 0
    64a4:	30 e0       	ldi	r19, 0x00	; 0
    64a6:	40 e8       	ldi	r20, 0x80	; 128
    64a8:	5f e3       	ldi	r21, 0x3F	; 63
    64aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    64ae:	88 23       	and	r24, r24
    64b0:	44 f4       	brge	.+16     	; 0x64c2 <HLCD_displayChar+0x816>
		__ticks = 1;
    64b2:	fe 01       	movw	r30, r28
    64b4:	e5 5b       	subi	r30, 0xB5	; 181
    64b6:	ff 4f       	sbci	r31, 0xFF	; 255
    64b8:	81 e0       	ldi	r24, 0x01	; 1
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	91 83       	std	Z+1, r25	; 0x01
    64be:	80 83       	st	Z, r24
    64c0:	64 c0       	rjmp	.+200    	; 0x658a <HLCD_displayChar+0x8de>
	else if (__tmp > 65535)
    64c2:	fe 01       	movw	r30, r28
    64c4:	e3 5b       	subi	r30, 0xB3	; 179
    64c6:	ff 4f       	sbci	r31, 0xFF	; 255
    64c8:	60 81       	ld	r22, Z
    64ca:	71 81       	ldd	r23, Z+1	; 0x01
    64cc:	82 81       	ldd	r24, Z+2	; 0x02
    64ce:	93 81       	ldd	r25, Z+3	; 0x03
    64d0:	20 e0       	ldi	r18, 0x00	; 0
    64d2:	3f ef       	ldi	r19, 0xFF	; 255
    64d4:	4f e7       	ldi	r20, 0x7F	; 127
    64d6:	57 e4       	ldi	r21, 0x47	; 71
    64d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    64dc:	18 16       	cp	r1, r24
    64de:	0c f0       	brlt	.+2      	; 0x64e2 <HLCD_displayChar+0x836>
    64e0:	43 c0       	rjmp	.+134    	; 0x6568 <HLCD_displayChar+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    64e2:	fe 01       	movw	r30, r28
    64e4:	ef 5a       	subi	r30, 0xAF	; 175
    64e6:	ff 4f       	sbci	r31, 0xFF	; 255
    64e8:	60 81       	ld	r22, Z
    64ea:	71 81       	ldd	r23, Z+1	; 0x01
    64ec:	82 81       	ldd	r24, Z+2	; 0x02
    64ee:	93 81       	ldd	r25, Z+3	; 0x03
    64f0:	20 e0       	ldi	r18, 0x00	; 0
    64f2:	30 e0       	ldi	r19, 0x00	; 0
    64f4:	40 e2       	ldi	r20, 0x20	; 32
    64f6:	51 e4       	ldi	r21, 0x41	; 65
    64f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    64fc:	dc 01       	movw	r26, r24
    64fe:	cb 01       	movw	r24, r22
    6500:	8e 01       	movw	r16, r28
    6502:	05 5b       	subi	r16, 0xB5	; 181
    6504:	1f 4f       	sbci	r17, 0xFF	; 255
    6506:	bc 01       	movw	r22, r24
    6508:	cd 01       	movw	r24, r26
    650a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    650e:	dc 01       	movw	r26, r24
    6510:	cb 01       	movw	r24, r22
    6512:	f8 01       	movw	r30, r16
    6514:	91 83       	std	Z+1, r25	; 0x01
    6516:	80 83       	st	Z, r24
    6518:	1f c0       	rjmp	.+62     	; 0x6558 <HLCD_displayChar+0x8ac>
    651a:	fe 01       	movw	r30, r28
    651c:	e7 5b       	subi	r30, 0xB7	; 183
    651e:	ff 4f       	sbci	r31, 0xFF	; 255
    6520:	88 ec       	ldi	r24, 0xC8	; 200
    6522:	90 e0       	ldi	r25, 0x00	; 0
    6524:	91 83       	std	Z+1, r25	; 0x01
    6526:	80 83       	st	Z, r24
    6528:	fe 01       	movw	r30, r28
    652a:	e7 5b       	subi	r30, 0xB7	; 183
    652c:	ff 4f       	sbci	r31, 0xFF	; 255
    652e:	80 81       	ld	r24, Z
    6530:	91 81       	ldd	r25, Z+1	; 0x01
    6532:	01 97       	sbiw	r24, 0x01	; 1
    6534:	f1 f7       	brne	.-4      	; 0x6532 <HLCD_displayChar+0x886>
    6536:	fe 01       	movw	r30, r28
    6538:	e7 5b       	subi	r30, 0xB7	; 183
    653a:	ff 4f       	sbci	r31, 0xFF	; 255
    653c:	91 83       	std	Z+1, r25	; 0x01
    653e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6540:	de 01       	movw	r26, r28
    6542:	a5 5b       	subi	r26, 0xB5	; 181
    6544:	bf 4f       	sbci	r27, 0xFF	; 255
    6546:	fe 01       	movw	r30, r28
    6548:	e5 5b       	subi	r30, 0xB5	; 181
    654a:	ff 4f       	sbci	r31, 0xFF	; 255
    654c:	80 81       	ld	r24, Z
    654e:	91 81       	ldd	r25, Z+1	; 0x01
    6550:	01 97       	sbiw	r24, 0x01	; 1
    6552:	11 96       	adiw	r26, 0x01	; 1
    6554:	9c 93       	st	X, r25
    6556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6558:	fe 01       	movw	r30, r28
    655a:	e5 5b       	subi	r30, 0xB5	; 181
    655c:	ff 4f       	sbci	r31, 0xFF	; 255
    655e:	80 81       	ld	r24, Z
    6560:	91 81       	ldd	r25, Z+1	; 0x01
    6562:	00 97       	sbiw	r24, 0x00	; 0
    6564:	d1 f6       	brne	.-76     	; 0x651a <HLCD_displayChar+0x86e>
    6566:	27 c0       	rjmp	.+78     	; 0x65b6 <HLCD_displayChar+0x90a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6568:	8e 01       	movw	r16, r28
    656a:	05 5b       	subi	r16, 0xB5	; 181
    656c:	1f 4f       	sbci	r17, 0xFF	; 255
    656e:	fe 01       	movw	r30, r28
    6570:	e3 5b       	subi	r30, 0xB3	; 179
    6572:	ff 4f       	sbci	r31, 0xFF	; 255
    6574:	60 81       	ld	r22, Z
    6576:	71 81       	ldd	r23, Z+1	; 0x01
    6578:	82 81       	ldd	r24, Z+2	; 0x02
    657a:	93 81       	ldd	r25, Z+3	; 0x03
    657c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6580:	dc 01       	movw	r26, r24
    6582:	cb 01       	movw	r24, r22
    6584:	f8 01       	movw	r30, r16
    6586:	91 83       	std	Z+1, r25	; 0x01
    6588:	80 83       	st	Z, r24
    658a:	de 01       	movw	r26, r28
    658c:	a9 5b       	subi	r26, 0xB9	; 185
    658e:	bf 4f       	sbci	r27, 0xFF	; 255
    6590:	fe 01       	movw	r30, r28
    6592:	e5 5b       	subi	r30, 0xB5	; 181
    6594:	ff 4f       	sbci	r31, 0xFF	; 255
    6596:	80 81       	ld	r24, Z
    6598:	91 81       	ldd	r25, Z+1	; 0x01
    659a:	8d 93       	st	X+, r24
    659c:	9c 93       	st	X, r25
    659e:	fe 01       	movw	r30, r28
    65a0:	e9 5b       	subi	r30, 0xB9	; 185
    65a2:	ff 4f       	sbci	r31, 0xFF	; 255
    65a4:	80 81       	ld	r24, Z
    65a6:	91 81       	ldd	r25, Z+1	; 0x01
    65a8:	01 97       	sbiw	r24, 0x01	; 1
    65aa:	f1 f7       	brne	.-4      	; 0x65a8 <HLCD_displayChar+0x8fc>
    65ac:	fe 01       	movw	r30, r28
    65ae:	e9 5b       	subi	r30, 0xB9	; 185
    65b0:	ff 4f       	sbci	r31, 0xFF	; 255
    65b2:	91 83       	std	Z+1, r25	; 0x01
    65b4:	80 83       	st	Z, r24
			//PORTB_REG &= 0;
			//PORTB_REG |= (Copy_u8Char<<4);

			//PORTB_REG = (PORTB_REG & 0x0F) | ((Copy_u8Char& 0xF0) << 4);

			GPIO_set4msbValue(ST_ptrLcdCfgInstance->dataPort,Copy_u8Char);
    65b6:	fe 01       	movw	r30, r28
    65b8:	e5 56       	subi	r30, 0x65	; 101
    65ba:	ff 4f       	sbci	r31, 0xFF	; 255
    65bc:	01 90       	ld	r0, Z+
    65be:	f0 81       	ld	r31, Z
    65c0:	e0 2d       	mov	r30, r0
    65c2:	82 81       	ldd	r24, Z+2	; 0x02
    65c4:	fe 01       	movw	r30, r28
    65c6:	e3 56       	subi	r30, 0x63	; 99
    65c8:	ff 4f       	sbci	r31, 0xFF	; 255
    65ca:	60 81       	ld	r22, Z
    65cc:	0e 94 7f 11 	call	0x22fe	; 0x22fe <GPIO_set4msbValue>
    65d0:	fe 01       	movw	r30, r28
    65d2:	ed 5b       	subi	r30, 0xBD	; 189
    65d4:	ff 4f       	sbci	r31, 0xFF	; 255
    65d6:	80 e0       	ldi	r24, 0x00	; 0
    65d8:	90 e0       	ldi	r25, 0x00	; 0
    65da:	a0 ef       	ldi	r26, 0xF0	; 240
    65dc:	b1 e4       	ldi	r27, 0x41	; 65
    65de:	80 83       	st	Z, r24
    65e0:	91 83       	std	Z+1, r25	; 0x01
    65e2:	a2 83       	std	Z+2, r26	; 0x02
    65e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65e6:	8e 01       	movw	r16, r28
    65e8:	01 5c       	subi	r16, 0xC1	; 193
    65ea:	1f 4f       	sbci	r17, 0xFF	; 255
    65ec:	fe 01       	movw	r30, r28
    65ee:	ed 5b       	subi	r30, 0xBD	; 189
    65f0:	ff 4f       	sbci	r31, 0xFF	; 255
    65f2:	60 81       	ld	r22, Z
    65f4:	71 81       	ldd	r23, Z+1	; 0x01
    65f6:	82 81       	ldd	r24, Z+2	; 0x02
    65f8:	93 81       	ldd	r25, Z+3	; 0x03
    65fa:	20 e0       	ldi	r18, 0x00	; 0
    65fc:	30 e0       	ldi	r19, 0x00	; 0
    65fe:	4a ef       	ldi	r20, 0xFA	; 250
    6600:	54 e4       	ldi	r21, 0x44	; 68
    6602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6606:	dc 01       	movw	r26, r24
    6608:	cb 01       	movw	r24, r22
    660a:	f8 01       	movw	r30, r16
    660c:	80 83       	st	Z, r24
    660e:	91 83       	std	Z+1, r25	; 0x01
    6610:	a2 83       	std	Z+2, r26	; 0x02
    6612:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6614:	fe 01       	movw	r30, r28
    6616:	ff 96       	adiw	r30, 0x3f	; 63
    6618:	60 81       	ld	r22, Z
    661a:	71 81       	ldd	r23, Z+1	; 0x01
    661c:	82 81       	ldd	r24, Z+2	; 0x02
    661e:	93 81       	ldd	r25, Z+3	; 0x03
    6620:	20 e0       	ldi	r18, 0x00	; 0
    6622:	30 e0       	ldi	r19, 0x00	; 0
    6624:	40 e8       	ldi	r20, 0x80	; 128
    6626:	5f e3       	ldi	r21, 0x3F	; 63
    6628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    662c:	88 23       	and	r24, r24
    662e:	2c f4       	brge	.+10     	; 0x663a <HLCD_displayChar+0x98e>
		__ticks = 1;
    6630:	81 e0       	ldi	r24, 0x01	; 1
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	9e af       	std	Y+62, r25	; 0x3e
    6636:	8d af       	std	Y+61, r24	; 0x3d
    6638:	46 c0       	rjmp	.+140    	; 0x66c6 <HLCD_displayChar+0xa1a>
	else if (__tmp > 65535)
    663a:	fe 01       	movw	r30, r28
    663c:	ff 96       	adiw	r30, 0x3f	; 63
    663e:	60 81       	ld	r22, Z
    6640:	71 81       	ldd	r23, Z+1	; 0x01
    6642:	82 81       	ldd	r24, Z+2	; 0x02
    6644:	93 81       	ldd	r25, Z+3	; 0x03
    6646:	20 e0       	ldi	r18, 0x00	; 0
    6648:	3f ef       	ldi	r19, 0xFF	; 255
    664a:	4f e7       	ldi	r20, 0x7F	; 127
    664c:	57 e4       	ldi	r21, 0x47	; 71
    664e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6652:	18 16       	cp	r1, r24
    6654:	64 f5       	brge	.+88     	; 0x66ae <HLCD_displayChar+0xa02>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6656:	fe 01       	movw	r30, r28
    6658:	ed 5b       	subi	r30, 0xBD	; 189
    665a:	ff 4f       	sbci	r31, 0xFF	; 255
    665c:	60 81       	ld	r22, Z
    665e:	71 81       	ldd	r23, Z+1	; 0x01
    6660:	82 81       	ldd	r24, Z+2	; 0x02
    6662:	93 81       	ldd	r25, Z+3	; 0x03
    6664:	20 e0       	ldi	r18, 0x00	; 0
    6666:	30 e0       	ldi	r19, 0x00	; 0
    6668:	40 e2       	ldi	r20, 0x20	; 32
    666a:	51 e4       	ldi	r21, 0x41	; 65
    666c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6670:	dc 01       	movw	r26, r24
    6672:	cb 01       	movw	r24, r22
    6674:	bc 01       	movw	r22, r24
    6676:	cd 01       	movw	r24, r26
    6678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    667c:	dc 01       	movw	r26, r24
    667e:	cb 01       	movw	r24, r22
    6680:	9e af       	std	Y+62, r25	; 0x3e
    6682:	8d af       	std	Y+61, r24	; 0x3d
    6684:	0f c0       	rjmp	.+30     	; 0x66a4 <HLCD_displayChar+0x9f8>
    6686:	88 ec       	ldi	r24, 0xC8	; 200
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	9c af       	std	Y+60, r25	; 0x3c
    668c:	8b af       	std	Y+59, r24	; 0x3b
    668e:	8b ad       	ldd	r24, Y+59	; 0x3b
    6690:	9c ad       	ldd	r25, Y+60	; 0x3c
    6692:	01 97       	sbiw	r24, 0x01	; 1
    6694:	f1 f7       	brne	.-4      	; 0x6692 <HLCD_displayChar+0x9e6>
    6696:	9c af       	std	Y+60, r25	; 0x3c
    6698:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    669a:	8d ad       	ldd	r24, Y+61	; 0x3d
    669c:	9e ad       	ldd	r25, Y+62	; 0x3e
    669e:	01 97       	sbiw	r24, 0x01	; 1
    66a0:	9e af       	std	Y+62, r25	; 0x3e
    66a2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    66a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    66a6:	9e ad       	ldd	r25, Y+62	; 0x3e
    66a8:	00 97       	sbiw	r24, 0x00	; 0
    66aa:	69 f7       	brne	.-38     	; 0x6686 <HLCD_displayChar+0x9da>
    66ac:	16 c0       	rjmp	.+44     	; 0x66da <HLCD_displayChar+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66ae:	fe 01       	movw	r30, r28
    66b0:	ff 96       	adiw	r30, 0x3f	; 63
    66b2:	60 81       	ld	r22, Z
    66b4:	71 81       	ldd	r23, Z+1	; 0x01
    66b6:	82 81       	ldd	r24, Z+2	; 0x02
    66b8:	93 81       	ldd	r25, Z+3	; 0x03
    66ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    66be:	dc 01       	movw	r26, r24
    66c0:	cb 01       	movw	r24, r22
    66c2:	9e af       	std	Y+62, r25	; 0x3e
    66c4:	8d af       	std	Y+61, r24	; 0x3d
    66c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    66c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    66ca:	9a af       	std	Y+58, r25	; 0x3a
    66cc:	89 af       	std	Y+57, r24	; 0x39
    66ce:	89 ad       	ldd	r24, Y+57	; 0x39
    66d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    66d2:	01 97       	sbiw	r24, 0x01	; 1
    66d4:	f1 f7       	brne	.-4      	; 0x66d2 <HLCD_displayChar+0xa26>
    66d6:	9a af       	std	Y+58, r25	; 0x3a
    66d8:	89 af       	std	Y+57, r24	; 0x39

			_delay_ms(30);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    66da:	fe 01       	movw	r30, r28
    66dc:	e3 57       	subi	r30, 0x73	; 115
    66de:	ff 4f       	sbci	r31, 0xFF	; 255
    66e0:	80 81       	ld	r24, Z
    66e2:	88 23       	and	r24, r24
    66e4:	59 f4       	brne	.+22     	; 0x66fc <HLCD_displayChar+0xa50>
    66e6:	ce 01       	movw	r24, r28
    66e8:	89 56       	subi	r24, 0x69	; 105
    66ea:	9f 4f       	sbci	r25, 0xFF	; 255
    66ec:	60 e0       	ldi	r22, 0x00	; 0
    66ee:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    66f2:	fe 01       	movw	r30, r28
    66f4:	e3 57       	subi	r30, 0x73	; 115
    66f6:	ff 4f       	sbci	r31, 0xFF	; 255
    66f8:	80 83       	st	Z, r24
    66fa:	05 c0       	rjmp	.+10     	; 0x6706 <HLCD_displayChar+0xa5a>
			else lcdRet = HLCD_NOK;
    66fc:	fe 01       	movw	r30, r28
    66fe:	e2 57       	subi	r30, 0x72	; 114
    6700:	ff 4f       	sbci	r31, 0xFF	; 255
    6702:	81 e0       	ldi	r24, 0x01	; 1
    6704:	80 83       	st	Z, r24
    6706:	80 e0       	ldi	r24, 0x00	; 0
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	a0 ef       	ldi	r26, 0xF0	; 240
    670c:	b1 e4       	ldi	r27, 0x41	; 65
    670e:	8d ab       	std	Y+53, r24	; 0x35
    6710:	9e ab       	std	Y+54, r25	; 0x36
    6712:	af ab       	std	Y+55, r26	; 0x37
    6714:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6716:	6d a9       	ldd	r22, Y+53	; 0x35
    6718:	7e a9       	ldd	r23, Y+54	; 0x36
    671a:	8f a9       	ldd	r24, Y+55	; 0x37
    671c:	98 ad       	ldd	r25, Y+56	; 0x38
    671e:	20 e0       	ldi	r18, 0x00	; 0
    6720:	30 e0       	ldi	r19, 0x00	; 0
    6722:	4a ef       	ldi	r20, 0xFA	; 250
    6724:	54 e4       	ldi	r21, 0x44	; 68
    6726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    672a:	dc 01       	movw	r26, r24
    672c:	cb 01       	movw	r24, r22
    672e:	89 ab       	std	Y+49, r24	; 0x31
    6730:	9a ab       	std	Y+50, r25	; 0x32
    6732:	ab ab       	std	Y+51, r26	; 0x33
    6734:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6736:	69 a9       	ldd	r22, Y+49	; 0x31
    6738:	7a a9       	ldd	r23, Y+50	; 0x32
    673a:	8b a9       	ldd	r24, Y+51	; 0x33
    673c:	9c a9       	ldd	r25, Y+52	; 0x34
    673e:	20 e0       	ldi	r18, 0x00	; 0
    6740:	30 e0       	ldi	r19, 0x00	; 0
    6742:	40 e8       	ldi	r20, 0x80	; 128
    6744:	5f e3       	ldi	r21, 0x3F	; 63
    6746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    674a:	88 23       	and	r24, r24
    674c:	2c f4       	brge	.+10     	; 0x6758 <HLCD_displayChar+0xaac>
		__ticks = 1;
    674e:	81 e0       	ldi	r24, 0x01	; 1
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	98 ab       	std	Y+48, r25	; 0x30
    6754:	8f a7       	std	Y+47, r24	; 0x2f
    6756:	3f c0       	rjmp	.+126    	; 0x67d6 <HLCD_displayChar+0xb2a>
	else if (__tmp > 65535)
    6758:	69 a9       	ldd	r22, Y+49	; 0x31
    675a:	7a a9       	ldd	r23, Y+50	; 0x32
    675c:	8b a9       	ldd	r24, Y+51	; 0x33
    675e:	9c a9       	ldd	r25, Y+52	; 0x34
    6760:	20 e0       	ldi	r18, 0x00	; 0
    6762:	3f ef       	ldi	r19, 0xFF	; 255
    6764:	4f e7       	ldi	r20, 0x7F	; 127
    6766:	57 e4       	ldi	r21, 0x47	; 71
    6768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    676c:	18 16       	cp	r1, r24
    676e:	4c f5       	brge	.+82     	; 0x67c2 <HLCD_displayChar+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6770:	6d a9       	ldd	r22, Y+53	; 0x35
    6772:	7e a9       	ldd	r23, Y+54	; 0x36
    6774:	8f a9       	ldd	r24, Y+55	; 0x37
    6776:	98 ad       	ldd	r25, Y+56	; 0x38
    6778:	20 e0       	ldi	r18, 0x00	; 0
    677a:	30 e0       	ldi	r19, 0x00	; 0
    677c:	40 e2       	ldi	r20, 0x20	; 32
    677e:	51 e4       	ldi	r21, 0x41	; 65
    6780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6784:	dc 01       	movw	r26, r24
    6786:	cb 01       	movw	r24, r22
    6788:	bc 01       	movw	r22, r24
    678a:	cd 01       	movw	r24, r26
    678c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6790:	dc 01       	movw	r26, r24
    6792:	cb 01       	movw	r24, r22
    6794:	98 ab       	std	Y+48, r25	; 0x30
    6796:	8f a7       	std	Y+47, r24	; 0x2f
    6798:	0f c0       	rjmp	.+30     	; 0x67b8 <HLCD_displayChar+0xb0c>
    679a:	88 ec       	ldi	r24, 0xC8	; 200
    679c:	90 e0       	ldi	r25, 0x00	; 0
    679e:	9e a7       	std	Y+46, r25	; 0x2e
    67a0:	8d a7       	std	Y+45, r24	; 0x2d
    67a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    67a4:	9e a5       	ldd	r25, Y+46	; 0x2e
    67a6:	01 97       	sbiw	r24, 0x01	; 1
    67a8:	f1 f7       	brne	.-4      	; 0x67a6 <HLCD_displayChar+0xafa>
    67aa:	9e a7       	std	Y+46, r25	; 0x2e
    67ac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    67ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    67b0:	98 a9       	ldd	r25, Y+48	; 0x30
    67b2:	01 97       	sbiw	r24, 0x01	; 1
    67b4:	98 ab       	std	Y+48, r25	; 0x30
    67b6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    67ba:	98 a9       	ldd	r25, Y+48	; 0x30
    67bc:	00 97       	sbiw	r24, 0x00	; 0
    67be:	69 f7       	brne	.-38     	; 0x679a <HLCD_displayChar+0xaee>
    67c0:	bb c1       	rjmp	.+886    	; 0x6b38 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67c2:	69 a9       	ldd	r22, Y+49	; 0x31
    67c4:	7a a9       	ldd	r23, Y+50	; 0x32
    67c6:	8b a9       	ldd	r24, Y+51	; 0x33
    67c8:	9c a9       	ldd	r25, Y+52	; 0x34
    67ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67ce:	dc 01       	movw	r26, r24
    67d0:	cb 01       	movw	r24, r22
    67d2:	98 ab       	std	Y+48, r25	; 0x30
    67d4:	8f a7       	std	Y+47, r24	; 0x2f
    67d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    67d8:	98 a9       	ldd	r25, Y+48	; 0x30
    67da:	9c a7       	std	Y+44, r25	; 0x2c
    67dc:	8b a7       	std	Y+43, r24	; 0x2b
    67de:	8b a5       	ldd	r24, Y+43	; 0x2b
    67e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    67e2:	01 97       	sbiw	r24, 0x01	; 1
    67e4:	f1 f7       	brne	.-4      	; 0x67e2 <HLCD_displayChar+0xb36>
    67e6:	9c a7       	std	Y+44, r25	; 0x2c
    67e8:	8b a7       	std	Y+43, r24	; 0x2b
    67ea:	a6 c1       	rjmp	.+844    	; 0x6b38 <HLCD_displayChar+0xe8c>

			_delay_ms(30);
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    67ec:	fe 01       	movw	r30, r28
    67ee:	e5 56       	subi	r30, 0x65	; 101
    67f0:	ff 4f       	sbci	r31, 0xFF	; 255
    67f2:	01 90       	ld	r0, Z+
    67f4:	f0 81       	ld	r31, Z
    67f6:	e0 2d       	mov	r30, r0
    67f8:	80 81       	ld	r24, Z
    67fa:	81 30       	cpi	r24, 0x01	; 1
    67fc:	09 f0       	breq	.+2      	; 0x6800 <HLCD_displayChar+0xb54>
    67fe:	97 c1       	rjmp	.+814    	; 0x6b2e <HLCD_displayChar+0xe82>
		{

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_HIGH);
    6800:	fe 01       	movw	r30, r28
    6802:	e3 57       	subi	r30, 0x73	; 115
    6804:	ff 4f       	sbci	r31, 0xFF	; 255
    6806:	80 81       	ld	r24, Z
    6808:	88 23       	and	r24, r24
    680a:	59 f4       	brne	.+22     	; 0x6822 <HLCD_displayChar+0xb76>
    680c:	ce 01       	movw	r24, r28
    680e:	89 56       	subi	r24, 0x69	; 105
    6810:	9f 4f       	sbci	r25, 0xFF	; 255
    6812:	61 e0       	ldi	r22, 0x01	; 1
    6814:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    6818:	fe 01       	movw	r30, r28
    681a:	e3 57       	subi	r30, 0x73	; 115
    681c:	ff 4f       	sbci	r31, 0xFF	; 255
    681e:	80 83       	st	Z, r24
    6820:	05 c0       	rjmp	.+10     	; 0x682c <HLCD_displayChar+0xb80>
			else lcdRet = HLCD_NOK;
    6822:	fe 01       	movw	r30, r28
    6824:	e2 57       	subi	r30, 0x72	; 114
    6826:	ff 4f       	sbci	r31, 0xFF	; 255
    6828:	81 e0       	ldi	r24, 0x01	; 1
    682a:	80 83       	st	Z, r24
    682c:	80 e0       	ldi	r24, 0x00	; 0
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	a0 e8       	ldi	r26, 0x80	; 128
    6832:	bf e3       	ldi	r27, 0x3F	; 63
    6834:	8f a3       	std	Y+39, r24	; 0x27
    6836:	98 a7       	std	Y+40, r25	; 0x28
    6838:	a9 a7       	std	Y+41, r26	; 0x29
    683a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    683c:	6f a1       	ldd	r22, Y+39	; 0x27
    683e:	78 a5       	ldd	r23, Y+40	; 0x28
    6840:	89 a5       	ldd	r24, Y+41	; 0x29
    6842:	9a a5       	ldd	r25, Y+42	; 0x2a
    6844:	20 e0       	ldi	r18, 0x00	; 0
    6846:	30 e0       	ldi	r19, 0x00	; 0
    6848:	4a ef       	ldi	r20, 0xFA	; 250
    684a:	54 e4       	ldi	r21, 0x44	; 68
    684c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6850:	dc 01       	movw	r26, r24
    6852:	cb 01       	movw	r24, r22
    6854:	8b a3       	std	Y+35, r24	; 0x23
    6856:	9c a3       	std	Y+36, r25	; 0x24
    6858:	ad a3       	std	Y+37, r26	; 0x25
    685a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    685c:	6b a1       	ldd	r22, Y+35	; 0x23
    685e:	7c a1       	ldd	r23, Y+36	; 0x24
    6860:	8d a1       	ldd	r24, Y+37	; 0x25
    6862:	9e a1       	ldd	r25, Y+38	; 0x26
    6864:	20 e0       	ldi	r18, 0x00	; 0
    6866:	30 e0       	ldi	r19, 0x00	; 0
    6868:	40 e8       	ldi	r20, 0x80	; 128
    686a:	5f e3       	ldi	r21, 0x3F	; 63
    686c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6870:	88 23       	and	r24, r24
    6872:	2c f4       	brge	.+10     	; 0x687e <HLCD_displayChar+0xbd2>
		__ticks = 1;
    6874:	81 e0       	ldi	r24, 0x01	; 1
    6876:	90 e0       	ldi	r25, 0x00	; 0
    6878:	9a a3       	std	Y+34, r25	; 0x22
    687a:	89 a3       	std	Y+33, r24	; 0x21
    687c:	3f c0       	rjmp	.+126    	; 0x68fc <HLCD_displayChar+0xc50>
	else if (__tmp > 65535)
    687e:	6b a1       	ldd	r22, Y+35	; 0x23
    6880:	7c a1       	ldd	r23, Y+36	; 0x24
    6882:	8d a1       	ldd	r24, Y+37	; 0x25
    6884:	9e a1       	ldd	r25, Y+38	; 0x26
    6886:	20 e0       	ldi	r18, 0x00	; 0
    6888:	3f ef       	ldi	r19, 0xFF	; 255
    688a:	4f e7       	ldi	r20, 0x7F	; 127
    688c:	57 e4       	ldi	r21, 0x47	; 71
    688e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6892:	18 16       	cp	r1, r24
    6894:	4c f5       	brge	.+82     	; 0x68e8 <HLCD_displayChar+0xc3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6896:	6f a1       	ldd	r22, Y+39	; 0x27
    6898:	78 a5       	ldd	r23, Y+40	; 0x28
    689a:	89 a5       	ldd	r24, Y+41	; 0x29
    689c:	9a a5       	ldd	r25, Y+42	; 0x2a
    689e:	20 e0       	ldi	r18, 0x00	; 0
    68a0:	30 e0       	ldi	r19, 0x00	; 0
    68a2:	40 e2       	ldi	r20, 0x20	; 32
    68a4:	51 e4       	ldi	r21, 0x41	; 65
    68a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68aa:	dc 01       	movw	r26, r24
    68ac:	cb 01       	movw	r24, r22
    68ae:	bc 01       	movw	r22, r24
    68b0:	cd 01       	movw	r24, r26
    68b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68b6:	dc 01       	movw	r26, r24
    68b8:	cb 01       	movw	r24, r22
    68ba:	9a a3       	std	Y+34, r25	; 0x22
    68bc:	89 a3       	std	Y+33, r24	; 0x21
    68be:	0f c0       	rjmp	.+30     	; 0x68de <HLCD_displayChar+0xc32>
    68c0:	88 ec       	ldi	r24, 0xC8	; 200
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	98 a3       	std	Y+32, r25	; 0x20
    68c6:	8f 8f       	std	Y+31, r24	; 0x1f
    68c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    68ca:	98 a1       	ldd	r25, Y+32	; 0x20
    68cc:	01 97       	sbiw	r24, 0x01	; 1
    68ce:	f1 f7       	brne	.-4      	; 0x68cc <HLCD_displayChar+0xc20>
    68d0:	98 a3       	std	Y+32, r25	; 0x20
    68d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    68d4:	89 a1       	ldd	r24, Y+33	; 0x21
    68d6:	9a a1       	ldd	r25, Y+34	; 0x22
    68d8:	01 97       	sbiw	r24, 0x01	; 1
    68da:	9a a3       	std	Y+34, r25	; 0x22
    68dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    68de:	89 a1       	ldd	r24, Y+33	; 0x21
    68e0:	9a a1       	ldd	r25, Y+34	; 0x22
    68e2:	00 97       	sbiw	r24, 0x00	; 0
    68e4:	69 f7       	brne	.-38     	; 0x68c0 <HLCD_displayChar+0xc14>
    68e6:	14 c0       	rjmp	.+40     	; 0x6910 <HLCD_displayChar+0xc64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    68e8:	6b a1       	ldd	r22, Y+35	; 0x23
    68ea:	7c a1       	ldd	r23, Y+36	; 0x24
    68ec:	8d a1       	ldd	r24, Y+37	; 0x25
    68ee:	9e a1       	ldd	r25, Y+38	; 0x26
    68f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68f4:	dc 01       	movw	r26, r24
    68f6:	cb 01       	movw	r24, r22
    68f8:	9a a3       	std	Y+34, r25	; 0x22
    68fa:	89 a3       	std	Y+33, r24	; 0x21
    68fc:	89 a1       	ldd	r24, Y+33	; 0x21
    68fe:	9a a1       	ldd	r25, Y+34	; 0x22
    6900:	9e 8f       	std	Y+30, r25	; 0x1e
    6902:	8d 8f       	std	Y+29, r24	; 0x1d
    6904:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6906:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6908:	01 97       	sbiw	r24, 0x01	; 1
    690a:	f1 f7       	brne	.-4      	; 0x6908 <HLCD_displayChar+0xc5c>
    690c:	9e 8f       	std	Y+30, r25	; 0x1e
    690e:	8d 8f       	std	Y+29, r24	; 0x1d

			_delay_ms(1);

			GPIO_SetPortValue(ST_ptrLcdCfgInstance->dataPort, Copy_u8Char);
    6910:	fe 01       	movw	r30, r28
    6912:	e5 56       	subi	r30, 0x65	; 101
    6914:	ff 4f       	sbci	r31, 0xFF	; 255
    6916:	01 90       	ld	r0, Z+
    6918:	f0 81       	ld	r31, Z
    691a:	e0 2d       	mov	r30, r0
    691c:	92 81       	ldd	r25, Z+2	; 0x02
    691e:	fe 01       	movw	r30, r28
    6920:	e3 56       	subi	r30, 0x63	; 99
    6922:	ff 4f       	sbci	r31, 0xFF	; 255
    6924:	80 81       	ld	r24, Z
    6926:	28 2f       	mov	r18, r24
    6928:	30 e0       	ldi	r19, 0x00	; 0
    692a:	40 e0       	ldi	r20, 0x00	; 0
    692c:	50 e0       	ldi	r21, 0x00	; 0
    692e:	89 2f       	mov	r24, r25
    6930:	ba 01       	movw	r22, r20
    6932:	a9 01       	movw	r20, r18
    6934:	0e 94 cb 11 	call	0x2396	; 0x2396 <GPIO_SetPortValue>
    6938:	80 e0       	ldi	r24, 0x00	; 0
    693a:	90 e0       	ldi	r25, 0x00	; 0
    693c:	a0 e8       	ldi	r26, 0x80	; 128
    693e:	bf e3       	ldi	r27, 0x3F	; 63
    6940:	89 8f       	std	Y+25, r24	; 0x19
    6942:	9a 8f       	std	Y+26, r25	; 0x1a
    6944:	ab 8f       	std	Y+27, r26	; 0x1b
    6946:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6948:	69 8d       	ldd	r22, Y+25	; 0x19
    694a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    694c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    694e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6950:	20 e0       	ldi	r18, 0x00	; 0
    6952:	30 e0       	ldi	r19, 0x00	; 0
    6954:	4a ef       	ldi	r20, 0xFA	; 250
    6956:	54 e4       	ldi	r21, 0x44	; 68
    6958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    695c:	dc 01       	movw	r26, r24
    695e:	cb 01       	movw	r24, r22
    6960:	8d 8b       	std	Y+21, r24	; 0x15
    6962:	9e 8b       	std	Y+22, r25	; 0x16
    6964:	af 8b       	std	Y+23, r26	; 0x17
    6966:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6968:	6d 89       	ldd	r22, Y+21	; 0x15
    696a:	7e 89       	ldd	r23, Y+22	; 0x16
    696c:	8f 89       	ldd	r24, Y+23	; 0x17
    696e:	98 8d       	ldd	r25, Y+24	; 0x18
    6970:	20 e0       	ldi	r18, 0x00	; 0
    6972:	30 e0       	ldi	r19, 0x00	; 0
    6974:	40 e8       	ldi	r20, 0x80	; 128
    6976:	5f e3       	ldi	r21, 0x3F	; 63
    6978:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    697c:	88 23       	and	r24, r24
    697e:	2c f4       	brge	.+10     	; 0x698a <HLCD_displayChar+0xcde>
		__ticks = 1;
    6980:	81 e0       	ldi	r24, 0x01	; 1
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	9c 8b       	std	Y+20, r25	; 0x14
    6986:	8b 8b       	std	Y+19, r24	; 0x13
    6988:	3f c0       	rjmp	.+126    	; 0x6a08 <HLCD_displayChar+0xd5c>
	else if (__tmp > 65535)
    698a:	6d 89       	ldd	r22, Y+21	; 0x15
    698c:	7e 89       	ldd	r23, Y+22	; 0x16
    698e:	8f 89       	ldd	r24, Y+23	; 0x17
    6990:	98 8d       	ldd	r25, Y+24	; 0x18
    6992:	20 e0       	ldi	r18, 0x00	; 0
    6994:	3f ef       	ldi	r19, 0xFF	; 255
    6996:	4f e7       	ldi	r20, 0x7F	; 127
    6998:	57 e4       	ldi	r21, 0x47	; 71
    699a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    699e:	18 16       	cp	r1, r24
    69a0:	4c f5       	brge	.+82     	; 0x69f4 <HLCD_displayChar+0xd48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    69a2:	69 8d       	ldd	r22, Y+25	; 0x19
    69a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    69a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    69a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    69aa:	20 e0       	ldi	r18, 0x00	; 0
    69ac:	30 e0       	ldi	r19, 0x00	; 0
    69ae:	40 e2       	ldi	r20, 0x20	; 32
    69b0:	51 e4       	ldi	r21, 0x41	; 65
    69b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69b6:	dc 01       	movw	r26, r24
    69b8:	cb 01       	movw	r24, r22
    69ba:	bc 01       	movw	r22, r24
    69bc:	cd 01       	movw	r24, r26
    69be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69c2:	dc 01       	movw	r26, r24
    69c4:	cb 01       	movw	r24, r22
    69c6:	9c 8b       	std	Y+20, r25	; 0x14
    69c8:	8b 8b       	std	Y+19, r24	; 0x13
    69ca:	0f c0       	rjmp	.+30     	; 0x69ea <HLCD_displayChar+0xd3e>
    69cc:	88 ec       	ldi	r24, 0xC8	; 200
    69ce:	90 e0       	ldi	r25, 0x00	; 0
    69d0:	9a 8b       	std	Y+18, r25	; 0x12
    69d2:	89 8b       	std	Y+17, r24	; 0x11
    69d4:	89 89       	ldd	r24, Y+17	; 0x11
    69d6:	9a 89       	ldd	r25, Y+18	; 0x12
    69d8:	01 97       	sbiw	r24, 0x01	; 1
    69da:	f1 f7       	brne	.-4      	; 0x69d8 <HLCD_displayChar+0xd2c>
    69dc:	9a 8b       	std	Y+18, r25	; 0x12
    69de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69e0:	8b 89       	ldd	r24, Y+19	; 0x13
    69e2:	9c 89       	ldd	r25, Y+20	; 0x14
    69e4:	01 97       	sbiw	r24, 0x01	; 1
    69e6:	9c 8b       	std	Y+20, r25	; 0x14
    69e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69ea:	8b 89       	ldd	r24, Y+19	; 0x13
    69ec:	9c 89       	ldd	r25, Y+20	; 0x14
    69ee:	00 97       	sbiw	r24, 0x00	; 0
    69f0:	69 f7       	brne	.-38     	; 0x69cc <HLCD_displayChar+0xd20>
    69f2:	14 c0       	rjmp	.+40     	; 0x6a1c <HLCD_displayChar+0xd70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69f4:	6d 89       	ldd	r22, Y+21	; 0x15
    69f6:	7e 89       	ldd	r23, Y+22	; 0x16
    69f8:	8f 89       	ldd	r24, Y+23	; 0x17
    69fa:	98 8d       	ldd	r25, Y+24	; 0x18
    69fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a00:	dc 01       	movw	r26, r24
    6a02:	cb 01       	movw	r24, r22
    6a04:	9c 8b       	std	Y+20, r25	; 0x14
    6a06:	8b 8b       	std	Y+19, r24	; 0x13
    6a08:	8b 89       	ldd	r24, Y+19	; 0x13
    6a0a:	9c 89       	ldd	r25, Y+20	; 0x14
    6a0c:	98 8b       	std	Y+16, r25	; 0x10
    6a0e:	8f 87       	std	Y+15, r24	; 0x0f
    6a10:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a12:	98 89       	ldd	r25, Y+16	; 0x10
    6a14:	01 97       	sbiw	r24, 0x01	; 1
    6a16:	f1 f7       	brne	.-4      	; 0x6a14 <HLCD_displayChar+0xd68>
    6a18:	98 8b       	std	Y+16, r25	; 0x10
    6a1a:	8f 87       	std	Y+15, r24	; 0x0f


			_delay_ms(1);

			if(gpioRet == GPIO_OK)gpioRet = GPIO_writePinLogic(&enPin,GPIO_LOW);
    6a1c:	fe 01       	movw	r30, r28
    6a1e:	e3 57       	subi	r30, 0x73	; 115
    6a20:	ff 4f       	sbci	r31, 0xFF	; 255
    6a22:	80 81       	ld	r24, Z
    6a24:	88 23       	and	r24, r24
    6a26:	59 f4       	brne	.+22     	; 0x6a3e <HLCD_displayChar+0xd92>
    6a28:	ce 01       	movw	r24, r28
    6a2a:	89 56       	subi	r24, 0x69	; 105
    6a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a2e:	60 e0       	ldi	r22, 0x00	; 0
    6a30:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    6a34:	fe 01       	movw	r30, r28
    6a36:	e3 57       	subi	r30, 0x73	; 115
    6a38:	ff 4f       	sbci	r31, 0xFF	; 255
    6a3a:	80 83       	st	Z, r24
    6a3c:	05 c0       	rjmp	.+10     	; 0x6a48 <HLCD_displayChar+0xd9c>
			else lcdRet = HLCD_NOK;
    6a3e:	fe 01       	movw	r30, r28
    6a40:	e2 57       	subi	r30, 0x72	; 114
    6a42:	ff 4f       	sbci	r31, 0xFF	; 255
    6a44:	81 e0       	ldi	r24, 0x01	; 1
    6a46:	80 83       	st	Z, r24
    6a48:	80 e0       	ldi	r24, 0x00	; 0
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
    6a4c:	a0 e8       	ldi	r26, 0x80	; 128
    6a4e:	bf e3       	ldi	r27, 0x3F	; 63
    6a50:	8b 87       	std	Y+11, r24	; 0x0b
    6a52:	9c 87       	std	Y+12, r25	; 0x0c
    6a54:	ad 87       	std	Y+13, r26	; 0x0d
    6a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	30 e0       	ldi	r19, 0x00	; 0
    6a64:	4a ef       	ldi	r20, 0xFA	; 250
    6a66:	54 e4       	ldi	r21, 0x44	; 68
    6a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a6c:	dc 01       	movw	r26, r24
    6a6e:	cb 01       	movw	r24, r22
    6a70:	8f 83       	std	Y+7, r24	; 0x07
    6a72:	98 87       	std	Y+8, r25	; 0x08
    6a74:	a9 87       	std	Y+9, r26	; 0x09
    6a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a78:	6f 81       	ldd	r22, Y+7	; 0x07
    6a7a:	78 85       	ldd	r23, Y+8	; 0x08
    6a7c:	89 85       	ldd	r24, Y+9	; 0x09
    6a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a80:	20 e0       	ldi	r18, 0x00	; 0
    6a82:	30 e0       	ldi	r19, 0x00	; 0
    6a84:	40 e8       	ldi	r20, 0x80	; 128
    6a86:	5f e3       	ldi	r21, 0x3F	; 63
    6a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    6a8c:	88 23       	and	r24, r24
    6a8e:	2c f4       	brge	.+10     	; 0x6a9a <HLCD_displayChar+0xdee>
		__ticks = 1;
    6a90:	81 e0       	ldi	r24, 0x01	; 1
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	9e 83       	std	Y+6, r25	; 0x06
    6a96:	8d 83       	std	Y+5, r24	; 0x05
    6a98:	3f c0       	rjmp	.+126    	; 0x6b18 <HLCD_displayChar+0xe6c>
	else if (__tmp > 65535)
    6a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    6a9c:	78 85       	ldd	r23, Y+8	; 0x08
    6a9e:	89 85       	ldd	r24, Y+9	; 0x09
    6aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6aa2:	20 e0       	ldi	r18, 0x00	; 0
    6aa4:	3f ef       	ldi	r19, 0xFF	; 255
    6aa6:	4f e7       	ldi	r20, 0x7F	; 127
    6aa8:	57 e4       	ldi	r21, 0x47	; 71
    6aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    6aae:	18 16       	cp	r1, r24
    6ab0:	4c f5       	brge	.+82     	; 0x6b04 <HLCD_displayChar+0xe58>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6aba:	20 e0       	ldi	r18, 0x00	; 0
    6abc:	30 e0       	ldi	r19, 0x00	; 0
    6abe:	40 e2       	ldi	r20, 0x20	; 32
    6ac0:	51 e4       	ldi	r21, 0x41	; 65
    6ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ac6:	dc 01       	movw	r26, r24
    6ac8:	cb 01       	movw	r24, r22
    6aca:	bc 01       	movw	r22, r24
    6acc:	cd 01       	movw	r24, r26
    6ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	cb 01       	movw	r24, r22
    6ad6:	9e 83       	std	Y+6, r25	; 0x06
    6ad8:	8d 83       	std	Y+5, r24	; 0x05
    6ada:	0f c0       	rjmp	.+30     	; 0x6afa <HLCD_displayChar+0xe4e>
    6adc:	88 ec       	ldi	r24, 0xC8	; 200
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	9c 83       	std	Y+4, r25	; 0x04
    6ae2:	8b 83       	std	Y+3, r24	; 0x03
    6ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    6ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    6ae8:	01 97       	sbiw	r24, 0x01	; 1
    6aea:	f1 f7       	brne	.-4      	; 0x6ae8 <HLCD_displayChar+0xe3c>
    6aec:	9c 83       	std	Y+4, r25	; 0x04
    6aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6af0:	8d 81       	ldd	r24, Y+5	; 0x05
    6af2:	9e 81       	ldd	r25, Y+6	; 0x06
    6af4:	01 97       	sbiw	r24, 0x01	; 1
    6af6:	9e 83       	std	Y+6, r25	; 0x06
    6af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6afa:	8d 81       	ldd	r24, Y+5	; 0x05
    6afc:	9e 81       	ldd	r25, Y+6	; 0x06
    6afe:	00 97       	sbiw	r24, 0x00	; 0
    6b00:	69 f7       	brne	.-38     	; 0x6adc <HLCD_displayChar+0xe30>
    6b02:	1a c0       	rjmp	.+52     	; 0x6b38 <HLCD_displayChar+0xe8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b04:	6f 81       	ldd	r22, Y+7	; 0x07
    6b06:	78 85       	ldd	r23, Y+8	; 0x08
    6b08:	89 85       	ldd	r24, Y+9	; 0x09
    6b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b10:	dc 01       	movw	r26, r24
    6b12:	cb 01       	movw	r24, r22
    6b14:	9e 83       	std	Y+6, r25	; 0x06
    6b16:	8d 83       	std	Y+5, r24	; 0x05
    6b18:	8d 81       	ldd	r24, Y+5	; 0x05
    6b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    6b1c:	9a 83       	std	Y+2, r25	; 0x02
    6b1e:	89 83       	std	Y+1, r24	; 0x01
    6b20:	89 81       	ldd	r24, Y+1	; 0x01
    6b22:	9a 81       	ldd	r25, Y+2	; 0x02
    6b24:	01 97       	sbiw	r24, 0x01	; 1
    6b26:	f1 f7       	brne	.-4      	; 0x6b24 <HLCD_displayChar+0xe78>
    6b28:	9a 83       	std	Y+2, r25	; 0x02
    6b2a:	89 83       	std	Y+1, r24	; 0x01
    6b2c:	05 c0       	rjmp	.+10     	; 0x6b38 <HLCD_displayChar+0xe8c>
			_delay_ms(1);

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    6b2e:	fe 01       	movw	r30, r28
    6b30:	e2 57       	subi	r30, 0x72	; 114
    6b32:	ff 4f       	sbci	r31, 0xFF	; 255
    6b34:	83 e0       	ldi	r24, 0x03	; 3
    6b36:	80 83       	st	Z, r24
		}

		if(gpioRet == GPIO_OK)lcdRet = HLCD_OK;
    6b38:	fe 01       	movw	r30, r28
    6b3a:	e3 57       	subi	r30, 0x73	; 115
    6b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b3e:	80 81       	ld	r24, Z
    6b40:	88 23       	and	r24, r24
    6b42:	29 f4       	brne	.+10     	; 0x6b4e <HLCD_displayChar+0xea2>
    6b44:	fe 01       	movw	r30, r28
    6b46:	e2 57       	subi	r30, 0x72	; 114
    6b48:	ff 4f       	sbci	r31, 0xFF	; 255
    6b4a:	10 82       	st	Z, r1
    6b4c:	0b c0       	rjmp	.+22     	; 0x6b64 <HLCD_displayChar+0xeb8>
		else lcdRet = HLCD_NOK;
    6b4e:	fe 01       	movw	r30, r28
    6b50:	e2 57       	subi	r30, 0x72	; 114
    6b52:	ff 4f       	sbci	r31, 0xFF	; 255
    6b54:	81 e0       	ldi	r24, 0x01	; 1
    6b56:	80 83       	st	Z, r24
    6b58:	05 c0       	rjmp	.+10     	; 0x6b64 <HLCD_displayChar+0xeb8>
	}
	else
	{
		lcdRet = HLCD_NOK;
    6b5a:	fe 01       	movw	r30, r28
    6b5c:	e2 57       	subi	r30, 0x72	; 114
    6b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    6b60:	81 e0       	ldi	r24, 0x01	; 1
    6b62:	80 83       	st	Z, r24
	}

	return lcdRet;
    6b64:	fe 01       	movw	r30, r28
    6b66:	e2 57       	subi	r30, 0x72	; 114
    6b68:	ff 4f       	sbci	r31, 0xFF	; 255
    6b6a:	80 81       	ld	r24, Z
}
    6b6c:	c3 56       	subi	r28, 0x63	; 99
    6b6e:	df 4f       	sbci	r29, 0xFF	; 255
    6b70:	0f b6       	in	r0, 0x3f	; 63
    6b72:	f8 94       	cli
    6b74:	de bf       	out	0x3e, r29	; 62
    6b76:	0f be       	out	0x3f, r0	; 63
    6b78:	cd bf       	out	0x3d, r28	; 61
    6b7a:	cf 91       	pop	r28
    6b7c:	df 91       	pop	r29
    6b7e:	1f 91       	pop	r17
    6b80:	0f 91       	pop	r16
    6b82:	08 95       	ret

00006b84 <HLCD_displayString>:

EN_HLCD_systemState_t HLCD_displayString(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t *Copy_u8String)
{
    6b84:	df 93       	push	r29
    6b86:	cf 93       	push	r28
    6b88:	00 d0       	rcall	.+0      	; 0x6b8a <HLCD_displayString+0x6>
    6b8a:	00 d0       	rcall	.+0      	; 0x6b8c <HLCD_displayString+0x8>
    6b8c:	00 d0       	rcall	.+0      	; 0x6b8e <HLCD_displayString+0xa>
    6b8e:	cd b7       	in	r28, 0x3d	; 61
    6b90:	de b7       	in	r29, 0x3e	; 62
    6b92:	9c 83       	std	Y+4, r25	; 0x04
    6b94:	8b 83       	std	Y+3, r24	; 0x03
    6b96:	7e 83       	std	Y+6, r23	; 0x06
    6b98:	6d 83       	std	Y+5, r22	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    6b9a:	81 e0       	ldi	r24, 0x01	; 1
    6b9c:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    6b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    6ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    6ba2:	00 97       	sbiw	r24, 0x00	; 0
    6ba4:	69 f1       	breq	.+90     	; 0x6c00 <HLCD_displayString+0x7c>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    6ba6:	eb 81       	ldd	r30, Y+3	; 0x03
    6ba8:	fc 81       	ldd	r31, Y+4	; 0x04
    6baa:	80 81       	ld	r24, Z
    6bac:	88 23       	and	r24, r24
    6bae:	51 f1       	breq	.+84     	; 0x6c04 <HLCD_displayString+0x80>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    6bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    6bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    6bb4:	80 81       	ld	r24, Z
    6bb6:	81 30       	cpi	r24, 0x01	; 1
    6bb8:	01 f5       	brne	.+64     	; 0x6bfa <HLCD_displayString+0x76>
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    6bba:	19 82       	std	Y+1, r1	; 0x01
    6bbc:	12 c0       	rjmp	.+36     	; 0x6be2 <HLCD_displayString+0x5e>
			{
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
    6bbe:	89 81       	ldd	r24, Y+1	; 0x01
    6bc0:	28 2f       	mov	r18, r24
    6bc2:	30 e0       	ldi	r19, 0x00	; 0
    6bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    6bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    6bc8:	fc 01       	movw	r30, r24
    6bca:	e2 0f       	add	r30, r18
    6bcc:	f3 1f       	adc	r31, r19
    6bce:	20 81       	ld	r18, Z
    6bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    6bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    6bd4:	62 2f       	mov	r22, r18
    6bd6:	0e 94 56 2e 	call	0x5cac	; 0x5cac <HLCD_displayChar>
    6bda:	8a 83       	std	Y+2, r24	; 0x02
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
		{
			uint8_t strCounter;

			for(strCounter = 0;(*(Copy_u8String+strCounter) != STR_NULL);strCounter++)
    6bdc:	89 81       	ldd	r24, Y+1	; 0x01
    6bde:	8f 5f       	subi	r24, 0xFF	; 255
    6be0:	89 83       	std	Y+1, r24	; 0x01
    6be2:	89 81       	ldd	r24, Y+1	; 0x01
    6be4:	28 2f       	mov	r18, r24
    6be6:	30 e0       	ldi	r19, 0x00	; 0
    6be8:	8d 81       	ldd	r24, Y+5	; 0x05
    6bea:	9e 81       	ldd	r25, Y+6	; 0x06
    6bec:	fc 01       	movw	r30, r24
    6bee:	e2 0f       	add	r30, r18
    6bf0:	f3 1f       	adc	r31, r19
    6bf2:	80 81       	ld	r24, Z
    6bf4:	88 23       	and	r24, r24
    6bf6:	19 f7       	brne	.-58     	; 0x6bbe <HLCD_displayString+0x3a>
    6bf8:	05 c0       	rjmp	.+10     	; 0x6c04 <HLCD_displayString+0x80>
				lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,(*(Copy_u8String+strCounter)));
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    6bfa:	83 e0       	ldi	r24, 0x03	; 3
    6bfc:	8a 83       	std	Y+2, r24	; 0x02
    6bfe:	02 c0       	rjmp	.+4      	; 0x6c04 <HLCD_displayString+0x80>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    6c00:	82 e0       	ldi	r24, 0x02	; 2
    6c02:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    6c04:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6c06:	26 96       	adiw	r28, 0x06	; 6
    6c08:	0f b6       	in	r0, 0x3f	; 63
    6c0a:	f8 94       	cli
    6c0c:	de bf       	out	0x3e, r29	; 62
    6c0e:	0f be       	out	0x3f, r0	; 63
    6c10:	cd bf       	out	0x3d, r28	; 61
    6c12:	cf 91       	pop	r28
    6c14:	df 91       	pop	r29
    6c16:	08 95       	ret

00006c18 <HLCD_displayNumber>:

EN_HLCD_systemState_t HLCD_displayNumber(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint32_t Copy_u8Number)
{
    6c18:	df 93       	push	r29
    6c1a:	cf 93       	push	r28
    6c1c:	cd b7       	in	r28, 0x3d	; 61
    6c1e:	de b7       	in	r29, 0x3e	; 62
    6c20:	6b 97       	sbiw	r28, 0x1b	; 27
    6c22:	0f b6       	in	r0, 0x3f	; 63
    6c24:	f8 94       	cli
    6c26:	de bf       	out	0x3e, r29	; 62
    6c28:	0f be       	out	0x3f, r0	; 63
    6c2a:	cd bf       	out	0x3d, r28	; 61
    6c2c:	9f 8b       	std	Y+23, r25	; 0x17
    6c2e:	8e 8b       	std	Y+22, r24	; 0x16
    6c30:	48 8f       	std	Y+24, r20	; 0x18
    6c32:	59 8f       	std	Y+25, r21	; 0x19
    6c34:	6a 8f       	std	Y+26, r22	; 0x1a
    6c36:	7b 8f       	std	Y+27, r23	; 0x1b
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    6c38:	81 e0       	ldi	r24, 0x01	; 1
    6c3a:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    6c3c:	8e 89       	ldd	r24, Y+22	; 0x16
    6c3e:	9f 89       	ldd	r25, Y+23	; 0x17
    6c40:	00 97       	sbiw	r24, 0x00	; 0
    6c42:	21 f1       	breq	.+72     	; 0x6c8c <HLCD_displayNumber+0x74>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    6c44:	ee 89       	ldd	r30, Y+22	; 0x16
    6c46:	ff 89       	ldd	r31, Y+23	; 0x17
    6c48:	80 81       	ld	r24, Z
    6c4a:	88 23       	and	r24, r24
    6c4c:	09 f1       	breq	.+66     	; 0x6c90 <HLCD_displayNumber+0x78>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    6c4e:	ee 89       	ldd	r30, Y+22	; 0x16
    6c50:	ff 89       	ldd	r31, Y+23	; 0x17
    6c52:	80 81       	ld	r24, Z
    6c54:	81 30       	cpi	r24, 0x01	; 1
    6c56:	b9 f4       	brne	.+46     	; 0x6c86 <HLCD_displayNumber+0x6e>
		{
			uint8_t bufferForNumbers[20];

			itoa(Copy_u8Number ,(char *)bufferForNumbers,10);
    6c58:	88 8d       	ldd	r24, Y+24	; 0x18
    6c5a:	99 8d       	ldd	r25, Y+25	; 0x19
    6c5c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    6c5e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    6c60:	9e 01       	movw	r18, r28
    6c62:	2e 5f       	subi	r18, 0xFE	; 254
    6c64:	3f 4f       	sbci	r19, 0xFF	; 255
    6c66:	bc 01       	movw	r22, r24
    6c68:	cd 01       	movw	r24, r26
    6c6a:	a9 01       	movw	r20, r18
    6c6c:	2a e0       	ldi	r18, 0x0A	; 10
    6c6e:	30 e0       	ldi	r19, 0x00	; 0
    6c70:	0e 94 81 39 	call	0x7302	; 0x7302 <itoa>
			HLCD_displayString(ST_ptrLcdCfgInstance,(uint8_t *)bufferForNumbers);
    6c74:	8e 89       	ldd	r24, Y+22	; 0x16
    6c76:	9f 89       	ldd	r25, Y+23	; 0x17
    6c78:	9e 01       	movw	r18, r28
    6c7a:	2e 5f       	subi	r18, 0xFE	; 254
    6c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c7e:	b9 01       	movw	r22, r18
    6c80:	0e 94 c2 35 	call	0x6b84	; 0x6b84 <HLCD_displayString>
    6c84:	05 c0       	rjmp	.+10     	; 0x6c90 <HLCD_displayNumber+0x78>

		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    6c86:	83 e0       	ldi	r24, 0x03	; 3
    6c88:	89 83       	std	Y+1, r24	; 0x01
    6c8a:	02 c0       	rjmp	.+4      	; 0x6c90 <HLCD_displayNumber+0x78>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    6c8c:	82 e0       	ldi	r24, 0x02	; 2
    6c8e:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    6c90:	89 81       	ldd	r24, Y+1	; 0x01
}
    6c92:	6b 96       	adiw	r28, 0x1b	; 27
    6c94:	0f b6       	in	r0, 0x3f	; 63
    6c96:	f8 94       	cli
    6c98:	de bf       	out	0x3e, r29	; 62
    6c9a:	0f be       	out	0x3f, r0	; 63
    6c9c:	cd bf       	out	0x3d, r28	; 61
    6c9e:	cf 91       	pop	r28
    6ca0:	df 91       	pop	r29
    6ca2:	08 95       	ret

00006ca4 <HLCD_changeCursorPosation>:

EN_HLCD_systemState_t HLCD_changeCursorPosation(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t Copy_u8Row,uint8_t Copy_u8Column)
{
    6ca4:	df 93       	push	r29
    6ca6:	cf 93       	push	r28
    6ca8:	00 d0       	rcall	.+0      	; 0x6caa <HLCD_changeCursorPosation+0x6>
    6caa:	00 d0       	rcall	.+0      	; 0x6cac <HLCD_changeCursorPosation+0x8>
    6cac:	0f 92       	push	r0
    6cae:	cd b7       	in	r28, 0x3d	; 61
    6cb0:	de b7       	in	r29, 0x3e	; 62
    6cb2:	9b 83       	std	Y+3, r25	; 0x03
    6cb4:	8a 83       	std	Y+2, r24	; 0x02
    6cb6:	6c 83       	std	Y+4, r22	; 0x04
    6cb8:	4d 83       	std	Y+5, r20	; 0x05
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    6cba:	81 e0       	ldi	r24, 0x01	; 1
    6cbc:	89 83       	std	Y+1, r24	; 0x01

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    6cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    6cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    6cc2:	00 97       	sbiw	r24, 0x00	; 0
    6cc4:	91 f1       	breq	.+100    	; 0x6d2a <HLCD_changeCursorPosation+0x86>
	{
		if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    6cc6:	ea 81       	ldd	r30, Y+2	; 0x02
    6cc8:	fb 81       	ldd	r31, Y+3	; 0x03
    6cca:	80 81       	ld	r24, Z
    6ccc:	88 23       	and	r24, r24
    6cce:	79 f1       	breq	.+94     	; 0x6d2e <HLCD_changeCursorPosation+0x8a>
		{
			/* TODO : Handling The 4bit Mode */
		}
		else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    6cd0:	ea 81       	ldd	r30, Y+2	; 0x02
    6cd2:	fb 81       	ldd	r31, Y+3	; 0x03
    6cd4:	80 81       	ld	r24, Z
    6cd6:	81 30       	cpi	r24, 0x01	; 1
    6cd8:	29 f5       	brne	.+74     	; 0x6d24 <HLCD_changeCursorPosation+0x80>
		{
			if (Copy_u8Row == ROW_ZERO && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    6cda:	8c 81       	ldd	r24, Y+4	; 0x04
    6cdc:	88 23       	and	r24, r24
    6cde:	71 f4       	brne	.+28     	; 0x6cfc <HLCD_changeCursorPosation+0x58>
    6ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ce2:	80 31       	cpi	r24, 0x10	; 16
    6ce4:	58 f4       	brcc	.+22     	; 0x6cfc <HLCD_changeCursorPosation+0x58>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0x80));
    6ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ce8:	8f 70       	andi	r24, 0x0F	; 15
    6cea:	80 68       	ori	r24, 0x80	; 128
    6cec:	28 2f       	mov	r18, r24
    6cee:	8a 81       	ldd	r24, Y+2	; 0x02
    6cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    6cf2:	62 2f       	mov	r22, r18
    6cf4:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    6cf8:	89 83       	std	Y+1, r24	; 0x01
    6cfa:	19 c0       	rjmp	.+50     	; 0x6d2e <HLCD_changeCursorPosation+0x8a>
			else if (Copy_u8Row == ROW_ONE && Copy_u8Column<MAX_NUMBER_OF_COLUMNS)
    6cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    6cfe:	81 30       	cpi	r24, 0x01	; 1
    6d00:	71 f4       	brne	.+28     	; 0x6d1e <HLCD_changeCursorPosation+0x7a>
    6d02:	8d 81       	ldd	r24, Y+5	; 0x05
    6d04:	80 31       	cpi	r24, 0x10	; 16
    6d06:	58 f4       	brcc	.+22     	; 0x6d1e <HLCD_changeCursorPosation+0x7a>
				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , ((Copy_u8Column & 0x0F)|0xC0));
    6d08:	8d 81       	ldd	r24, Y+5	; 0x05
    6d0a:	8f 70       	andi	r24, 0x0F	; 15
    6d0c:	80 6c       	ori	r24, 0xC0	; 192
    6d0e:	28 2f       	mov	r18, r24
    6d10:	8a 81       	ldd	r24, Y+2	; 0x02
    6d12:	9b 81       	ldd	r25, Y+3	; 0x03
    6d14:	62 2f       	mov	r22, r18
    6d16:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    6d1a:	89 83       	std	Y+1, r24	; 0x01
    6d1c:	08 c0       	rjmp	.+16     	; 0x6d2e <HLCD_changeCursorPosation+0x8a>
			else lcdRet = HLCD_INVALID_PARAMTERS;
    6d1e:	84 e0       	ldi	r24, 0x04	; 4
    6d20:	89 83       	std	Y+1, r24	; 0x01
    6d22:	05 c0       	rjmp	.+10     	; 0x6d2e <HLCD_changeCursorPosation+0x8a>
		}
		else
		{
			lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    6d24:	83 e0       	ldi	r24, 0x03	; 3
    6d26:	89 83       	std	Y+1, r24	; 0x01
    6d28:	02 c0       	rjmp	.+4      	; 0x6d2e <HLCD_changeCursorPosation+0x8a>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    6d2a:	82 e0       	ldi	r24, 0x02	; 2
    6d2c:	89 83       	std	Y+1, r24	; 0x01
	}
	return lcdRet;
    6d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6d30:	0f 90       	pop	r0
    6d32:	0f 90       	pop	r0
    6d34:	0f 90       	pop	r0
    6d36:	0f 90       	pop	r0
    6d38:	0f 90       	pop	r0
    6d3a:	cf 91       	pop	r28
    6d3c:	df 91       	pop	r29
    6d3e:	08 95       	ret

00006d40 <HLCD_shiftDisplay>:

EN_HLCD_systemState_t HLCD_shiftDisplay(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance ,uint8_t Copy_u8ShiftItirations,uint8_t Copy_u8ShiftDirection)
{
    6d40:	df 93       	push	r29
    6d42:	cf 93       	push	r28
    6d44:	00 d0       	rcall	.+0      	; 0x6d46 <HLCD_shiftDisplay+0x6>
    6d46:	00 d0       	rcall	.+0      	; 0x6d48 <HLCD_shiftDisplay+0x8>
    6d48:	00 d0       	rcall	.+0      	; 0x6d4a <HLCD_shiftDisplay+0xa>
    6d4a:	cd b7       	in	r28, 0x3d	; 61
    6d4c:	de b7       	in	r29, 0x3e	; 62
    6d4e:	9c 83       	std	Y+4, r25	; 0x04
    6d50:	8b 83       	std	Y+3, r24	; 0x03
    6d52:	6d 83       	std	Y+5, r22	; 0x05
    6d54:	4e 83       	std	Y+6, r20	; 0x06
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    6d56:	81 e0       	ldi	r24, 0x01	; 1
    6d58:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance)
    6d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d5e:	00 97       	sbiw	r24, 0x00	; 0
    6d60:	31 f1       	breq	.+76     	; 0x6dae <HLCD_shiftDisplay+0x6e>
	{
		if(Copy_u8ShiftDirection == RIGHT || Copy_u8ShiftDirection == LEFT)
    6d62:	8e 81       	ldd	r24, Y+6	; 0x06
    6d64:	8c 31       	cpi	r24, 0x1C	; 28
    6d66:	19 f0       	breq	.+6      	; 0x6d6e <HLCD_shiftDisplay+0x2e>
    6d68:	8e 81       	ldd	r24, Y+6	; 0x06
    6d6a:	88 31       	cpi	r24, 0x18	; 24
    6d6c:	e9 f4       	brne	.+58     	; 0x6da8 <HLCD_shiftDisplay+0x68>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    6d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    6d70:	fc 81       	ldd	r31, Y+4	; 0x04
    6d72:	80 81       	ld	r24, Z
    6d74:	88 23       	and	r24, r24
    6d76:	e9 f0       	breq	.+58     	; 0x6db2 <HLCD_shiftDisplay+0x72>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    6d78:	eb 81       	ldd	r30, Y+3	; 0x03
    6d7a:	fc 81       	ldd	r31, Y+4	; 0x04
    6d7c:	80 81       	ld	r24, Z
    6d7e:	81 30       	cpi	r24, 0x01	; 1
    6d80:	81 f4       	brne	.+32     	; 0x6da2 <HLCD_shiftDisplay+0x62>
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    6d82:	19 82       	std	Y+1, r1	; 0x01
    6d84:	09 c0       	rjmp	.+18     	; 0x6d98 <HLCD_shiftDisplay+0x58>
				{
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
    6d86:	8b 81       	ldd	r24, Y+3	; 0x03
    6d88:	9c 81       	ldd	r25, Y+4	; 0x04
    6d8a:	6e 81       	ldd	r22, Y+6	; 0x06
    6d8c:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    6d90:	8a 83       	std	Y+2, r24	; 0x02
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
			{
				uint8_t loopCounter;
				for(loopCounter = 0;loopCounter<Copy_u8ShiftItirations;loopCounter++)
    6d92:	89 81       	ldd	r24, Y+1	; 0x01
    6d94:	8f 5f       	subi	r24, 0xFF	; 255
    6d96:	89 83       	std	Y+1, r24	; 0x01
    6d98:	99 81       	ldd	r25, Y+1	; 0x01
    6d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d9c:	98 17       	cp	r25, r24
    6d9e:	98 f3       	brcs	.-26     	; 0x6d86 <HLCD_shiftDisplay+0x46>
    6da0:	08 c0       	rjmp	.+16     	; 0x6db2 <HLCD_shiftDisplay+0x72>
					lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,Copy_u8ShiftDirection);
				}
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    6da2:	83 e0       	ldi	r24, 0x03	; 3
    6da4:	8a 83       	std	Y+2, r24	; 0x02
    6da6:	05 c0       	rjmp	.+10     	; 0x6db2 <HLCD_shiftDisplay+0x72>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    6da8:	84 e0       	ldi	r24, 0x04	; 4
    6daa:	8a 83       	std	Y+2, r24	; 0x02
    6dac:	02 c0       	rjmp	.+4      	; 0x6db2 <HLCD_shiftDisplay+0x72>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    6dae:	82 e0       	ldi	r24, 0x02	; 2
    6db0:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    6db2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6db4:	26 96       	adiw	r28, 0x06	; 6
    6db6:	0f b6       	in	r0, 0x3f	; 63
    6db8:	f8 94       	cli
    6dba:	de bf       	out	0x3e, r29	; 62
    6dbc:	0f be       	out	0x3f, r0	; 63
    6dbe:	cd bf       	out	0x3d, r28	; 61
    6dc0:	cf 91       	pop	r28
    6dc2:	df 91       	pop	r29
    6dc4:	08 95       	ret

00006dc6 <HLCD_createNewCustomChar>:

EN_HLCD_systemState_t HLCD_createNewCustomChar(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance , uint8_t *Copy_u8ArrayOfChar , uint8_t Copy_u8CgramPosition)
{
    6dc6:	df 93       	push	r29
    6dc8:	cf 93       	push	r28
    6dca:	cd b7       	in	r28, 0x3d	; 61
    6dcc:	de b7       	in	r29, 0x3e	; 62
    6dce:	27 97       	sbiw	r28, 0x07	; 7
    6dd0:	0f b6       	in	r0, 0x3f	; 63
    6dd2:	f8 94       	cli
    6dd4:	de bf       	out	0x3e, r29	; 62
    6dd6:	0f be       	out	0x3f, r0	; 63
    6dd8:	cd bf       	out	0x3d, r28	; 61
    6dda:	9c 83       	std	Y+4, r25	; 0x04
    6ddc:	8b 83       	std	Y+3, r24	; 0x03
    6dde:	7e 83       	std	Y+6, r23	; 0x06
    6de0:	6d 83       	std	Y+5, r22	; 0x05
    6de2:	4f 83       	std	Y+7, r20	; 0x07
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    6de4:	81 e0       	ldi	r24, 0x01	; 1
    6de6:	8a 83       	std	Y+2, r24	; 0x02

	if(PTR_NULL != ST_ptrLcdCfgInstance && PTR_NULL != Copy_u8ArrayOfChar)
    6de8:	8b 81       	ldd	r24, Y+3	; 0x03
    6dea:	9c 81       	ldd	r25, Y+4	; 0x04
    6dec:	00 97       	sbiw	r24, 0x00	; 0
    6dee:	09 f4       	brne	.+2      	; 0x6df2 <HLCD_createNewCustomChar+0x2c>
    6df0:	4f c0       	rjmp	.+158    	; 0x6e90 <HLCD_createNewCustomChar+0xca>
    6df2:	8d 81       	ldd	r24, Y+5	; 0x05
    6df4:	9e 81       	ldd	r25, Y+6	; 0x06
    6df6:	00 97       	sbiw	r24, 0x00	; 0
    6df8:	09 f4       	brne	.+2      	; 0x6dfc <HLCD_createNewCustomChar+0x36>
    6dfa:	4a c0       	rjmp	.+148    	; 0x6e90 <HLCD_createNewCustomChar+0xca>
	{
		if((Copy_u8CgramPosition >= 0) && (Copy_u8CgramPosition <= 7))
    6dfc:	8f 81       	ldd	r24, Y+7	; 0x07
    6dfe:	88 30       	cpi	r24, 0x08	; 8
    6e00:	08 f0       	brcs	.+2      	; 0x6e04 <HLCD_createNewCustomChar+0x3e>
    6e02:	43 c0       	rjmp	.+134    	; 0x6e8a <HLCD_createNewCustomChar+0xc4>
		{
			if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_4_BIT_MODE)
    6e04:	eb 81       	ldd	r30, Y+3	; 0x03
    6e06:	fc 81       	ldd	r31, Y+4	; 0x04
    6e08:	80 81       	ld	r24, Z
    6e0a:	88 23       	and	r24, r24
    6e0c:	09 f4       	brne	.+2      	; 0x6e10 <HLCD_createNewCustomChar+0x4a>
    6e0e:	42 c0       	rjmp	.+132    	; 0x6e94 <HLCD_createNewCustomChar+0xce>
			{
				/* TODO : Handling The 4bit Mode */
			}
			else if(ST_ptrLcdCfgInstance->dataPinsMode == HLCD_8_BIT_MODE)
    6e10:	eb 81       	ldd	r30, Y+3	; 0x03
    6e12:	fc 81       	ldd	r31, Y+4	; 0x04
    6e14:	80 81       	ld	r24, Z
    6e16:	81 30       	cpi	r24, 0x01	; 1
    6e18:	a9 f5       	brne	.+106    	; 0x6e84 <HLCD_createNewCustomChar+0xbe>
			{
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
    6e1a:	8f 81       	ldd	r24, Y+7	; 0x07
    6e1c:	88 2f       	mov	r24, r24
    6e1e:	90 e0       	ldi	r25, 0x00	; 0
    6e20:	88 0f       	add	r24, r24
    6e22:	99 1f       	adc	r25, r25
    6e24:	88 0f       	add	r24, r24
    6e26:	99 1f       	adc	r25, r25
    6e28:	88 0f       	add	r24, r24
    6e2a:	99 1f       	adc	r25, r25
    6e2c:	80 64       	ori	r24, 0x40	; 64
    6e2e:	28 2f       	mov	r18, r24
    6e30:	8b 81       	ldd	r24, Y+3	; 0x03
    6e32:	9c 81       	ldd	r25, Y+4	; 0x04
    6e34:	62 2f       	mov	r22, r18
    6e36:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    6e3a:	8a 83       	std	Y+2, r24	; 0x02
				if(lcdRet == HLCD_OK)
    6e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e3e:	88 23       	and	r24, r24
    6e40:	d1 f4       	brne	.+52     	; 0x6e76 <HLCD_createNewCustomChar+0xb0>
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    6e42:	19 82       	std	Y+1, r1	; 0x01
    6e44:	15 c0       	rjmp	.+42     	; 0x6e70 <HLCD_createNewCustomChar+0xaa>
					{
						lcdRet = HLCD_displayChar(ST_ptrLcdCfgInstance,Copy_u8ArrayOfChar[loopCounter]);
    6e46:	89 81       	ldd	r24, Y+1	; 0x01
    6e48:	28 2f       	mov	r18, r24
    6e4a:	30 e0       	ldi	r19, 0x00	; 0
    6e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    6e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    6e50:	fc 01       	movw	r30, r24
    6e52:	e2 0f       	add	r30, r18
    6e54:	f3 1f       	adc	r31, r19
    6e56:	20 81       	ld	r18, Z
    6e58:	8b 81       	ldd	r24, Y+3	; 0x03
    6e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    6e5c:	62 2f       	mov	r22, r18
    6e5e:	0e 94 56 2e 	call	0x5cac	; 0x5cac <HLCD_displayChar>
    6e62:	8a 83       	std	Y+2, r24	; 0x02
						if(lcdRet != HLCD_OK) break; else /*Do Notjhint*/;
    6e64:	8a 81       	ldd	r24, Y+2	; 0x02
    6e66:	88 23       	and	r24, r24
    6e68:	31 f4       	brne	.+12     	; 0x6e76 <HLCD_createNewCustomChar+0xb0>
				uint8_t loopCounter;

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance , SET_CGRAM_LOCATION|(Copy_u8CgramPosition*8));
				if(lcdRet == HLCD_OK)
				{
					for(loopCounter = 0;loopCounter<8;loopCounter++)
    6e6a:	89 81       	ldd	r24, Y+1	; 0x01
    6e6c:	8f 5f       	subi	r24, 0xFF	; 255
    6e6e:	89 83       	std	Y+1, r24	; 0x01
    6e70:	89 81       	ldd	r24, Y+1	; 0x01
    6e72:	88 30       	cpi	r24, 0x08	; 8
    6e74:	40 f3       	brcs	.-48     	; 0x6e46 <HLCD_createNewCustomChar+0x80>
				else
				{
					/* Do Nothing */
				}

				lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance ,SET_CURSOR_LOCATION);
    6e76:	8b 81       	ldd	r24, Y+3	; 0x03
    6e78:	9c 81       	ldd	r25, Y+4	; 0x04
    6e7a:	60 e8       	ldi	r22, 0x80	; 128
    6e7c:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    6e80:	8a 83       	std	Y+2, r24	; 0x02
    6e82:	08 c0       	rjmp	.+16     	; 0x6e94 <HLCD_createNewCustomChar+0xce>
			}
			else
			{
				lcdRet = HLCD_INVALID_DATA_BIT_MODE;
    6e84:	83 e0       	ldi	r24, 0x03	; 3
    6e86:	8a 83       	std	Y+2, r24	; 0x02
    6e88:	05 c0       	rjmp	.+10     	; 0x6e94 <HLCD_createNewCustomChar+0xce>
			}
		}
		else
		{
			lcdRet = HLCD_INVALID_PARAMTERS;
    6e8a:	84 e0       	ldi	r24, 0x04	; 4
    6e8c:	8a 83       	std	Y+2, r24	; 0x02
    6e8e:	02 c0       	rjmp	.+4      	; 0x6e94 <HLCD_createNewCustomChar+0xce>
		}
	}
	else
	{
		lcdRet = HLCD_PTR_NULL;
    6e90:	82 e0       	ldi	r24, 0x02	; 2
    6e92:	8a 83       	std	Y+2, r24	; 0x02
	}
	return lcdRet;
    6e94:	8a 81       	ldd	r24, Y+2	; 0x02
}
    6e96:	27 96       	adiw	r28, 0x07	; 7
    6e98:	0f b6       	in	r0, 0x3f	; 63
    6e9a:	f8 94       	cli
    6e9c:	de bf       	out	0x3e, r29	; 62
    6e9e:	0f be       	out	0x3f, r0	; 63
    6ea0:	cd bf       	out	0x3d, r28	; 61
    6ea2:	cf 91       	pop	r28
    6ea4:	df 91       	pop	r29
    6ea6:	08 95       	ret

00006ea8 <HLCD_Clr>:

EN_HLCD_systemState_t HLCD_Clr(ST_HLCD_cfg_t const *ST_ptrLcdCfgInstance)
{
    6ea8:	df 93       	push	r29
    6eaa:	cf 93       	push	r28
    6eac:	00 d0       	rcall	.+0      	; 0x6eae <HLCD_Clr+0x6>
    6eae:	0f 92       	push	r0
    6eb0:	cd b7       	in	r28, 0x3d	; 61
    6eb2:	de b7       	in	r29, 0x3e	; 62
    6eb4:	9b 83       	std	Y+3, r25	; 0x03
    6eb6:	8a 83       	std	Y+2, r24	; 0x02
	EN_HLCD_systemState_t lcdRet = HLCD_NOK;
    6eb8:	81 e0       	ldi	r24, 0x01	; 1
    6eba:	89 83       	std	Y+1, r24	; 0x01

	lcdRet = HLCD_sendCmd(ST_ptrLcdCfgInstance, CLEAR_COMMAND);
    6ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    6ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    6ec0:	61 e0       	ldi	r22, 0x01	; 1
    6ec2:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <HLCD_sendCmd>
    6ec6:	89 83       	std	Y+1, r24	; 0x01

	return lcdRet;
    6ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    6eca:	0f 90       	pop	r0
    6ecc:	0f 90       	pop	r0
    6ece:	0f 90       	pop	r0
    6ed0:	cf 91       	pop	r28
    6ed2:	df 91       	pop	r29
    6ed4:	08 95       	ret

00006ed6 <EKP_init>:

ST_GPIO_cfg_t arrOfRows[KEYPAD_ROWS_SIZE];
ST_GPIO_cfg_t arrOfColumns[KEYPAD_COLUMNS_SIZE];


EN_EKP_systemStatus_t EKP_init(ST_EKP_cfg_t const *ST_ptrKeypadInstance) {
    6ed6:	df 93       	push	r29
    6ed8:	cf 93       	push	r28
    6eda:	00 d0       	rcall	.+0      	; 0x6edc <EKP_init+0x6>
    6edc:	00 d0       	rcall	.+0      	; 0x6ede <EKP_init+0x8>
    6ede:	00 d0       	rcall	.+0      	; 0x6ee0 <EKP_init+0xa>
    6ee0:	cd b7       	in	r28, 0x3d	; 61
    6ee2:	de b7       	in	r29, 0x3e	; 62
    6ee4:	9e 83       	std	Y+6, r25	; 0x06
    6ee6:	8d 83       	std	Y+5, r24	; 0x05
	EN_EKP_systemStatus_t kpRet = EKP_NOK;
    6ee8:	81 e0       	ldi	r24, 0x01	; 1
    6eea:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    6eec:	81 e0       	ldi	r24, 0x01	; 1
    6eee:	8b 83       	std	Y+3, r24	; 0x03
	if (PTR_NULL != ST_ptrKeypadInstance) {
    6ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    6ef4:	00 97       	sbiw	r24, 0x00	; 0
    6ef6:	09 f4       	brne	.+2      	; 0x6efa <EKP_init+0x24>
    6ef8:	40 c0       	rjmp	.+128    	; 0x6f7a <EKP_init+0xa4>
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    6efa:	1a 82       	std	Y+2, r1	; 0x02
    6efc:	14 c0       	rjmp	.+40     	; 0x6f26 <EKP_init+0x50>

			gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]));
    6efe:	2d 81       	ldd	r18, Y+5	; 0x05
    6f00:	3e 81       	ldd	r19, Y+6	; 0x06
    6f02:	8a 81       	ldd	r24, Y+2	; 0x02
    6f04:	88 2f       	mov	r24, r24
    6f06:	90 e0       	ldi	r25, 0x00	; 0
    6f08:	88 0f       	add	r24, r24
    6f0a:	99 1f       	adc	r25, r25
    6f0c:	88 0f       	add	r24, r24
    6f0e:	99 1f       	adc	r25, r25
    6f10:	82 0f       	add	r24, r18
    6f12:	93 1f       	adc	r25, r19
    6f14:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    6f18:	8b 83       	std	Y+3, r24	; 0x03
			if (gpioRet == GPIO_NOK)
    6f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    6f1c:	81 30       	cpi	r24, 0x01	; 1
    6f1e:	31 f0       	breq	.+12     	; 0x6f2c <EKP_init+0x56>
EN_EKP_systemStatus_t EKP_init(ST_EKP_cfg_t const *ST_ptrKeypadInstance) {
	EN_EKP_systemStatus_t kpRet = EKP_NOK;
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
	if (PTR_NULL != ST_ptrKeypadInstance) {
		uint8_t Rowscounter, Colscounter;
		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter < KEYPAD_ROWS_SIZE;Rowscounter++) {
    6f20:	8a 81       	ldd	r24, Y+2	; 0x02
    6f22:	8f 5f       	subi	r24, 0xFF	; 255
    6f24:	8a 83       	std	Y+2, r24	; 0x02
    6f26:	8a 81       	ldd	r24, Y+2	; 0x02
    6f28:	84 30       	cpi	r24, 0x04	; 4
    6f2a:	48 f3       	brcs	.-46     	; 0x6efe <EKP_init+0x28>

			gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]));
			if (gpioRet == GPIO_NOK)
				break;
		}
		if (gpioRet == GPIO_OK) {
    6f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    6f2e:	88 23       	and	r24, r24
    6f30:	e1 f4       	brne	.+56     	; 0x6f6a <EKP_init+0x94>
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    6f32:	19 82       	std	Y+1, r1	; 0x01
    6f34:	17 c0       	rjmp	.+46     	; 0x6f64 <EKP_init+0x8e>

				gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]));
    6f36:	8d 81       	ldd	r24, Y+5	; 0x05
    6f38:	9e 81       	ldd	r25, Y+6	; 0x06
    6f3a:	9c 01       	movw	r18, r24
    6f3c:	20 5f       	subi	r18, 0xF0	; 240
    6f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f40:	89 81       	ldd	r24, Y+1	; 0x01
    6f42:	88 2f       	mov	r24, r24
    6f44:	90 e0       	ldi	r25, 0x00	; 0
    6f46:	88 0f       	add	r24, r24
    6f48:	99 1f       	adc	r25, r25
    6f4a:	88 0f       	add	r24, r24
    6f4c:	99 1f       	adc	r25, r25
    6f4e:	82 0f       	add	r24, r18
    6f50:	93 1f       	adc	r25, r19
    6f52:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    6f56:	8b 83       	std	Y+3, r24	; 0x03
				if (gpioRet == GPIO_NOK)
    6f58:	8b 81       	ldd	r24, Y+3	; 0x03
    6f5a:	81 30       	cpi	r24, 0x01	; 1
    6f5c:	31 f0       	breq	.+12     	; 0x6f6a <EKP_init+0x94>
			gpioRet = GPIO_initPin(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]));
			if (gpioRet == GPIO_NOK)
				break;
		}
		if (gpioRet == GPIO_OK) {
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter < KEYPAD_COLUMNS_SIZE;Colscounter++) {
    6f5e:	89 81       	ldd	r24, Y+1	; 0x01
    6f60:	8f 5f       	subi	r24, 0xFF	; 255
    6f62:	89 83       	std	Y+1, r24	; 0x01
    6f64:	89 81       	ldd	r24, Y+1	; 0x01
    6f66:	84 30       	cpi	r24, 0x04	; 4
    6f68:	30 f3       	brcs	.-52     	; 0x6f36 <EKP_init+0x60>
			}
		} else {
			/* Do Nothing */
		}

		if (gpioRet == GPIO_OK) {
    6f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    6f6c:	88 23       	and	r24, r24
    6f6e:	11 f4       	brne	.+4      	; 0x6f74 <EKP_init+0x9e>
			kpRet = EKP_OK;
    6f70:	1c 82       	std	Y+4, r1	; 0x04
    6f72:	05 c0       	rjmp	.+10     	; 0x6f7e <EKP_init+0xa8>
		} else {
			kpRet = EKP_NOK;
    6f74:	81 e0       	ldi	r24, 0x01	; 1
    6f76:	8c 83       	std	Y+4, r24	; 0x04
    6f78:	02 c0       	rjmp	.+4      	; 0x6f7e <EKP_init+0xa8>
		}

	} else {
		kpRet = EKP_PTR_NULL;
    6f7a:	82 e0       	ldi	r24, 0x02	; 2
    6f7c:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    6f7e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    6f80:	26 96       	adiw	r28, 0x06	; 6
    6f82:	0f b6       	in	r0, 0x3f	; 63
    6f84:	f8 94       	cli
    6f86:	de bf       	out	0x3e, r29	; 62
    6f88:	0f be       	out	0x3f, r0	; 63
    6f8a:	cd bf       	out	0x3d, r28	; 61
    6f8c:	cf 91       	pop	r28
    6f8e:	df 91       	pop	r29
    6f90:	08 95       	ret

00006f92 <EKP_scanningForPressedBtn>:


EN_EKP_systemStatus_t
EKP_scanningForPressedBtn(ST_EKP_cfg_t const *ST_ptrKeypadInstance,
		uint8_t *pressedBtnVal) {
    6f92:	df 93       	push	r29
    6f94:	cf 93       	push	r28
    6f96:	cd b7       	in	r28, 0x3d	; 61
    6f98:	de b7       	in	r29, 0x3e	; 62
    6f9a:	29 97       	sbiw	r28, 0x09	; 9
    6f9c:	0f b6       	in	r0, 0x3f	; 63
    6f9e:	f8 94       	cli
    6fa0:	de bf       	out	0x3e, r29	; 62
    6fa2:	0f be       	out	0x3f, r0	; 63
    6fa4:	cd bf       	out	0x3d, r28	; 61
    6fa6:	9f 83       	std	Y+7, r25	; 0x07
    6fa8:	8e 83       	std	Y+6, r24	; 0x06
    6faa:	79 87       	std	Y+9, r23	; 0x09
    6fac:	68 87       	std	Y+8, r22	; 0x08

	EN_EKP_systemStatus_t kpRet = EKP_NOK;
    6fae:	81 e0       	ldi	r24, 0x01	; 1
    6fb0:	8c 83       	std	Y+4, r24	; 0x04
	EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    6fb2:	81 e0       	ldi	r24, 0x01	; 1
    6fb4:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != ST_ptrKeypadInstance && PTR_NULL != pressedBtnVal) {
    6fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    6fb8:	9f 81       	ldd	r25, Y+7	; 0x07
    6fba:	00 97       	sbiw	r24, 0x00	; 0
    6fbc:	09 f4       	brne	.+2      	; 0x6fc0 <EKP_scanningForPressedBtn+0x2e>
    6fbe:	7c c0       	rjmp	.+248    	; 0x70b8 <EKP_scanningForPressedBtn+0x126>
    6fc0:	88 85       	ldd	r24, Y+8	; 0x08
    6fc2:	99 85       	ldd	r25, Y+9	; 0x09
    6fc4:	00 97       	sbiw	r24, 0x00	; 0
    6fc6:	09 f4       	brne	.+2      	; 0x6fca <EKP_scanningForPressedBtn+0x38>
    6fc8:	77 c0       	rjmp	.+238    	; 0x70b8 <EKP_scanningForPressedBtn+0x126>
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    6fca:	1a 82       	std	Y+2, r1	; 0x02
    6fcc:	70 c0       	rjmp	.+224    	; 0x70ae <EKP_scanningForPressedBtn+0x11c>

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_LOW);
    6fce:	2e 81       	ldd	r18, Y+6	; 0x06
    6fd0:	3f 81       	ldd	r19, Y+7	; 0x07
    6fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    6fd4:	88 2f       	mov	r24, r24
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	88 0f       	add	r24, r24
    6fda:	99 1f       	adc	r25, r25
    6fdc:	88 0f       	add	r24, r24
    6fde:	99 1f       	adc	r25, r25
    6fe0:	82 0f       	add	r24, r18
    6fe2:	93 1f       	adc	r25, r19
    6fe4:	60 e0       	ldi	r22, 0x00	; 0
    6fe6:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    6fea:	8b 83       	std	Y+3, r24	; 0x03

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    6fec:	19 82       	std	Y+1, r1	; 0x01
    6fee:	49 c0       	rjmp	.+146    	; 0x7082 <EKP_scanningForPressedBtn+0xf0>

				gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);
    6ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    6ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    6ff4:	9c 01       	movw	r18, r24
    6ff6:	20 5f       	subi	r18, 0xF0	; 240
    6ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    6ffa:	89 81       	ldd	r24, Y+1	; 0x01
    6ffc:	88 2f       	mov	r24, r24
    6ffe:	90 e0       	ldi	r25, 0x00	; 0
    7000:	88 0f       	add	r24, r24
    7002:	99 1f       	adc	r25, r25
    7004:	88 0f       	add	r24, r24
    7006:	99 1f       	adc	r25, r25
    7008:	82 0f       	add	r24, r18
    700a:	93 1f       	adc	r25, r19
    700c:	9e 01       	movw	r18, r28
    700e:	2b 5f       	subi	r18, 0xFB	; 251
    7010:	3f 4f       	sbci	r19, 0xFF	; 255
    7012:	b9 01       	movw	r22, r18
    7014:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <GPIO_readPinLogic>
    7018:	8b 83       	std	Y+3, r24	; 0x03

				if (valOfPressedBtn == GPIO_LOW) {
    701a:	8d 81       	ldd	r24, Y+5	; 0x05
    701c:	88 23       	and	r24, r24
    701e:	71 f5       	brne	.+92     	; 0x707c <EKP_scanningForPressedBtn+0xea>
    7020:	15 c0       	rjmp	.+42     	; 0x704c <EKP_scanningForPressedBtn+0xba>
					while(valOfPressedBtn == GPIO_LOW)
					{
						gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);
    7022:	8e 81       	ldd	r24, Y+6	; 0x06
    7024:	9f 81       	ldd	r25, Y+7	; 0x07
    7026:	9c 01       	movw	r18, r24
    7028:	20 5f       	subi	r18, 0xF0	; 240
    702a:	3f 4f       	sbci	r19, 0xFF	; 255
    702c:	89 81       	ldd	r24, Y+1	; 0x01
    702e:	88 2f       	mov	r24, r24
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	88 0f       	add	r24, r24
    7034:	99 1f       	adc	r25, r25
    7036:	88 0f       	add	r24, r24
    7038:	99 1f       	adc	r25, r25
    703a:	82 0f       	add	r24, r18
    703c:	93 1f       	adc	r25, r19
    703e:	9e 01       	movw	r18, r28
    7040:	2b 5f       	subi	r18, 0xFB	; 251
    7042:	3f 4f       	sbci	r19, 0xFF	; 255
    7044:	b9 01       	movw	r22, r18
    7046:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <GPIO_readPinLogic>
    704a:	8b 83       	std	Y+3, r24	; 0x03
			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {

				gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);

				if (valOfPressedBtn == GPIO_LOW) {
					while(valOfPressedBtn == GPIO_LOW)
    704c:	8d 81       	ldd	r24, Y+5	; 0x05
    704e:	88 23       	and	r24, r24
    7050:	41 f3       	breq	.-48     	; 0x7022 <EKP_scanningForPressedBtn+0x90>
					{
						gpioRet = GPIO_readPinLogic(&(ST_ptrKeypadInstance->arrOfColumns[Colscounter]),&valOfPressedBtn);
					}
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
    7052:	8a 81       	ldd	r24, Y+2	; 0x02
    7054:	48 2f       	mov	r20, r24
    7056:	50 e0       	ldi	r21, 0x00	; 0
    7058:	89 81       	ldd	r24, Y+1	; 0x01
    705a:	28 2f       	mov	r18, r24
    705c:	30 e0       	ldi	r19, 0x00	; 0
    705e:	ca 01       	movw	r24, r20
    7060:	88 0f       	add	r24, r24
    7062:	99 1f       	adc	r25, r25
    7064:	88 0f       	add	r24, r24
    7066:	99 1f       	adc	r25, r25
    7068:	82 0f       	add	r24, r18
    706a:	93 1f       	adc	r25, r19
    706c:	fc 01       	movw	r30, r24
    706e:	e4 5f       	subi	r30, 0xF4	; 244
    7070:	fe 4f       	sbci	r31, 0xFE	; 254
    7072:	80 81       	ld	r24, Z
    7074:	e8 85       	ldd	r30, Y+8	; 0x08
    7076:	f9 85       	ldd	r31, Y+9	; 0x09
    7078:	80 83       	st	Z, r24
    707a:	07 c0       	rjmp	.+14     	; 0x708a <EKP_scanningForPressedBtn+0xf8>

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_LOW);

			for (Colscounter = LOOP_STARTING_VALUE;Colscounter<KEYPAD_COLUMNS_SIZE;Colscounter++) {
    707c:	89 81       	ldd	r24, Y+1	; 0x01
    707e:	8f 5f       	subi	r24, 0xFF	; 255
    7080:	89 83       	std	Y+1, r24	; 0x01
    7082:	89 81       	ldd	r24, Y+1	; 0x01
    7084:	84 30       	cpi	r24, 0x04	; 4
    7086:	08 f4       	brcc	.+2      	; 0x708a <EKP_scanningForPressedBtn+0xf8>
    7088:	b3 cf       	rjmp	.-154    	; 0x6ff0 <EKP_scanningForPressedBtn+0x5e>
					*pressedBtnVal =KEYPAD_arrBtnVal[Rowscounter][Colscounter];
					break;
				}
			}

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_HIGH);
    708a:	2e 81       	ldd	r18, Y+6	; 0x06
    708c:	3f 81       	ldd	r19, Y+7	; 0x07
    708e:	8a 81       	ldd	r24, Y+2	; 0x02
    7090:	88 2f       	mov	r24, r24
    7092:	90 e0       	ldi	r25, 0x00	; 0
    7094:	88 0f       	add	r24, r24
    7096:	99 1f       	adc	r25, r25
    7098:	88 0f       	add	r24, r24
    709a:	99 1f       	adc	r25, r25
    709c:	82 0f       	add	r24, r18
    709e:	93 1f       	adc	r25, r19
    70a0:	61 e0       	ldi	r22, 0x01	; 1
    70a2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <GPIO_writePinLogic>
    70a6:	8b 83       	std	Y+3, r24	; 0x03

	if (PTR_NULL != ST_ptrKeypadInstance && PTR_NULL != pressedBtnVal) {
		uint8_t Rowscounter, Colscounter;
		EN_GPIO_pinLogic_t valOfPressedBtn;

		for (Rowscounter = LOOP_STARTING_VALUE;Rowscounter<KEYPAD_ROWS_SIZE;Rowscounter++) {
    70a8:	8a 81       	ldd	r24, Y+2	; 0x02
    70aa:	8f 5f       	subi	r24, 0xFF	; 255
    70ac:	8a 83       	std	Y+2, r24	; 0x02
    70ae:	8a 81       	ldd	r24, Y+2	; 0x02
    70b0:	84 30       	cpi	r24, 0x04	; 4
    70b2:	08 f4       	brcc	.+2      	; 0x70b6 <EKP_scanningForPressedBtn+0x124>
    70b4:	8c cf       	rjmp	.-232    	; 0x6fce <EKP_scanningForPressedBtn+0x3c>
    70b6:	02 c0       	rjmp	.+4      	; 0x70bc <EKP_scanningForPressedBtn+0x12a>
			}

			gpioRet = GPIO_writePinLogic(&(ST_ptrKeypadInstance->arrOfRows[Rowscounter]),GPIO_HIGH);
		}
	} else {
		kpRet = EKP_PTR_NULL;
    70b8:	82 e0       	ldi	r24, 0x02	; 2
    70ba:	8c 83       	std	Y+4, r24	; 0x04
	}
	return kpRet;
    70bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    70be:	29 96       	adiw	r28, 0x09	; 9
    70c0:	0f b6       	in	r0, 0x3f	; 63
    70c2:	f8 94       	cli
    70c4:	de bf       	out	0x3e, r29	; 62
    70c6:	0f be       	out	0x3f, r0	; 63
    70c8:	cd bf       	out	0x3d, r28	; 61
    70ca:	cf 91       	pop	r28
    70cc:	df 91       	pop	r29
    70ce:	08 95       	ret

000070d0 <EDIP_init>:
// GitHub        : https://github.com/sherifkhadr
/*************************************************************************/

#include "../../HAL/dip/dip_interface.h"

EN_EDIP_systemState_t EDIP_init(ST_EDIP_cfg_t const *ST_ptrEdipCfgInstance) {
    70d0:	df 93       	push	r29
    70d2:	cf 93       	push	r28
    70d4:	cd b7       	in	r28, 0x3d	; 61
    70d6:	de b7       	in	r29, 0x3e	; 62
    70d8:	28 97       	sbiw	r28, 0x08	; 8
    70da:	0f b6       	in	r0, 0x3f	; 63
    70dc:	f8 94       	cli
    70de:	de bf       	out	0x3e, r29	; 62
    70e0:	0f be       	out	0x3f, r0	; 63
    70e2:	cd bf       	out	0x3d, r28	; 61
    70e4:	98 87       	std	Y+8, r25	; 0x08
    70e6:	8f 83       	std	Y+7, r24	; 0x07
  EN_EDIP_systemState_t dipRet = EDIP_NOK;
    70e8:	81 e0       	ldi	r24, 0x01	; 1
    70ea:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    70ec:	81 e0       	ldi	r24, 0x01	; 1
    70ee:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrEdipCfgInstance) {
    70f0:	8f 81       	ldd	r24, Y+7	; 0x07
    70f2:	98 85       	ldd	r25, Y+8	; 0x08
    70f4:	00 97       	sbiw	r24, 0x00	; 0
    70f6:	c1 f0       	breq	.+48     	; 0x7128 <EDIP_init+0x58>
    ST_GPIO_cfg_t dipPinCfg = {.pinDirection = GPIO_INPUT,
                               .pinNumber = ST_ptrEdipCfgInstance->dipPin,
                               .portName = ST_ptrEdipCfgInstance->dipPort,
                               .logicOnPin = GPIO_HIGH};
    70f8:	ef 81       	ldd	r30, Y+7	; 0x07
    70fa:	f8 85       	ldd	r31, Y+8	; 0x08
    70fc:	91 81       	ldd	r25, Z+1	; 0x01
    70fe:	ef 81       	ldd	r30, Y+7	; 0x07
    7100:	f8 85       	ldd	r31, Y+8	; 0x08
    7102:	80 81       	ld	r24, Z
    7104:	9b 83       	std	Y+3, r25	; 0x03
    7106:	8c 83       	std	Y+4, r24	; 0x04
    7108:	1d 82       	std	Y+5, r1	; 0x05
    710a:	81 e0       	ldi	r24, 0x01	; 1
    710c:	8e 83       	std	Y+6, r24	; 0x06

    gpioRet = GPIO_initPin(&dipPinCfg);
    710e:	ce 01       	movw	r24, r28
    7110:	03 96       	adiw	r24, 0x03	; 3
    7112:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <GPIO_initPin>
    7116:	89 83       	std	Y+1, r24	; 0x01

    if (gpioRet == GPIO_OK) {
    7118:	89 81       	ldd	r24, Y+1	; 0x01
    711a:	88 23       	and	r24, r24
    711c:	11 f4       	brne	.+4      	; 0x7122 <EDIP_init+0x52>
      dipRet = EDIP_OK;
    711e:	1a 82       	std	Y+2, r1	; 0x02
    7120:	05 c0       	rjmp	.+10     	; 0x712c <EDIP_init+0x5c>
    } else {
      dipRet = EDIP_NOK;
    7122:	81 e0       	ldi	r24, 0x01	; 1
    7124:	8a 83       	std	Y+2, r24	; 0x02
    7126:	02 c0       	rjmp	.+4      	; 0x712c <EDIP_init+0x5c>
    }
  } else {
    dipRet = EDIP_PTR_NULL;
    7128:	82 e0       	ldi	r24, 0x02	; 2
    712a:	8a 83       	std	Y+2, r24	; 0x02
  }
  return dipRet;
    712c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    712e:	28 96       	adiw	r28, 0x08	; 8
    7130:	0f b6       	in	r0, 0x3f	; 63
    7132:	f8 94       	cli
    7134:	de bf       	out	0x3e, r29	; 62
    7136:	0f be       	out	0x3f, r0	; 63
    7138:	cd bf       	out	0x3d, r28	; 61
    713a:	cf 91       	pop	r28
    713c:	df 91       	pop	r29
    713e:	08 95       	ret

00007140 <EDIP_readStates>:

EN_EDIP_systemState_t
EDIP_readStates(ST_EDIP_cfg_t const *ST_ptrEdipCfgInstance,
                EN_EDIP_logicStatus_t *retOfEdipStatus) {
    7140:	df 93       	push	r29
    7142:	cf 93       	push	r28
    7144:	cd b7       	in	r28, 0x3d	; 61
    7146:	de b7       	in	r29, 0x3e	; 62
    7148:	2b 97       	sbiw	r28, 0x0b	; 11
    714a:	0f b6       	in	r0, 0x3f	; 63
    714c:	f8 94       	cli
    714e:	de bf       	out	0x3e, r29	; 62
    7150:	0f be       	out	0x3f, r0	; 63
    7152:	cd bf       	out	0x3d, r28	; 61
    7154:	99 87       	std	Y+9, r25	; 0x09
    7156:	88 87       	std	Y+8, r24	; 0x08
    7158:	7b 87       	std	Y+11, r23	; 0x0b
    715a:	6a 87       	std	Y+10, r22	; 0x0a

  EN_EDIP_systemState_t dipRet = EDIP_NOK;
    715c:	81 e0       	ldi	r24, 0x01	; 1
    715e:	8a 83       	std	Y+2, r24	; 0x02
  EN_GPIO_systemState_t gpioRet = GPIO_NOK;
    7160:	81 e0       	ldi	r24, 0x01	; 1
    7162:	89 83       	std	Y+1, r24	; 0x01

  if (PTR_NULL != ST_ptrEdipCfgInstance) {
    7164:	88 85       	ldd	r24, Y+8	; 0x08
    7166:	99 85       	ldd	r25, Y+9	; 0x09
    7168:	00 97       	sbiw	r24, 0x00	; 0
    716a:	79 f1       	breq	.+94     	; 0x71ca <EDIP_readStates+0x8a>
    ST_GPIO_cfg_t dipPinCfg = {.pinDirection = GPIO_INPUT,
                               .pinNumber = ST_ptrEdipCfgInstance->dipPin,
                               .portName = ST_ptrEdipCfgInstance->dipPort};
    716c:	e8 85       	ldd	r30, Y+8	; 0x08
    716e:	f9 85       	ldd	r31, Y+9	; 0x09
    7170:	91 81       	ldd	r25, Z+1	; 0x01
    7172:	e8 85       	ldd	r30, Y+8	; 0x08
    7174:	f9 85       	ldd	r31, Y+9	; 0x09
    7176:	80 81       	ld	r24, Z
    7178:	1b 82       	std	Y+3, r1	; 0x03
    717a:	1c 82       	std	Y+4, r1	; 0x04
    717c:	1d 82       	std	Y+5, r1	; 0x05
    717e:	1e 82       	std	Y+6, r1	; 0x06
    7180:	9b 83       	std	Y+3, r25	; 0x03
    7182:	8c 83       	std	Y+4, r24	; 0x04

    EN_GPIO_pinLogic_t currentSwitchStatus;
    gpioRet = GPIO_readPinLogic(&dipPinCfg, &currentSwitchStatus);
    7184:	ce 01       	movw	r24, r28
    7186:	03 96       	adiw	r24, 0x03	; 3
    7188:	9e 01       	movw	r18, r28
    718a:	29 5f       	subi	r18, 0xF9	; 249
    718c:	3f 4f       	sbci	r19, 0xFF	; 255
    718e:	b9 01       	movw	r22, r18
    7190:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <GPIO_readPinLogic>
    7194:	89 83       	std	Y+1, r24	; 0x01
    if (gpioRet == GPIO_OK) {
    7196:	89 81       	ldd	r24, Y+1	; 0x01
    7198:	88 23       	and	r24, r24
    719a:	a1 f4       	brne	.+40     	; 0x71c4 <EDIP_readStates+0x84>
      if (currentSwitchStatus == GPIO_LOW) {
    719c:	8f 81       	ldd	r24, Y+7	; 0x07
    719e:	88 23       	and	r24, r24
    71a0:	31 f4       	brne	.+12     	; 0x71ae <EDIP_readStates+0x6e>
        *retOfEdipStatus = EDIP_IS_ON;
    71a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    71a4:	fb 85       	ldd	r31, Y+11	; 0x0b
    71a6:	81 e0       	ldi	r24, 0x01	; 1
    71a8:	80 83       	st	Z, r24
        dipRet = EDIP_OK;
    71aa:	1a 82       	std	Y+2, r1	; 0x02
    71ac:	10 c0       	rjmp	.+32     	; 0x71ce <EDIP_readStates+0x8e>
      } else if (currentSwitchStatus == GPIO_HIGH) {
    71ae:	8f 81       	ldd	r24, Y+7	; 0x07
    71b0:	81 30       	cpi	r24, 0x01	; 1
    71b2:	29 f4       	brne	.+10     	; 0x71be <EDIP_readStates+0x7e>
        *retOfEdipStatus = EDIP_IS_OFF;
    71b4:	ea 85       	ldd	r30, Y+10	; 0x0a
    71b6:	fb 85       	ldd	r31, Y+11	; 0x0b
    71b8:	10 82       	st	Z, r1
        dipRet = EDIP_OK;
    71ba:	1a 82       	std	Y+2, r1	; 0x02
    71bc:	08 c0       	rjmp	.+16     	; 0x71ce <EDIP_readStates+0x8e>
      } else {
        dipRet = EDIP_NOK;
    71be:	81 e0       	ldi	r24, 0x01	; 1
    71c0:	8a 83       	std	Y+2, r24	; 0x02
    71c2:	05 c0       	rjmp	.+10     	; 0x71ce <EDIP_readStates+0x8e>
      }
    } else {
      dipRet = EDIP_NOK;
    71c4:	81 e0       	ldi	r24, 0x01	; 1
    71c6:	8a 83       	std	Y+2, r24	; 0x02
    71c8:	02 c0       	rjmp	.+4      	; 0x71ce <EDIP_readStates+0x8e>
    }
  } else {
    dipRet = EDIP_PTR_NULL;
    71ca:	82 e0       	ldi	r24, 0x02	; 2
    71cc:	8a 83       	std	Y+2, r24	; 0x02
  }
  return dipRet;
    71ce:	8a 81       	ldd	r24, Y+2	; 0x02
    71d0:	2b 96       	adiw	r28, 0x0b	; 11
    71d2:	0f b6       	in	r0, 0x3f	; 63
    71d4:	f8 94       	cli
    71d6:	de bf       	out	0x3e, r29	; 62
    71d8:	0f be       	out	0x3f, r0	; 63
    71da:	cd bf       	out	0x3d, r28	; 61
    71dc:	cf 91       	pop	r28
    71de:	df 91       	pop	r29
    71e0:	08 95       	ret

000071e2 <led_int>:
};

vuint32_t counter = 0;

void led_int(void)
{
    71e2:	df 93       	push	r29
    71e4:	cf 93       	push	r28
    71e6:	cd b7       	in	r28, 0x3d	; 61
    71e8:	de b7       	in	r29, 0x3e	; 62
	if(counter == 16)
    71ea:	80 91 55 01 	lds	r24, 0x0155
    71ee:	90 91 56 01 	lds	r25, 0x0156
    71f2:	a0 91 57 01 	lds	r26, 0x0157
    71f6:	b0 91 58 01 	lds	r27, 0x0158
    71fa:	80 31       	cpi	r24, 0x10	; 16
    71fc:	91 05       	cpc	r25, r1
    71fe:	a1 05       	cpc	r26, r1
    7200:	b1 05       	cpc	r27, r1
    7202:	69 f4       	brne	.+26     	; 0x721e <led_int+0x3c>
	{
		LED_toggle(&led);
    7204:	82 e5       	ldi	r24, 0x52	; 82
    7206:	91 e0       	ldi	r25, 0x01	; 1
    7208:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <LED_toggle>
		counter = 0;
    720c:	10 92 55 01 	sts	0x0155, r1
    7210:	10 92 56 01 	sts	0x0156, r1
    7214:	10 92 57 01 	sts	0x0157, r1
    7218:	10 92 58 01 	sts	0x0158, r1
    721c:	13 c0       	rjmp	.+38     	; 0x7244 <led_int+0x62>
	}
	else
	{
		counter++;
    721e:	80 91 55 01 	lds	r24, 0x0155
    7222:	90 91 56 01 	lds	r25, 0x0156
    7226:	a0 91 57 01 	lds	r26, 0x0157
    722a:	b0 91 58 01 	lds	r27, 0x0158
    722e:	01 96       	adiw	r24, 0x01	; 1
    7230:	a1 1d       	adc	r26, r1
    7232:	b1 1d       	adc	r27, r1
    7234:	80 93 55 01 	sts	0x0155, r24
    7238:	90 93 56 01 	sts	0x0156, r25
    723c:	a0 93 57 01 	sts	0x0157, r26
    7240:	b0 93 58 01 	sts	0x0158, r27
	}
}
    7244:	cf 91       	pop	r28
    7246:	df 91       	pop	r29
    7248:	08 95       	ret

0000724a <appInit>:
		.deviceAddress = 0x02
};


void appInit(void)
{
    724a:	df 93       	push	r29
    724c:	cf 93       	push	r28
    724e:	cd b7       	in	r28, 0x3d	; 61
    7250:	de b7       	in	r29, 0x3e	; 62
	MGI_vGIE();
    7252:	0e 94 18 12 	call	0x2430	; 0x2430 <MGI_vGIE>
	MTMR_init(&tmr);
    7256:	8c e1       	ldi	r24, 0x1C	; 28
    7258:	91 e0       	ldi	r25, 0x01	; 1
    725a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <MTMR_init>
	LED_init(&led);
    725e:	82 e5       	ldi	r24, 0x52	; 82
    7260:	91 e0       	ldi	r25, 0x01	; 1
    7262:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <LED_init>
	MTMR_start(&tmr);
    7266:	8c e1       	ldi	r24, 0x1C	; 28
    7268:	91 e0       	ldi	r25, 0x01	; 1
    726a:	0e 94 bd 09 	call	0x137a	; 0x137a <MTMR_start>
}
    726e:	cf 91       	pop	r28
    7270:	df 91       	pop	r29
    7272:	08 95       	ret

00007274 <appMain>:

void appMain(void)
{
    7274:	df 93       	push	r29
    7276:	cf 93       	push	r28
    7278:	cd b7       	in	r28, 0x3d	; 61
    727a:	de b7       	in	r29, 0x3e	; 62
    727c:	ff cf       	rjmp	.-2      	; 0x727c <appMain+0x8>

0000727e <main>:

#include "APPLICATION/app.h"


void main(void)
{
    727e:	df 93       	push	r29
    7280:	cf 93       	push	r28
    7282:	cd b7       	in	r28, 0x3d	; 61
    7284:	de b7       	in	r29, 0x3e	; 62
	appInit();
    7286:	0e 94 25 39 	call	0x724a	; 0x724a <appInit>
	appMain();
    728a:	0e 94 3a 39 	call	0x7274	; 0x7274 <appMain>
}
    728e:	cf 91       	pop	r28
    7290:	df 91       	pop	r29
    7292:	08 95       	ret

00007294 <__prologue_saves__>:
    7294:	2f 92       	push	r2
    7296:	3f 92       	push	r3
    7298:	4f 92       	push	r4
    729a:	5f 92       	push	r5
    729c:	6f 92       	push	r6
    729e:	7f 92       	push	r7
    72a0:	8f 92       	push	r8
    72a2:	9f 92       	push	r9
    72a4:	af 92       	push	r10
    72a6:	bf 92       	push	r11
    72a8:	cf 92       	push	r12
    72aa:	df 92       	push	r13
    72ac:	ef 92       	push	r14
    72ae:	ff 92       	push	r15
    72b0:	0f 93       	push	r16
    72b2:	1f 93       	push	r17
    72b4:	cf 93       	push	r28
    72b6:	df 93       	push	r29
    72b8:	cd b7       	in	r28, 0x3d	; 61
    72ba:	de b7       	in	r29, 0x3e	; 62
    72bc:	ca 1b       	sub	r28, r26
    72be:	db 0b       	sbc	r29, r27
    72c0:	0f b6       	in	r0, 0x3f	; 63
    72c2:	f8 94       	cli
    72c4:	de bf       	out	0x3e, r29	; 62
    72c6:	0f be       	out	0x3f, r0	; 63
    72c8:	cd bf       	out	0x3d, r28	; 61
    72ca:	09 94       	ijmp

000072cc <__epilogue_restores__>:
    72cc:	2a 88       	ldd	r2, Y+18	; 0x12
    72ce:	39 88       	ldd	r3, Y+17	; 0x11
    72d0:	48 88       	ldd	r4, Y+16	; 0x10
    72d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    72d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    72d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    72d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    72da:	9b 84       	ldd	r9, Y+11	; 0x0b
    72dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    72de:	b9 84       	ldd	r11, Y+9	; 0x09
    72e0:	c8 84       	ldd	r12, Y+8	; 0x08
    72e2:	df 80       	ldd	r13, Y+7	; 0x07
    72e4:	ee 80       	ldd	r14, Y+6	; 0x06
    72e6:	fd 80       	ldd	r15, Y+5	; 0x05
    72e8:	0c 81       	ldd	r16, Y+4	; 0x04
    72ea:	1b 81       	ldd	r17, Y+3	; 0x03
    72ec:	aa 81       	ldd	r26, Y+2	; 0x02
    72ee:	b9 81       	ldd	r27, Y+1	; 0x01
    72f0:	ce 0f       	add	r28, r30
    72f2:	d1 1d       	adc	r29, r1
    72f4:	0f b6       	in	r0, 0x3f	; 63
    72f6:	f8 94       	cli
    72f8:	de bf       	out	0x3e, r29	; 62
    72fa:	0f be       	out	0x3f, r0	; 63
    72fc:	cd bf       	out	0x3d, r28	; 61
    72fe:	ed 01       	movw	r28, r26
    7300:	08 95       	ret

00007302 <itoa>:
    7302:	fb 01       	movw	r30, r22
    7304:	9f 01       	movw	r18, r30
    7306:	e8 94       	clt
    7308:	42 30       	cpi	r20, 0x02	; 2
    730a:	c4 f0       	brlt	.+48     	; 0x733c <itoa+0x3a>
    730c:	45 32       	cpi	r20, 0x25	; 37
    730e:	b4 f4       	brge	.+44     	; 0x733c <itoa+0x3a>
    7310:	4a 30       	cpi	r20, 0x0A	; 10
    7312:	29 f4       	brne	.+10     	; 0x731e <itoa+0x1c>
    7314:	97 fb       	bst	r25, 7
    7316:	1e f4       	brtc	.+6      	; 0x731e <itoa+0x1c>
    7318:	90 95       	com	r25
    731a:	81 95       	neg	r24
    731c:	9f 4f       	sbci	r25, 0xFF	; 255
    731e:	64 2f       	mov	r22, r20
    7320:	77 27       	eor	r23, r23
    7322:	0e 94 b2 39 	call	0x7364	; 0x7364 <__udivmodhi4>
    7326:	80 5d       	subi	r24, 0xD0	; 208
    7328:	8a 33       	cpi	r24, 0x3A	; 58
    732a:	0c f0       	brlt	.+2      	; 0x732e <itoa+0x2c>
    732c:	89 5d       	subi	r24, 0xD9	; 217
    732e:	81 93       	st	Z+, r24
    7330:	cb 01       	movw	r24, r22
    7332:	00 97       	sbiw	r24, 0x00	; 0
    7334:	a1 f7       	brne	.-24     	; 0x731e <itoa+0x1c>
    7336:	16 f4       	brtc	.+4      	; 0x733c <itoa+0x3a>
    7338:	5d e2       	ldi	r21, 0x2D	; 45
    733a:	51 93       	st	Z+, r21
    733c:	10 82       	st	Z, r1
    733e:	c9 01       	movw	r24, r18
    7340:	0c 94 a2 39 	jmp	0x7344	; 0x7344 <strrev>

00007344 <strrev>:
    7344:	dc 01       	movw	r26, r24
    7346:	fc 01       	movw	r30, r24
    7348:	67 2f       	mov	r22, r23
    734a:	71 91       	ld	r23, Z+
    734c:	77 23       	and	r23, r23
    734e:	e1 f7       	brne	.-8      	; 0x7348 <strrev+0x4>
    7350:	32 97       	sbiw	r30, 0x02	; 2
    7352:	04 c0       	rjmp	.+8      	; 0x735c <strrev+0x18>
    7354:	7c 91       	ld	r23, X
    7356:	6d 93       	st	X+, r22
    7358:	70 83       	st	Z, r23
    735a:	62 91       	ld	r22, -Z
    735c:	ae 17       	cp	r26, r30
    735e:	bf 07       	cpc	r27, r31
    7360:	c8 f3       	brcs	.-14     	; 0x7354 <strrev+0x10>
    7362:	08 95       	ret

00007364 <__udivmodhi4>:
    7364:	aa 1b       	sub	r26, r26
    7366:	bb 1b       	sub	r27, r27
    7368:	51 e1       	ldi	r21, 0x11	; 17
    736a:	07 c0       	rjmp	.+14     	; 0x737a <__udivmodhi4_ep>

0000736c <__udivmodhi4_loop>:
    736c:	aa 1f       	adc	r26, r26
    736e:	bb 1f       	adc	r27, r27
    7370:	a6 17       	cp	r26, r22
    7372:	b7 07       	cpc	r27, r23
    7374:	10 f0       	brcs	.+4      	; 0x737a <__udivmodhi4_ep>
    7376:	a6 1b       	sub	r26, r22
    7378:	b7 0b       	sbc	r27, r23

0000737a <__udivmodhi4_ep>:
    737a:	88 1f       	adc	r24, r24
    737c:	99 1f       	adc	r25, r25
    737e:	5a 95       	dec	r21
    7380:	a9 f7       	brne	.-22     	; 0x736c <__udivmodhi4_loop>
    7382:	80 95       	com	r24
    7384:	90 95       	com	r25
    7386:	bc 01       	movw	r22, r24
    7388:	cd 01       	movw	r24, r26
    738a:	08 95       	ret

0000738c <_exit>:
    738c:	f8 94       	cli

0000738e <__stop_program>:
    738e:	ff cf       	rjmp	.-2      	; 0x738e <__stop_program>
