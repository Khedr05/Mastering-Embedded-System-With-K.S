
00_EnableExti_U6L4A3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c3  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000598  00000000  00000000  00000943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  00000edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038f  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000162b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_1>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_2>
   c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	// Set led pins to be output
	SET_BIT(GPIO_DDRD,7);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	81 bb       	out	0x11, r24	; 17
	SET_BIT(GPIO_DDRD,6);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 64       	ori	r24, 0x40	; 64
  76:	81 bb       	out	0x11, r24	; 17
	SET_BIT(GPIO_DDRD,5);	
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	81 bb       	out	0x11, r24	; 17
	
	// Set INT pins to be input
	CLR_BIT(GPIO_DDRB,2);
  7e:	87 b3       	in	r24, 0x17	; 23
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(GPIO_DDRD,1);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	8d 7f       	andi	r24, 0xFD	; 253
  88:	81 bb       	out	0x11, r24	; 17
	CLR_BIT(GPIO_DDRD,0);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	81 bb       	out	0x11, r24	; 17
	
	/* Configure INT 1 Sense Control 
	to any logical change*/
	SET_BIT(EXTI_MCUCR , 3);
  90:	85 b7       	in	r24, 0x35	; 53
  92:	88 60       	ori	r24, 0x08	; 8
  94:	85 bf       	out	0x35, r24	; 53
	SET_BIT(EXTI_MCUCR , 2);
  96:	85 b7       	in	r24, 0x35	; 53
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	85 bf       	out	0x35, r24	; 53
	
	/* Configure INT 0 Sense Control 
	to any logical change*/
	CLR_BIT(EXTI_MCUCR , 1);
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	8d 7f       	andi	r24, 0xFD	; 253
  a0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(EXTI_MCUCR , 0);
  a2:	85 b7       	in	r24, 0x35	; 53
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	85 bf       	out	0x35, r24	; 53
	
	/* Configure INT 0 Sense Control 
	to any logical change*/
	CLR_BIT(EXTI_MCUCSR , 6);
  a8:	84 b7       	in	r24, 0x34	; 52
  aa:	8f 7b       	andi	r24, 0xBF	; 191
  ac:	84 bf       	out	0x34, r24	; 52
	
	/* Enable INT 0,1,2 */
	SET_BIT(EXTI_GICR,7);
  ae:	8b b7       	in	r24, 0x3b	; 59
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(EXTI_GICR,6);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(EXTI_GICR,5);
  ba:	8b b7       	in	r24, 0x3b	; 59
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8b bf       	out	0x3b, r24	; 59
	
	/* Enable Global INT */
	SET_BIT(SREG,7);
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63

    while (1) 
    {
		CLR_BIT(GPIO_PORTD,7);
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8f 77       	andi	r24, 0x7F	; 127
  ca:	82 bb       	out	0x12, r24	; 18
		CLR_BIT(GPIO_PORTD,6);
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7b       	andi	r24, 0xBF	; 191
  d0:	82 bb       	out	0x12, r24	; 18
		CLR_BIT(GPIO_PORTD,5);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	f6 cf       	rjmp	.-20     	; 0xc6 <main+0x5a>

000000da <__vector_1>:
    }
}


ISR(EXT_INT_0)
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	SET_BIT(GPIO_PORTD,5);
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <__vector_1+0x1c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <__vector_1+0x26>
 100:	00 00       	nop
	_delay_ms(1000);
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_2>:

ISR(EXT_INT_1)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
	SET_BIT(GPIO_PORTD,6);
 122:	82 b3       	in	r24, 0x12	; 18
 124:	80 64       	ori	r24, 0x40	; 64
 126:	82 bb       	out	0x12, r24	; 18
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	89 e6       	ldi	r24, 0x69	; 105
 12c:	98 e1       	ldi	r25, 0x18	; 24
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <__vector_2+0x1c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <__vector_2+0x26>
 138:	00 00       	nop
	_delay_ms(1000);
}
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_3>:

ISR(EXT_INT_2)
{
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
	SET_BIT(GPIO_PORTD,7);	
 15a:	82 b3       	in	r24, 0x12	; 18
 15c:	80 68       	ori	r24, 0x80	; 128
 15e:	82 bb       	out	0x12, r24	; 18
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	89 e6       	ldi	r24, 0x69	; 105
 164:	98 e1       	ldi	r25, 0x18	; 24
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <__vector_3+0x1c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <__vector_3+0x26>
 170:	00 00       	nop
	_delay_ms(1000);
}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
